DB/ResultSet/Library.pm:	return DB->resultset('Library')->find({ code => $code });
DB/ResultSet/Library.pm:sub find_none { shift->find_by_code('none') }
DB/ResultSet/Library.pm:		my $url = $g_libraries{$_}->{url};
DB/ResultSet/Library.pm:			return $g_libraries{$_}->{library};
DB/ResultSet/Library.pm:	$pkg->load_libraries() if(not $g_lib_time or (time - $g_lib_time > 600));
DB/ResultSet/Library.pm:	return $g_libraries{'obalky'}->{library} unless($referer);
DB/ResultSet/Library.pm:	my $library = $pkg->do_search($pkg->normalize_url($referer));
DB/ResultSet/Library.pm:#	return $library ? $library : $g_libraries{'obalky'}->{library};
DB/ResultSet/Library.pm:	#warn "DB::Library -> loading libraries (time ".time.")\n";
DB/ResultSet/Library.pm:	foreach($pkg->all) {
DB/ResultSet/Library.pm:		$g_libraries{$_->code} = {
DB/ResultSet/Library.pm:			url => $pkg->normalize_url($_->webopac),
DB/ResultSet/Cache.pm:	return JSON->new->canonical(1)->encode($obj);
DB/ResultSet/Cache.pm:	my($row) = $self->search({ "request" => $key });
DB/ResultSet/Cache.pm:		# if($row->created);
DB/ResultSet/Cache.pm:	return ($row->bookid,JSON->new->decode($row->response)); 
DB/ResultSet/Cache.pm:	my $response = JSON->new->canonical(1)->encode($value);
DB/ResultSet/Cache.pm:	$self->create({ request => $key, bookid => $bookid, response => $response });
DB/ResultSet/Cache.pm:	$bookid = $bookid->id if(ref $bookid); # podporujem i tohle..
DB/ResultSet/Cache.pm:	$self->search({ bookid => $bookid })->delete if($bookid);
DB/ResultSet/Fileblob.pm:	return $pkg->create( { medium => $medium, content => $content });
DB/ResultSet/Cover.pm:	my $recent = DB->resultset('Cover')->search({},
DB/ResultSet/Cover.pm:		{ order_by => { '-desc' => 'created' } });
DB/ResultSet/Cover.pm:			my $cover = $recent->next;
DB/ResultSet/Cover.pm:            push @{$rows[$r]->{cols}}, $cover->book;
DB/ResultSet/Cover.pm:	my @count = $pkg->search(checksum => $md5);
DB/ResultSet/Cover.pm:					$upload->batch."/".$upload->filename;
DB/ResultSet/Cover.pm:	return $pkg->create_from_file($book,$product,$filename);
DB/ResultSet/Cover.pm:	# my $book = $product->book;
DB/ResultSet/Cover.pm:	my($width,$height) = Obalky::Tools->image_size($file);
DB/ResultSet/Cover.pm:	# checksum - checksum originalu
DB/ResultSet/Cover.pm:    my $checksum = `md5sum $file | head -c 32`;
DB/ResultSet/Cover.pm:		my $fileblob_rs = DB->resultset('Fileblob');
DB/ResultSet/Cover.pm:		my $file_orig  = $fileblob_rs->new_from_file(
DB/ResultSet/Cover.pm:							"cover-orig", $file);
DB/ResultSet/Cover.pm:		my $file_cover = $fileblob_rs->new_from_file(
DB/ResultSet/Cover.pm:							"cover-medium","$dir/cover.jpg");
DB/ResultSet/Cover.pm:		my $file_thumb = $fileblob_rs->new_from_file(
DB/ResultSet/Cover.pm:							"cover-thumb","$dir/thumbnail.jpg");
DB/ResultSet/Cover.pm:		return eval { DB->resultset('Cover')->update_or_create({
DB/ResultSet/Cover.pm:    my($cw,$ch) = Obalky::Tools->resize($Obalky::Config::MEDIUM_WIDTH,
DB/ResultSet/Cover.pm:	my $tmp_file = "/tmp/cover-$$.jpg";
DB/ResultSet/Cover.pm:	system("convert", "-resize", $cw."x".$ch, $file, $tmp_file);
DB/ResultSet/Cover.pm:	$medium->transparent($white);
DB/ResultSet/Cover.pm:	$medium->copy($tmp_medium,$Obalky::Config::MEDIUM_WIDTH/2-$cw/2,
DB/ResultSet/Cover.pm:						$Obalky::Config::MEDIUM_HEIGHT/2-$ch/2,0,0,$cw,$ch);
DB/ResultSet/Cover.pm:    $jpeg_data = $medium->jpeg;
DB/ResultSet/Cover.pm:    open (OUT,">/tmp/cover-final-$$.jpg") || die;
DB/ResultSet/Cover.pm:	my $fileblob_rs = DB->resultset('Fileblob');
DB/ResultSet/Cover.pm:	my $file_cover = $fileblob_rs->new_from_file("cover-medium",$tmp_file);
DB/ResultSet/Cover.pm:    my($tw,$th) = Obalky::Tools->resize(27,36,$width,$height);
DB/ResultSet/Cover.pm:	system("convert", "-resize", $tw."x".$th, $file, $tmp_file);
DB/ResultSet/Cover.pm:	my $file_thumb = $fileblob_rs->new_from_file("cover-thumb",$tmp_file);
DB/ResultSet/Cover.pm:	# original.jpg -- ukladat ho?
DB/ResultSet/Cover.pm:	my $file_orig  = $fileblob_rs->new_from_file("cover-orig", $file);
DB/ResultSet/Cover.pm:	my $cover = eval { DB->resultset('Cover')->update_or_create({
DB/ResultSet/User.pm:	die "Neplatný e-mail '$email'.\n" unless $email =~ /\@.+\..+/;
DB/ResultSet/User.pm:	my($user) = $pkg->search(login => $email);
DB/ResultSet/User.pm:	my $email = $pkg->reset_decode($reset);
DB/ResultSet/User.pm:	my $user = $pkg->find_by_email($email);
DB/ResultSet/User.pm:	$user->update({ password => $pass1 });
DB/ResultSet/User.pm:	my $today = DateTime->today()->ymd;
DB/ResultSet/User.pm:	my $today = DateTime->today()->ymd;
DB/ResultSet/User.pm:	die "Uživatel s e-mailovou adresou <a href=\"mailto:$email\">$email</a>".
DB/ResultSet/User.pm:			" nebyl v systému nalezen.\n" unless $pkg->find_by_email($email);
DB/ResultSet/User.pm:	my $reset = $pkg->reset_encode($email);
DB/ResultSet/User.pm:	open(MUTT,"|mutt -b 'martin\@sarfy.cz' ".
DB/ResultSet/User.pm:			"-s 'obalkyknih.cz -- vyresetovani hesla' '$email'");
DB/ResultSet/User.pm:	my $login = $hash->{email};
DB/ResultSet/User.pm:		if(not $hash->{fullname} or $hash->{fullname} !~ /\s/);
DB/ResultSet/User.pm:	push @errors, "Neplatný e-mail '$login'.\n" 
DB/ResultSet/User.pm:		unless(Obalky::Tools->valid_email($login));
DB/ResultSet/User.pm:	push @errors, "Uživatel s e-mailem <a href=\"mailto:$login\">$login</a>".
DB/ResultSet/User.pm:			" už v systému existuje."  if($pkg->find_by_email($login));
DB/ResultSet/User.pm:	push @errors, "Není vyplněno heslo." unless($hash->{password1});
DB/ResultSet/User.pm:		if($hash->{password1} ne $hash->{password2});
DB/ResultSet/User.pm:	unless($hash->{xmlfeed} or $hash->{libcode}) {
DB/ResultSet/User.pm:	my $libcode = $hash->{libcode};
DB/ResultSet/User.pm:			unless($hash->{libname});
DB/ResultSet/User.pm:		push @errors, "Není vyplněno město knihovny."  unless($hash->{libcity});
DB/ResultSet/User.pm:		push @errors, "Není vyplňěna adresa knihovny." unless($hash->{libaddress});
DB/ResultSet/User.pm:		my @lines = split(/\n/,$hash->{libaddress});
DB/ResultSet/User.pm:		push @errors, "Není vyplňěn e-mail ředitele/vedoucího knihovny (".Dumper($hash).")."
DB/ResultSet/User.pm:			unless(Obalky::Tools->valid_email($hash->{libemailboss}));
DB/ResultSet/User.pm:		push @errors, "Není vyplňěn e-mail pro zasílání komerčních sdělení."
DB/ResultSet/User.pm:			unless(Obalky::Tools->valid_email($hash->{libemailads}));
DB/ResultSet/User.pm:			unless($hash->{libopac} =~ /^http\:\/\/.+\..+$/);
DB/ResultSet/User.pm:			if($hash->{xmlfeed} and not $hash->{xmlfeed} =~ /^http\:\/\/.+\..+$/);
DB/ResultSet/User.pm:		my $skipmember = ($hash->{libskipmember} and 
DB/ResultSet/User.pm:				lc($hash->{libskipmember}) ne 'off');
DB/ResultSet/User.pm:			my $libinfo = { code => $libcode, city => $hash->{libcity},
DB/ResultSet/User.pm:				emailboss => $hash->{libemailboss}, address => $hash->{libaddress},
DB/ResultSet/User.pm:				emailads => $hash->{libemailads}, skipmember => $skipmember };
DB/ResultSet/User.pm:			$library = DB->resultset('Library')->find_by_code($libcode);
DB/ResultSet/User.pm:				$library->update($libinfo);
DB/ResultSet/User.pm:				$library = DB->resultset('Library')->create($libinfo);
DB/ResultSet/User.pm:			eval { $user = $pkg->create({
DB/ResultSet/User.pm:				login => $login, fullname => $hash->{fullname},
DB/ResultSet/User.pm:				password => $hash->{password1},  library => $library,
DB/ResultSet/User.pm:				xmlfeed_url => $hash->{xmlfeed}, logo_url => $hash->{logo_url}
DB/ResultSet/User.pm:	foreach($pkg->all) {
DB/ResultSet/User.pm:		push @feeds,$_->xmlfeed_url if($_->xmlfeed_url);
DB/ResultSet/Request.pm:# #request -- adept na zruseni
DB/ResultSet/Request.pm:	return $pkg->create($hash);
DB/ResultSet/Request.pm:	$req->update;
DB/ResultSet/Upload.pm:	my $type = __PACKAGE__->filetype($name);
DB/ResultSet/Upload.pm:    if($info->{file} and $info->{url}) {
DB/ResultSet/Upload.pm:	$api->write("url: ".$info->{url}."\n") if($api);
DB/ResultSet/Upload.pm:	unless(-d "/tmp/.obalky") {
DB/ResultSet/Upload.pm:	my $batch = MD5->hexhash($$."-".$info->{login}.
DB/ResultSet/Upload.pm:					"-".(int(rand(1000000))+1)."-".time);
DB/ResultSet/Upload.pm:	#my @all = __PACKAGE__->retrieve_all; 
DB/ResultSet/Upload.pm:	#my $batch = MD5->hexhash($$."-".$login."-".(scalar(@all)+1));
DB/ResultSet/Upload.pm:#	die "Interní chyba: dávka $batch už existuje" if(-d $original);
DB/ResultSet/Upload.pm:	system("rm -rf '$upload'"); # shouldn't happen
DB/ResultSet/Upload.pm:	if($info->{url}) {
DB/ResultSet/Upload.pm:		my $url = $info->{url};
DB/ResultSet/Upload.pm:		$api->write("wget -O '$original/$filename'\n") if($api);
DB/ResultSet/Upload.pm:		system("wget","-q",$url,"-O",$original."/".$filename);# == 0
DB/ResultSet/Upload.pm:				unless(-s $original."/".$filename);
DB/ResultSet/Upload.pm:		my $file = $info->{file};
DB/ResultSet/Upload.pm:		$filename = $file->basename;
DB/ResultSet/Upload.pm:		copy($file->tempname,$original."/".$filename) 
DB/ResultSet/Upload.pm:	$api->write(`ls -lh '$original/$filename'\n`) if($api);
DB/ResultSet/Upload.pm:	my $filetype = __PACKAGE__->filetype($original."/".$filename);
DB/ResultSet/Upload.pm:		system("unzip -qq '$original/$filename' -d '$upload' >/dev/null");
DB/ResultSet/Upload.pm:		system("tar xf '$original/$filename' -C '$upload' >/dev/null");
DB/ResultSet/Upload.pm:	# unlink($prefix."-".$filename); # original si nechame!
DB/ResultSet/Upload.pm:	$api->write("uploaded ".scalar(@g_upload_images)." files\n") if($api);
DB/ResultSet/Upload.pm:		if(__PACKAGE__->process($api,$batch,$upload,$id,$info,$_)) {
DB/ResultSet/Upload.pm:			# $list{$ean13} = $cover->id if($api);
DB/ResultSet/Upload.pm:	die "Chybný importní soubor -- nebyly nalezeny žádné správně ".
DB/ResultSet/Upload.pm:		system("rm -rf '$upload' '$original'") if($api);
DB/ResultSet/Upload.pm:#		$api->write("ean13 $_ inserted as cover ".$list{$_}."\n") 
DB/ResultSet/Upload.pm:		$api->write("processed $count covers.\n");
DB/ResultSet/Upload.pm:	my $type = __PACKAGE__->filetype($filepath);
DB/ResultSet/Upload.pm:	$bibinfo = Obalky::BibInfo->new_from_string($file_id) 
DB/ResultSet/Upload.pm:	my $user = DB->resultset('User')->find_by_email($info->{login});
DB/ResultSet/Upload.pm:	my $upload = DB->resultset('Upload')->create({
DB/ResultSet/Upload.pm:		origname => $filename, 	orig_url => $info->{orig_url},
DB/ResultSet/Upload.pm:	$upload->orig_url($info->{url}) unless($info->{orig_url});
DB/ResultSet/Upload.pm:	$bibinfo->save_to($upload);
DB/ResultSet/Upload.pm:	my $md5 = `md5sum $filepath | head -c 32`;
DB/ResultSet/Upload.pm:	$upload->checksum($md5);
DB/ResultSet/Upload.pm:	$upload->update;
DB/ResultSet/Upload.pm:	if($api and DB->resultset('Cover')->has_same_cover($bibinfo,$md5)) {
DB/ResultSet/Upload.pm:		$api->write("Cover already in database, ignoring..\n");
DB/ResultSet/Upload.pm:#		$conn->option(preferredRecordSyntax => "usmarc");
DB/ResultSet/Upload.pm:#		my $rs = $conn->search_pqf('@attr 1=7 '.$isbn);
DB/ResultSet/Upload.pm:#		my $rec = $rs->record(0);
DB/ResultSet/Upload.pm:#			my $raw = $rec->raw();
DB/ResultSet/Upload.pm:#			$upload->title($marc->title());
DB/ResultSet/Upload.pm:#			$upload->author($marc->author());
DB/ResultSet/Upload.pm:#			$upload->year($marc->publication_date());
DB/ResultSet/Upload.pm:#		print "Error ", $@->code(), ": ", $@->message(), "\n";
DB/ResultSet/Upload.pm:	# yaz-client aleph.muni.cz:9991/mub01
DB/ResultSet/Upload.pm:	# yaz-client z3950.loc.gov:7090/voyager
DB/ResultSet/Upload.pm:		eval { ($book,$object) = DB->resultset('Book')->upload($upload) };
DB/ResultSet/Upload.pm:		$book->invalidate;
DB/ResultSet/Upload.pm:		$api->write("error: $@\n") if($@);
DB/ResultSet/Upload.pm:		$api->write("SUCCESS: ".$upload->to_isbn." -> BOOK ".
DB/ResultSet/Upload.pm:			$book->id.", OBJECT ".$object->id."\n") unless($@);
DB/ResultSet/Upload.pm:	return $pkg->search(batch => $batch);
DB/ResultSet/Upload.pm:		my $hash = $list->{$_};
DB/ResultSet/Upload.pm:        next if(not $hash->{check} or $hash->{check} ne 'on');
DB/ResultSet/Upload.pm:		my $upload = DB->resultset('Upload')->find($hash->{id});
DB/ResultSet/Upload.pm:		$upload->authors($hash->{authors}) if($hash->{authors});
DB/ResultSet/Upload.pm:		$upload->title($hash->{title})     if($hash->{title});
DB/ResultSet/Upload.pm:		$upload->year($hash->{year})       if($hash->{year});
DB/ResultSet/Upload.pm:		$upload->update;
DB/ResultSet/Upload.pm:		my $bibinfo = Obalky::BibInfo->new($upload);
DB/ResultSet/Upload.pm:		my $media = Obalky::Media->new_from_info({
DB/ResultSet/Upload.pm:						cover_url => $upload->cover_url, 
DB/ResultSet/Upload.pm:						cover_tmpfile => $upload->cover_tmpfile });
DB/ResultSet/Upload.pm:		# pridej do Upload e-shopu product, mozna vypropaguje obalku do book
DB/ResultSet/Upload.pm:		my $upload_eshop = DB->resultset('Eshop')->get_upload_eshop;
DB/ResultSet/Upload.pm:		my $product_url = $Obalky::Config::WWW_URL."/view?".$bibinfo->to_some_param;
DB/ResultSet/Upload.pm:		my $product = $upload_eshop->add_product($bibinfo,$media,$product_url);
DB/ResultSet/Upload.pm:		$upload->update({ product => $product });
DB/ResultSet/Upload.pm:	system("rm -rf ".$Obalky::Config::WWW_DIR."/upload/".$batch) if($batch);
DB/ResultSet/Eshop.pm:	foreach($pkg->all()) {
DB/ResultSet/Eshop.pm:		$max = $_->id if($max < $_->id);
DB/ResultSet/Eshop.pm:	my %eshops = Eshop->get_eshops;
DB/ResultSet/Eshop.pm:		$pkg->find_or_create({ name => $info->{name} }, 
DB/ResultSet/Eshop.pm:	return $pkg->find($name,{ key => 'eshop_name' });
DB/ResultSet/Eshop.pm:	$pkg->sync_eshops;
DB/ResultSet/Eshop.pm:	return $pkg->find_by_name('Upload'); 
DB/ResultSet/Abuse.pm:	if($book and $cover and $book->cover and 
DB/ResultSet/Abuse.pm:		($book->cover->id eq $cover->id)) {
DB/ResultSet/Abuse.pm:		$book->update({ cover => undef }); # zrus hned???
DB/ResultSet/Abuse.pm:	my $abuse = $pkg->create({
DB/ResultSet/Work.pm:	my $work = $pkg->create({});
DB/ResultSet/Work.pm:	$_->assign_to_work($work) foreach(@books);
DB/ResultSet/Review.pm:	#$pkg->search({ visitor_ip => { "!=" => undef } });
DB/ResultSet/Review.pm:	$pkg->search({ -and => [
DB/ResultSet/Visitor.pm:		my $visitor = $pkg->find($visitor_id);
DB/ResultSet/Visitor.pm:			$visitor->update({ last_ip => $ip, last_time => DateTime->now(),
DB/ResultSet/Visitor.pm:							  count => $visitor->count + 1 });
DB/ResultSet/Visitor.pm:	$library = DB->resultset('Library')->find_none unless($library);
DB/ResultSet/Visitor.pm:	return $pkg->create({ library => $library, first_ip => $ip });
DB/ResultSet/Book.pm:#__PACKAGE__->utf8_columns(qw/title authors/);
DB/ResultSet/Book.pm:    my $book = $pkg->find_by_bibinfo($bibinfo);
DB/ResultSet/Book.pm:	$book = $pkg->create({}) unless($book);
DB/ResultSet/Book.pm:	$book->authors($upload->authors) if($upload->authors);
DB/ResultSet/Book.pm:	$book->title($upload->title)     if($upload->title);
DB/ResultSet/Book.pm:	$book->year($upload->year)       if($upload->year);
DB/ResultSet/Book.pm:	$bibinfo->save_to($book);
DB/ResultSet/Book.pm:	my $object = DB->resultset('Cover')->upload($book,$upload);
DB/ResultSet/Book.pm:	$book->cover($object);
DB/ResultSet/Book.pm:	$book->update;
DB/ResultSet/Book.pm:    my @books = DB->resultset('Book')->search(ean13 => 
DB/ResultSet/Book.pm:					Obalky::BibInfo->isbn_to_ean13($isbn));
DB/ResultSet/Book.pm:    my @books = DB->resultset('Book')->search(ean13 => $ean13);
DB/ResultSet/Book.pm:    push @books, DB->resultset('Book')->search(
DB/ResultSet/Book.pm:        { ean13 => $id->{ean13} }) if($id->{ean13});
DB/ResultSet/Book.pm:    push @books, DB->resultset('Book')->search(
DB/ResultSet/Book.pm:        { oclc => $id->{oclc} }) if($id->{oclc});
DB/ResultSet/Book.pm:    push @books, DB->resultset('Book')->search(
DB/ResultSet/Book.pm:        { nbn => $id->{nbn} }) if($id->{nbn});
DB/ResultSet/Book.pm:	my $book = $pkg->find_by_bibinfo($bibinfo);
DB/ResultSet/Book.pm:	$bibinfo->save_to_hash($hash);
DB/ResultSet/Book.pm:	return $pkg->create($hash);
DB/ResultSet/Marc.pm:    my $record = DB->resultset('Marc')->find({ permalink => $permalink });
DB/ResultSet/Marc.pm:	my $book = $record ? $record->book : undef;
DB/ResultSet/Marc.pm:		unless($bibinfo->differs($book->bibinfo)) {
DB/ResultSet/Marc.pm:#			$record->delete; #?
DB/ResultSet/Marc.pm:	$book = DB->resultset('Book')->find_by_bibinfo_or_create($bibinfo);
DB/ResultSet/Marc.pm:	$bibinfo->save_to_hash($hash);
DB/ResultSet/Marc.pm:	my $marc = eval { $pkg->find_or_create($hash,
DB/ResultSet/Marc.pm:	$marc = $pkg->find({ permalink => $permalink }) unless($marc);
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/ResultSet/.svn/tmp/tempfile.tmp:	my $recent = DB->resultset('Cover')->search({},
DB/ResultSet/.svn/tmp/tempfile.tmp:		{ order_by => { '-desc' => 'created' } });
DB/ResultSet/.svn/tmp/tempfile.tmp:			my $cover = $recent->next;
DB/ResultSet/.svn/tmp/tempfile.tmp:            push @{$rows[$r]->{cols}}, $cover->book;
DB/ResultSet/.svn/tmp/tempfile.tmp:	my @count = $pkg->search(checksum => $md5);
DB/ResultSet/.svn/tmp/tempfile.tmp:					$upload->batch."/".$upload->filename;
DB/ResultSet/.svn/tmp/tempfile.tmp:	return $pkg->create_from_file($book,$product,$filename);
DB/ResultSet/.svn/tmp/tempfile.tmp:	# my $book = $product->book;
DB/ResultSet/.svn/tmp/tempfile.tmp:	my($width,$height) = Obalky::Tools->image_size($file);
DB/ResultSet/.svn/tmp/tempfile.tmp:	# checksum - checksum originalu
DB/ResultSet/.svn/tmp/tempfile.tmp:    my $checksum = `md5sum $file | head -c 32`;
DB/ResultSet/.svn/tmp/tempfile.tmp:		my $fileblob_rs = DB->resultset('Fileblob');
DB/ResultSet/.svn/tmp/tempfile.tmp:		my $file_orig  = $fileblob_rs->new_from_file(
DB/ResultSet/.svn/tmp/tempfile.tmp:							"cover-orig", $file);
DB/ResultSet/.svn/tmp/tempfile.tmp:		my $file_cover = $fileblob_rs->new_from_file(
DB/ResultSet/.svn/tmp/tempfile.tmp:							"cover-medium","$dir/cover.jpg");
DB/ResultSet/.svn/tmp/tempfile.tmp:		my $file_thumb = $fileblob_rs->new_from_file(
DB/ResultSet/.svn/tmp/tempfile.tmp:							"cover-thumb","$dir/thumbnail.jpg");
DB/ResultSet/.svn/tmp/tempfile.tmp:		return eval { DB->resultset('Cover')->update_or_create({
DB/ResultSet/.svn/tmp/tempfile.tmp:    my($cw,$ch) = Obalky::Tools->resize($Obalky::Config::MEDIUM_WIDTH,
DB/ResultSet/.svn/tmp/tempfile.tmp:	my $tmp_file = "/tmp/cover-$$.jpg";
DB/ResultSet/.svn/tmp/tempfile.tmp:	system("convert", "-resize", $cw."x".$ch, $file, $tmp_file);
DB/ResultSet/.svn/tmp/tempfile.tmp:	my $fileblob_rs = DB->resultset('Fileblob');
DB/ResultSet/.svn/tmp/tempfile.tmp:	my $file_cover = $fileblob_rs->new_from_file("cover-medium",$tmp_file);
DB/ResultSet/.svn/tmp/tempfile.tmp:    my($tw,$th) = Obalky::Tools->resize(27,36,$width,$height);
DB/ResultSet/.svn/tmp/tempfile.tmp:	system("convert", "-resize", $tw."x".$th, $file, $tmp_file);
DB/ResultSet/.svn/tmp/tempfile.tmp:	my $file_thumb = $fileblob_rs->new_from_file("cover-thumb",$tmp_file);
DB/ResultSet/.svn/tmp/tempfile.tmp:	# original.jpg -- ukladat ho?
DB/ResultSet/.svn/tmp/tempfile.tmp:	my $file_orig  = $fileblob_rs->new_from_file("cover-orig", $file);
DB/ResultSet/.svn/tmp/tempfile.tmp:	my $cover = eval { DB->resultset('Cover')->update_or_create({
DB/ResultSet/.svn/text-base/Book.pm.svn-base:#__PACKAGE__->utf8_columns(qw/title authors/);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:    my $book = $pkg->find_by_bibinfo($bibinfo);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:	$book = $pkg->create({}) unless($book);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:	$book->authors($upload->authors) if($upload->authors);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:	$book->title($upload->title)     if($upload->title);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:	$book->year($upload->year)       if($upload->year);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:	$bibinfo->save_to($book);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:	my $object = DB->resultset('Cover')->upload($book,$upload);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:	$book->cover($object);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:	$book->update;
DB/ResultSet/.svn/text-base/Book.pm.svn-base:    my @books = DB->resultset('Book')->search(ean13 => 
DB/ResultSet/.svn/text-base/Book.pm.svn-base:					Obalky::BibInfo->isbn_to_ean13($isbn));
DB/ResultSet/.svn/text-base/Book.pm.svn-base:    my @books = DB->resultset('Book')->search(ean13 => $ean13);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:    push @books, DB->resultset('Book')->search(
DB/ResultSet/.svn/text-base/Book.pm.svn-base:        { ean13 => $id->{ean13} }) if($id->{ean13});
DB/ResultSet/.svn/text-base/Book.pm.svn-base:    push @books, DB->resultset('Book')->search(
DB/ResultSet/.svn/text-base/Book.pm.svn-base:        { oclc => $id->{oclc} }) if($id->{oclc});
DB/ResultSet/.svn/text-base/Book.pm.svn-base:    push @books, DB->resultset('Book')->search(
DB/ResultSet/.svn/text-base/Book.pm.svn-base:        { nbn => $id->{nbn} }) if($id->{nbn});
DB/ResultSet/.svn/text-base/Book.pm.svn-base:	my $book = $pkg->find_by_bibinfo($bibinfo);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:	$bibinfo->save_to_hash($hash);
DB/ResultSet/.svn/text-base/Book.pm.svn-base:	return $pkg->create($hash);
DB/ResultSet/.svn/text-base/Eshop.pm.svn-base:	foreach($pkg->all()) {
DB/ResultSet/.svn/text-base/Eshop.pm.svn-base:		$max = $_->id if($max < $_->id);
DB/ResultSet/.svn/text-base/Eshop.pm.svn-base:	my %eshops = Eshop->get_eshops;
DB/ResultSet/.svn/text-base/Eshop.pm.svn-base:		$pkg->find_or_create({ name => $info->{name} }, 
DB/ResultSet/.svn/text-base/Eshop.pm.svn-base:	return $pkg->find($name,{ key => 'eshop_name' });
DB/ResultSet/.svn/text-base/Eshop.pm.svn-base:	$pkg->sync_eshops;
DB/ResultSet/.svn/text-base/Eshop.pm.svn-base:	return $pkg->find_by_name('Upload'); 
DB/ResultSet/.svn/text-base/Library.pm.svn-base:	return DB->resultset('Library')->find({ code => $code });
DB/ResultSet/.svn/text-base/Library.pm.svn-base:sub find_none { shift->find_by_code('none') }
DB/ResultSet/.svn/text-base/Library.pm.svn-base:		my $url = $g_libraries{$_}->{url};
DB/ResultSet/.svn/text-base/Library.pm.svn-base:			return $g_libraries{$_}->{library};
DB/ResultSet/.svn/text-base/Library.pm.svn-base:	$pkg->load_libraries() if(not $g_lib_time or (time - $g_lib_time > 600));
DB/ResultSet/.svn/text-base/Library.pm.svn-base:	return $g_libraries{'obalky'}->{library} unless($referer);
DB/ResultSet/.svn/text-base/Library.pm.svn-base:	my $library = $pkg->do_search($pkg->normalize_url($referer));
DB/ResultSet/.svn/text-base/Library.pm.svn-base:#	return $library ? $library : $g_libraries{'obalky'}->{library};
DB/ResultSet/.svn/text-base/Library.pm.svn-base:	#warn "DB::Library -> loading libraries (time ".time.")\n";
DB/ResultSet/.svn/text-base/Library.pm.svn-base:	foreach($pkg->all) {
DB/ResultSet/.svn/text-base/Library.pm.svn-base:		$g_libraries{$_->code} = {
DB/ResultSet/.svn/text-base/Library.pm.svn-base:			url => $pkg->normalize_url($_->webopac),
DB/ResultSet/.svn/text-base/Work.pm.svn-base:	my $work = $pkg->create({});
DB/ResultSet/.svn/text-base/Work.pm.svn-base:	$_->assign_to_work($work) foreach(@books);
DB/ResultSet/.svn/text-base/User.pm.svn-base:	die "Neplatný e-mail '$email'.\n" unless $email =~ /\@.+\..+/;
DB/ResultSet/.svn/text-base/User.pm.svn-base:	my($user) = $pkg->search(login => $email);
DB/ResultSet/.svn/text-base/User.pm.svn-base:	my $email = $pkg->reset_decode($reset);
DB/ResultSet/.svn/text-base/User.pm.svn-base:	my $user = $pkg->find_by_email($email);
DB/ResultSet/.svn/text-base/User.pm.svn-base:	$user->update({ password => $pass1 });
DB/ResultSet/.svn/text-base/User.pm.svn-base:	my $today = DateTime->today()->ymd;
DB/ResultSet/.svn/text-base/User.pm.svn-base:	my $today = DateTime->today()->ymd;
DB/ResultSet/.svn/text-base/User.pm.svn-base:	die "Uživatel s e-mailovou adresou <a href=\"mailto:$email\">$email</a>".
DB/ResultSet/.svn/text-base/User.pm.svn-base:			" nebyl v systému nalezen.\n" unless $pkg->find_by_email($email);
DB/ResultSet/.svn/text-base/User.pm.svn-base:	my $reset = $pkg->reset_encode($email);
DB/ResultSet/.svn/text-base/User.pm.svn-base:	open(MUTT,"|mutt -b 'martin\@sarfy.cz' ".
DB/ResultSet/.svn/text-base/User.pm.svn-base:			"-s 'obalkyknih.cz -- vyresetovani hesla' '$email'");
DB/ResultSet/.svn/text-base/User.pm.svn-base:	my $login = $hash->{email};
DB/ResultSet/.svn/text-base/User.pm.svn-base:		if(not $hash->{fullname} or $hash->{fullname} !~ /\s/);
DB/ResultSet/.svn/text-base/User.pm.svn-base:	push @errors, "Neplatný e-mail '$login'.\n" 
DB/ResultSet/.svn/text-base/User.pm.svn-base:		unless(Obalky::Tools->valid_email($login));
DB/ResultSet/.svn/text-base/User.pm.svn-base:	push @errors, "Uživatel s e-mailem <a href=\"mailto:$login\">$login</a>".
DB/ResultSet/.svn/text-base/User.pm.svn-base:			" už v systému existuje."  if($pkg->find_by_email($login));
DB/ResultSet/.svn/text-base/User.pm.svn-base:	push @errors, "Není vyplněno heslo." unless($hash->{password1});
DB/ResultSet/.svn/text-base/User.pm.svn-base:		if($hash->{password1} ne $hash->{password2});
DB/ResultSet/.svn/text-base/User.pm.svn-base:	unless($hash->{xmlfeed} or $hash->{libcode}) {
DB/ResultSet/.svn/text-base/User.pm.svn-base:	my $libcode = $hash->{libcode};
DB/ResultSet/.svn/text-base/User.pm.svn-base:			unless($hash->{libname});
DB/ResultSet/.svn/text-base/User.pm.svn-base:		push @errors, "Není vyplněno město knihovny."  unless($hash->{libcity});
DB/ResultSet/.svn/text-base/User.pm.svn-base:		push @errors, "Není vyplňěna adresa knihovny." unless($hash->{libaddress});
DB/ResultSet/.svn/text-base/User.pm.svn-base:		my @lines = split(/\n/,$hash->{libaddress});
DB/ResultSet/.svn/text-base/User.pm.svn-base:		push @errors, "Není vyplňěn e-mail ředitele/vedoucího knihovny (".Dumper($hash).")."
DB/ResultSet/.svn/text-base/User.pm.svn-base:			unless(Obalky::Tools->valid_email($hash->{libemailboss}));
DB/ResultSet/.svn/text-base/User.pm.svn-base:		push @errors, "Není vyplňěn e-mail pro zasílání komerčních sdělení."
DB/ResultSet/.svn/text-base/User.pm.svn-base:			unless(Obalky::Tools->valid_email($hash->{libemailads}));
DB/ResultSet/.svn/text-base/User.pm.svn-base:			unless($hash->{libopac} =~ /^http\:\/\/.+\..+$/);
DB/ResultSet/.svn/text-base/User.pm.svn-base:			if($hash->{xmlfeed} and not $hash->{xmlfeed} =~ /^http\:\/\/.+\..+$/);
DB/ResultSet/.svn/text-base/User.pm.svn-base:		my $skipmember = ($hash->{libskipmember} and 
DB/ResultSet/.svn/text-base/User.pm.svn-base:				lc($hash->{libskipmember}) ne 'off');
DB/ResultSet/.svn/text-base/User.pm.svn-base:			my $libinfo = { code => $libcode, city => $hash->{libcity},
DB/ResultSet/.svn/text-base/User.pm.svn-base:				emailboss => $hash->{libemailboss}, address => $hash->{libaddress},
DB/ResultSet/.svn/text-base/User.pm.svn-base:				emailads => $hash->{libemailads}, skipmember => $skipmember };
DB/ResultSet/.svn/text-base/User.pm.svn-base:			$library = DB->resultset('Library')->find_by_code($libcode);
DB/ResultSet/.svn/text-base/User.pm.svn-base:				$library->update($libinfo);
DB/ResultSet/.svn/text-base/User.pm.svn-base:				$library = DB->resultset('Library')->create($libinfo);
DB/ResultSet/.svn/text-base/User.pm.svn-base:			eval { $user = $pkg->create({
DB/ResultSet/.svn/text-base/User.pm.svn-base:				login => $login, fullname => $hash->{fullname},
DB/ResultSet/.svn/text-base/User.pm.svn-base:				password => $hash->{password1},  library => $library,
DB/ResultSet/.svn/text-base/User.pm.svn-base:				xmlfeed_url => $hash->{xmlfeed}, logo_url => $hash->{logo_url}
DB/ResultSet/.svn/text-base/User.pm.svn-base:	foreach($pkg->all) {
DB/ResultSet/.svn/text-base/User.pm.svn-base:		push @feeds,$_->xmlfeed_url if($_->xmlfeed_url);
DB/ResultSet/.svn/text-base/Abuse.pm.svn-base:	if($book and $cover and $book->cover and 
DB/ResultSet/.svn/text-base/Abuse.pm.svn-base:		($book->cover->id eq $cover->id)) {
DB/ResultSet/.svn/text-base/Abuse.pm.svn-base:		$book->update({ cover => undef }); # zrus hned???
DB/ResultSet/.svn/text-base/Abuse.pm.svn-base:	my $abuse = $pkg->create({
DB/ResultSet/.svn/text-base/Cache.pm.svn-base:	return JSON->new->canonical(1)->encode($obj);
DB/ResultSet/.svn/text-base/Cache.pm.svn-base:	my($row) = $self->search({ "request" => $key });
DB/ResultSet/.svn/text-base/Cache.pm.svn-base:		# if($row->created);
DB/ResultSet/.svn/text-base/Cache.pm.svn-base:	return ($row->bookid,JSON->new->decode($row->response)); 
DB/ResultSet/.svn/text-base/Cache.pm.svn-base:	my $response = JSON->new->canonical(1)->encode($value);
DB/ResultSet/.svn/text-base/Cache.pm.svn-base:	$self->create({ request => $key, bookid => $bookid, response => $response });
DB/ResultSet/.svn/text-base/Cache.pm.svn-base:	$bookid = $bookid->id if(ref $bookid); # podporujem i tohle..
DB/ResultSet/.svn/text-base/Cache.pm.svn-base:	$self->search({ bookid => $bookid })->delete if($bookid);
DB/ResultSet/.svn/text-base/Visitor.pm.svn-base:		my $visitor = $pkg->find($visitor_id);
DB/ResultSet/.svn/text-base/Visitor.pm.svn-base:			$visitor->update({ last_ip => $ip, last_time => DateTime->now(),
DB/ResultSet/.svn/text-base/Visitor.pm.svn-base:							  count => $visitor->count + 1 });
DB/ResultSet/.svn/text-base/Visitor.pm.svn-base:	$library = DB->resultset('Library')->find_none unless($library);
DB/ResultSet/.svn/text-base/Visitor.pm.svn-base:	return $pkg->create({ library => $library, first_ip => $ip });
DB/ResultSet/.svn/text-base/Marc.pm.svn-base:    my $record = DB->resultset('Marc')->find({ permalink => $permalink });
DB/ResultSet/.svn/text-base/Marc.pm.svn-base:	my $book = $record ? $record->book : undef;
DB/ResultSet/.svn/text-base/Marc.pm.svn-base:		unless($bibinfo->differs($book->bibinfo)) {
DB/ResultSet/.svn/text-base/Marc.pm.svn-base:#			$record->delete; #?
DB/ResultSet/.svn/text-base/Marc.pm.svn-base:	$book = DB->resultset('Book')->find_by_bibinfo_or_create($bibinfo);
DB/ResultSet/.svn/text-base/Marc.pm.svn-base:	$bibinfo->save_to_hash($hash);
DB/ResultSet/.svn/text-base/Marc.pm.svn-base:	my $marc = eval { $pkg->find_or_create($hash,
DB/ResultSet/.svn/text-base/Marc.pm.svn-base:	$marc = $pkg->find({ permalink => $permalink }) unless($marc);
DB/ResultSet/.svn/text-base/Fileblob.pm.svn-base:	return $pkg->create( { medium => $medium, content => $content });
DB/ResultSet/.svn/text-base/Review.pm.svn-base:	#$pkg->search({ visitor_ip => { "!=" => undef } });
DB/ResultSet/.svn/text-base/Review.pm.svn-base:	$pkg->search({ -and => [
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	my $type = __PACKAGE__->filetype($name);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:    if($info->{file} and $info->{url}) {
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	$api->write("url: ".$info->{url}."\n") if($api);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	unless(-d "/tmp/.obalky") {
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	my $batch = MD5->hexhash($$."-".$info->{login}.
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:					"-".(int(rand(1000000))+1)."-".time);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	#my @all = __PACKAGE__->retrieve_all; 
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	#my $batch = MD5->hexhash($$."-".$login."-".(scalar(@all)+1));
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:#	die "Interní chyba: dávka $batch už existuje" if(-d $original);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	system("rm -rf '$upload'"); # shouldn't happen
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	if($info->{url}) {
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		my $url = $info->{url};
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$api->write("wget -O '$original/$filename'\n") if($api);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		system("wget","-q",$url,"-O",$original."/".$filename);# == 0
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:				unless(-s $original."/".$filename);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		my $file = $info->{file};
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$filename = $file->basename;
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		copy($file->tempname,$original."/".$filename) 
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	$api->write(`ls -lh '$original/$filename'\n`) if($api);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	my $filetype = __PACKAGE__->filetype($original."/".$filename);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		system("unzip -qq '$original/$filename' -d '$upload' >/dev/null");
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		system("tar xf '$original/$filename' -C '$upload' >/dev/null");
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	# unlink($prefix."-".$filename); # original si nechame!
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	$api->write("uploaded ".scalar(@g_upload_images)." files\n") if($api);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		if(__PACKAGE__->process($api,$batch,$upload,$id,$info,$_)) {
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:			# $list{$ean13} = $cover->id if($api);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	die "Chybný importní soubor -- nebyly nalezeny žádné správně ".
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		system("rm -rf '$upload' '$original'") if($api);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:#		$api->write("ean13 $_ inserted as cover ".$list{$_}."\n") 
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$api->write("processed $count covers.\n");
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	my $type = __PACKAGE__->filetype($filepath);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	$bibinfo = Obalky::BibInfo->new_from_string($file_id) 
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	my $user = DB->resultset('User')->find_by_email($info->{login});
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	my $upload = DB->resultset('Upload')->create({
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		origname => $filename, 	orig_url => $info->{orig_url},
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	$upload->orig_url($info->{url}) unless($info->{orig_url});
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	$bibinfo->save_to($upload);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	my $md5 = `md5sum $filepath | head -c 32`;
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	$upload->checksum($md5);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	$upload->update;
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	if($api and DB->resultset('Cover')->has_same_cover($bibinfo,$md5)) {
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$api->write("Cover already in database, ignoring..\n");
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:#		$conn->option(preferredRecordSyntax => "usmarc");
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:#		my $rs = $conn->search_pqf('@attr 1=7 '.$isbn);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:#		my $rec = $rs->record(0);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:#			my $raw = $rec->raw();
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:#			$upload->title($marc->title());
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:#			$upload->author($marc->author());
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:#			$upload->year($marc->publication_date());
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:#		print "Error ", $@->code(), ": ", $@->message(), "\n";
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	# yaz-client aleph.muni.cz:9991/mub01
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	# yaz-client z3950.loc.gov:7090/voyager
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		eval { ($book,$object) = DB->resultset('Book')->upload($upload) };
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$book->invalidate;
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$api->write("error: $@\n") if($@);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$api->write("SUCCESS: ".$upload->to_isbn." -> BOOK ".
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:			$book->id.", OBJECT ".$object->id."\n") unless($@);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	return $pkg->search(batch => $batch);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		my $hash = $list->{$_};
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:        next if(not $hash->{check} or $hash->{check} ne 'on');
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		my $upload = DB->resultset('Upload')->find($hash->{id});
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$upload->authors($hash->{authors}) if($hash->{authors});
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$upload->title($hash->{title})     if($hash->{title});
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$upload->year($hash->{year})       if($hash->{year});
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$upload->update;
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		my $bibinfo = Obalky::BibInfo->new($upload);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		my $media = Obalky::Media->new_from_info({
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:						cover_url => $upload->cover_url, 
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:						cover_tmpfile => $upload->cover_tmpfile });
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		# pridej do Upload e-shopu product, mozna vypropaguje obalku do book
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		my $upload_eshop = DB->resultset('Eshop')->get_upload_eshop;
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		my $product_url = $Obalky::Config::WWW_URL."/view?".$bibinfo->to_some_param;
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		my $product = $upload_eshop->add_product($bibinfo,$media,$product_url);
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:		$upload->update({ product => $product });
DB/ResultSet/.svn/text-base/Upload.pm.svn-base:	system("rm -rf ".$Obalky::Config::WWW_DIR."/upload/".$batch) if($batch);
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	my $recent = DB->resultset('Cover')->search({},
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:		{ order_by => { '-desc' => 'created' } });
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:			my $cover = $recent->next;
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:            push @{$rows[$r]->{cols}}, $cover->book;
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	my @count = $pkg->search(checksum => $md5);
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:					$upload->batch."/".$upload->filename;
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	return $pkg->create_from_file($book,$product,$filename);
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	# my $book = $product->book;
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	my($width,$height) = Obalky::Tools->image_size($file);
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	# checksum - checksum originalu
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:    my $checksum = `md5sum $file | head -c 32`;
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:		my $fileblob_rs = DB->resultset('Fileblob');
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:		my $file_orig  = $fileblob_rs->new_from_file(
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:							"cover-orig", $file);
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:		my $file_cover = $fileblob_rs->new_from_file(
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:							"cover-medium","$dir/cover.jpg");
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:		my $file_thumb = $fileblob_rs->new_from_file(
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:							"cover-thumb","$dir/thumbnail.jpg");
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:		return eval { DB->resultset('Cover')->update_or_create({
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:    my($cw,$ch) = Obalky::Tools->resize($Obalky::Config::MEDIUM_WIDTH,
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	my $tmp_file = "/tmp/cover-$$.jpg";
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	system("convert", "-resize", $cw."x".$ch, $file, $tmp_file);
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	my $fileblob_rs = DB->resultset('Fileblob');
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	my $file_cover = $fileblob_rs->new_from_file("cover-medium",$tmp_file);
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:    my($tw,$th) = Obalky::Tools->resize(27,36,$width,$height);
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	system("convert", "-resize", $tw."x".$th, $file, $tmp_file);
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	my $file_thumb = $fileblob_rs->new_from_file("cover-thumb",$tmp_file);
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	# original.jpg -- ukladat ho?
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	my $file_orig  = $fileblob_rs->new_from_file("cover-orig", $file);
DB/ResultSet/.svn/text-base/Cover.pm.svn-base:	my $cover = eval { DB->resultset('Cover')->update_or_create({
DB/ResultSet/.svn/text-base/Request.pm.svn-base:# #request -- adept na zruseni
DB/ResultSet/.svn/text-base/Request.pm.svn-base:	return $pkg->create($hash);
DB/ResultSet/.svn/text-base/Request.pm.svn-base:	$req->update;
DB/ResultSet/.svn/entries:2011-10-12T15:48:26.758104Z
DB/ResultSet/.svn/entries:svn:special svn:externals svn:needs-lock
DB/ResultSet/.svn/entries:49789afe-7772-4492-8243-1a4b1d9f4dda
DB/ResultSet/.svn/entries:2010-02-21T23:39:55.000000Z
DB/ResultSet/.svn/entries:2010-11-03T10:01:16.742646Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2011-10-27T11:05:53.000000Z
DB/ResultSet/.svn/entries:2011-11-15T11:31:59.829461Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2009-10-08T11:20:58.000000Z
DB/ResultSet/.svn/entries:2009-10-08T12:29:57.257222Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2009-10-10T20:47:25.000000Z
DB/ResultSet/.svn/entries:2009-10-10T20:48:10.772998Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2011-10-07T09:32:09.000000Z
DB/ResultSet/.svn/entries:2009-10-14T12:41:27.580245Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2009-10-08T11:21:22.000000Z
DB/ResultSet/.svn/entries:2009-10-08T12:29:57.257222Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2009-12-06T22:47:35.000000Z
DB/ResultSet/.svn/entries:2009-12-03T06:05:24.327653Z
DB/ResultSet/.svn/entries:2010-02-21T23:29:12.000000Z
DB/ResultSet/.svn/entries:2010-11-03T10:01:16.742646Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2011-10-12T16:10:59.000000Z
DB/ResultSet/.svn/entries:2011-10-12T16:13:50.979293Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2010-02-04T13:53:22.000000Z
DB/ResultSet/.svn/entries:2010-02-04T13:50:23.860428Z
DB/ResultSet/.svn/entries:2009-10-08T11:21:30.000000Z
DB/ResultSet/.svn/entries:2009-10-08T12:29:57.257222Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2009-12-06T22:47:35.000000Z
DB/ResultSet/.svn/entries:2009-12-03T06:05:24.327653Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2010-01-27T10:24:12.000000Z
DB/ResultSet/.svn/entries:2009-12-03T06:05:24.327653Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2011-06-21T21:03:44.000000Z
DB/ResultSet/.svn/entries:2011-06-22T19:35:35.405441Z
DB/ResultSet/.svn/entries:has-props
DB/ResultSet/.svn/entries:2011-10-12T14:17:03.000000Z
DB/ResultSet/.svn/entries:2011-10-12T15:53:43.030645Z
DB/ResultSet/.svn/entries:2011-10-12T16:05:27.000000Z
DB/ResultSet/.svn/entries:2011-10-12T16:13:50.979293Z
DB/Result/Library.pm:__PACKAGE__->inflate_column( 'created' => {
DB/Result/Library.pm:    inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/Library.pm:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/Cache.pm:__PACKAGE__->inflate_column( 'created' => {
DB/Result/Cache.pm:	inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/Cache.pm:	deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/Cover.pm:__PACKAGE__->inflate_column( 'created' => {
DB/Result/Cover.pm:	inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/Cover.pm:	deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/Cover.pm:sub is_generic { shift->id < 1_000_000 ? 1 : 0 }
DB/Result/Cover.pm:	my($ow,$oh) = ($cover->orig_width,$cover->orig_height);
DB/Result/Cover.pm:    my($cw,$ch) = Obalky::Tools->resize(180,240,$ow,$oh);
DB/Result/Cover.pm:	my($tw,$th) = Obalky::Tools->resize(27,36,$ow,$oh);
DB/Result/Cover.pm:		id => $cover->id,
DB/Result/Cover.pm:		thumbnail_url => $cover->get_thumbnail_url($secure),
DB/Result/Cover.pm:		cover_url => $cover->get_cover_url($secure),
DB/Result/Cover.pm:		backlink_url => $cover->book->get_obalkyknih_url($secure),
DB/Result/Cover.pm:	return "/file/cover/".$cover->id."/".$method;
DB/Result/Cover.pm:	return Obalky::Config->url($secure).$cover->get_relative_url($method);
DB/Result/Cover.pm:    $cover->get_absolute_url('medium',$secure) 
DB/Result/Cover.pm:    $cover->get_absolute_url('thumbnail',$secure) 
DB/Result/Cover.pm:	my $blob = $method eq 'medium' ? $cover->file_medium : 
DB/Result/Cover.pm:			   $method eq 'orig' ? $cover->file_orig : $cover->file_thumb;
DB/Result/Cover.pm:	return $blob ? ("image/jpeg", $blob->content, "jpeg") : ();
DB/Result/User.pm:__PACKAGE__->inflate_column( 'created' => {
DB/Result/User.pm:    inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/User.pm:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/User.pm:	die "Neplatný e-mail '$email'.\n" unless $email =~ /\@.+\..+/;
DB/Result/User.pm:	my($user) = $pkg->search(login => $email);
DB/Result/User.pm:	die "Uživatel s e-mailovou adresou <a href=\"mailto:$email\">$email</a>".
DB/Result/User.pm:			" nebyl v systému nalezen.\n" unless $pkg->find_by_email($email);
DB/Result/User.pm:	# FIX: send e-mail
DB/Result/User.pm:	open(MUTT,"| mutt -s 'obalkyknih.cz -- vyresetovani hesla' '$email'");
DB/Result/User.pm:	my $login = $hash->{email};
DB/Result/User.pm:		if(not $hash->{fullname} or $hash->{fullname} !~ /\s/);
DB/Result/User.pm:	push @errors, "Neplatný e-mail '$login'.\n" unless $login =~ /\@.+\..+/;
DB/Result/User.pm:	push @errors, "Uživatel s e-mailem <a href=\"mailto:$login\">$login</a>".
DB/Result/User.pm:			" už v systému existuje."  if($pkg->find($login));
DB/Result/User.pm:	push @errors, "Není vyplněno heslo." unless($hash->{password1});
DB/Result/User.pm:		if($hash->{password1} ne $hash->{password2});
DB/Result/User.pm:	my $libcode = $hash->{libcode};
DB/Result/User.pm:		unless($hash->{libname});
DB/Result/User.pm:		unless($hash->{libopac} =~ /^http\:\/\/.+\..+$/);
DB/Result/User.pm:		my $library = DB->resultset('Library')->find($libcode);
DB/Result/User.pm:		$library = DB->resultset('Library')->create(
DB/Result/User.pm:			$library->name($hash->{libname});
DB/Result/User.pm:			$library->webopac($hash->{libopac});
DB/Result/User.pm:			$library->update;
DB/Result/User.pm:			eval { $user = $pkg->create({
DB/Result/User.pm:				login => $login, fullname => $hash->{fullname},
DB/Result/User.pm:				password => $hash->{password1}, library => $library
DB/Result/Toc.pm:	$toc->update({ pdf_url => $url, pdf_file => $content });
DB/Result/Toc.pm:	$toc->make_thumbnail($tmpfile);
DB/Result/Toc.pm:	my $text = $toc->full_text;
DB/Result/Toc.pm:	unless($toc->product) {
DB/Result/Toc.pm:		warn $toc->id." no product\n";
DB/Result/Toc.pm:#	my $book = $toc->book;
DB/Result/Toc.pm:	my $book = $toc->product->book;
DB/Result/Toc.pm:		warn $toc->id." no book ".$toc->book."\n";
DB/Result/Toc.pm:	my $bibinfo = Obalky::BibInfo->new($book);
DB/Result/Toc.pm:	return "\t<book>\n".$bibinfo->to_xml.
DB/Result/Toc.pm:			"\t\t<toc>".HTML::Tiny->entity_encode($text).
DB/Result/Toc.pm:	my $max_height = $Obalky::Config::MEDIUM_HEIGHT-4; # 236
DB/Result/Toc.pm:	my $max_width  = $Obalky::Config::MEDIUM_WIDTH-4;  # 166
DB/Result/Toc.pm:	my $obsah0 = "/tmp/.obsah-$$-0.png";
DB/Result/Toc.pm:	my $obsah1 = "/tmp/.obsah-$$-1.png";
DB/Result/Toc.pm:	system("convert ".$pdf."[0] -resize x".$max_height." $obsah0");
DB/Result/Toc.pm:	system("convert ".$pdf."[0] -resize ".$max_width."x $obsah1");
DB/Result/Toc.pm:	my($w0,$h0) = Obalky::Tools->image_size($obsah0);
DB/Result/Toc.pm:	my($w1,$h1) = Obalky::Tools->image_size($obsah1);
DB/Result/Toc.pm:	my $xoff = 1+int(($max_width-$wN)/2);
DB/Result/Toc.pm:	my $yoff = 1+int(($max_height-$hN)/2);
DB/Result/Toc.pm:	my $result = "/tmp/.toc-$$-result.png";
DB/Result/Toc.pm:	system("composite -compose atop -geometry +$xoff+$yoff $obsahN ".
DB/Result/Toc.pm:		warn $toc->id.": Failed to thumbnail TOC from $pdf\n";
DB/Result/Toc.pm:	$toc->update({ pdf_thumbnail => Obalky::Tools->slurp($result) })
DB/Result/Toc.pm:		if(-f $result);
DB/Result/Toc.pm:    return "/file/toc/".$toc->id."/".$method;
DB/Result/Toc.pm:    return Obalky::Config->url($secure).$toc->get_relative_url($method);
DB/Result/Toc.pm:    shift->get_absolute_url('pdf',$secure) 
DB/Result/Toc.pm:       shift->get_absolute_url('thumbnail',$secure) 
DB/Result/Toc.pm:    shift->get_absolute_url('text',$secure) 
DB/Result/Toc.pm:	return ("image/png",$toc->pdf_thumbnail,"jpeg") if($method eq 'thumbnail');
DB/Result/Toc.pm:	return ("image/pdf",$toc->pdf_file,"pdf")       if($method eq 'pdf');
DB/Result/Toc.pm:	return ("text/plain",$toc->full_text,"txt")     if($method eq 'text');
DB/Result/Upload.pm:	return $Obalky::Config::WWW_URL.$upload->file_url;
DB/Result/Upload.pm:	return $Obalky::Config::WWW_DIR.$upload->file_url;
DB/Result/Upload.pm:	return "/upload/".$upload->batch."/".$upload->filename;
DB/Result/Upload.pm:#	return 0 unless($upload->isbn);
DB/Result/Upload.pm:#	return 0 unless($upload->check_isbn_format($upload->isbn));
DB/Result/Upload.pm:#	return 0 if($upload->check_duplicit_isbn);
DB/Result/Upload.pm:	return 0 if($upload->check_duplicit_file);
DB/Result/Upload.pm:	return $upload->{cache_isbn} if(defined $upload->{cache_isbn});
DB/Result/Upload.pm:	my @books = DB->resultset('Book')->find_by_ean13($upload->ean13);
DB/Result/Upload.pm:	return $upload->{cache_isbn} = join(" ",map $_->to_isbn, @books);
DB/Result/Upload.pm:	return $upload->{cache_file} if(defined $upload->{cache_file});
DB/Result/Upload.pm:	my @objects = DB->resultset('Cover')->search(
DB/Result/Upload.pm:					checksum => $upload->checksum);
DB/Result/Upload.pm:	return $upload->{cache_file} = join(" ",map $_->id, @objects);
DB/Result/Upload.pm:	my $bibinfo = Obalky::BibInfo->new($upload); # ???
DB/Result/Upload.pm:	return "/upload/".$upload->batch."/".$upload->filename;
DB/Result/Upload.pm:	my $bibinfo = Obalky::BibInfo->new($upload);
DB/Result/Upload.pm:	return $bibinfo->to_isbn;
DB/Result/Eshop.pm:sub factory { Eshop->get_eshop(shift->name) }
DB/Result/Eshop.pm:	my $book = DB->resultset('Book')->find_by_bibinfo_or_create($bibinfo);
DB/Result/Eshop.pm:	$bibinfo->save_to($book); # aktualizuj dle produktu -- jen docasne pro opravu TOC!
DB/Result/Eshop.pm:	my $product = DB->resultset('Product')->find($product_url, 
DB/Result/Eshop.pm:	$product = DB->resultset('Product')->find_or_create(
DB/Result/Eshop.pm:	$product->update({ modified => DateTime->now() });
DB/Result/Eshop.pm:	$bibinfo->save_to($product);
DB/Result/Eshop.pm:	$media->save_to($product);
DB/Result/Eshop.pm:	my $book_bibinfo = $book->bibinfo;
DB/Result/Eshop.pm:	$book_bibinfo->save_to($book) if($book_bibinfo->merge($bibinfo));
DB/Result/Eshop.pm:	# podle media zaktualizovat book!!! book->prepocitej_media..
DB/Result/Eshop.pm:	$book->actualize_by_product($product);
DB/Result/Work.pm:	foreach my $book ($work->books) {
DB/Result/Work.pm:		return $book->cover if($book->cover);
DB/Result/Work.pm:	foreach my $book ($work->books) {
DB/Result/Work.pm:		return $book->toc if($book->toc);
DB/Result/Review.pm:__PACKAGE__->inflate_column( 'created' => {
DB/Result/Review.pm:	inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/Review.pm:	deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/Review.pm:	my $ip = $review->visitor_ip;
DB/Result/Review.pm:	return unless($review->html_text);
DB/Result/Review.pm:#		visitor_ip => $review->visitor_blurred_ip,
DB/Result/Review.pm:#		visitor_name => $review->visitor_name,
DB/Result/Review.pm:		impact => $review->impact,	
DB/Result/Review.pm:		html_text => $review->html_text,
DB/Result/Review.pm:		rating => $review->rating,
DB/Result/Visitor.pm:__PACKAGE__->inflate_column( 'first_time' => {
DB/Result/Visitor.pm:	inflate => sub { DateTime::Format::MySQL->parse_datetime(shift); },
DB/Result/Visitor.pm:	deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/Visitor.pm:__PACKAGE__->inflate_column( 'last_time' => {
DB/Result/Visitor.pm:	inflate => sub { DateTime::Format::MySQL->parse_datetime(shift); },
DB/Result/Visitor.pm:	deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/Visitor.pm:	my $ip = $visitor->last_ip;
DB/Result/Book.pm:#__PACKAGE__->utf8_columns(qw/title authors/);
DB/Result/Book.pm:__PACKAGE__->inflate_column( 'created' => {
DB/Result/Book.pm:    inflate => sub { DateTime::Format::MySQL->parse_datetime(shift); },
DB/Result/Book.pm:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/Book.pm:__PACKAGE__->inflate_column( 'harvest_last_time' => {
DB/Result/Book.pm:    inflate => sub { DateTime::Format::MySQL->parse_datetime(shift); },
DB/Result/Book.pm:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/Book.pm:	foreach my $product ($book->products) {
DB/Result/Book.pm:		my $factory = $product->eshop->factory;
DB/Result/Book.pm:		push @displayable, $product if($factory->{display});
DB/Result/Book.pm:    return $id->to_string;
DB/Result/Book.pm:    return $book->bibinfo->to_isbn;
DB/Result/Book.pm:	my $cover = $book->cover;
DB/Result/Book.pm:	my $work = $book->work;
DB/Result/Book.pm:	return $work->get_cover; 
DB/Result/Book.pm:	my $toc = $book->toc;
DB/Result/Book.pm:	my $work = $book->work;
DB/Result/Book.pm:	return $work->get_toc; 
DB/Result/Book.pm:	my $work = $book->work;
DB/Result/Book.pm:	# $work->
DB/Result/Book.pm:	return $work ? $work->books : ($book);
DB/Result/Book.pm:	foreach($book->reviews) { # WHERE rating NOT NULL ?
DB/Result/Book.pm:		$best = $_ if($_->impact eq $Obalky::Media::REVIEW_ANNOTATION);
DB/Result/Book.pm:		$best = $_ if($_->impact eq $Obalky::Media::REVIEW_REVIEW 
DB/Result/Book.pm:	$book->update({ review => $best });
DB/Result/Book.pm:	# $book->invalidate(); # musi volat volajici!
DB/Result/Book.pm:	DB->resultset('Cache')->invalidate($book);
DB/Result/Book.pm:	foreach($book->reviews) { # WHERE rating NOT NULL ?
DB/Result/Book.pm:		if(defined $_->rating) {
DB/Result/Book.pm:			if($_->product) { $ers += $_->rating; $erc++ }
DB/Result/Book.pm:					   else { $rs  += $_->rating; $rc++ }
DB/Result/Book.pm:	$book->update({ cached_rating_sum => $rs, cached_rating_count => $rc });
DB/Result/Book.pm:	# $book->invalidate(); # musi volat volajici!
DB/Result/Book.pm:	my @books = $book->work_books; # pres vsechna dila..
DB/Result/Book.pm:		$rs += $_->cached_rating_sum || 0;
DB/Result/Book.pm:		$rc += $_->cached_rating_count || 0;
DB/Result/Book.pm:	my($rs,$rc) = $book->get_rating;
DB/Result/Book.pm:	my($rs,$rc) = $book->get_rating;
DB/Result/Book.pm:	my($rs,$rc) = $book->get_rating;
DB/Result/Book.pm:	return sprintf("%1.1f",$book->get_rating_avg100/20);
DB/Result/Book.pm:	my $bibinfo = $book->bibinfo;
DB/Result/Book.pm:	return $bibinfo ? $bibinfo->get_obalkyknih_url($secure) : undef;
DB/Result/Book.pm:	$book->update({ cover => $product->cover })   if($product->cover);
DB/Result/Book.pm:	$book->update({ toc => $product->toc })       if($product->toc);
DB/Result/Book.pm:#	$book->update({ review => $product->review }) if($product->review);
DB/Result/Book.pm:	$book->recalc_rating;
DB/Result/Book.pm:	$book->invalidate();
DB/Result/Book.pm:#	$book->update({ external_sum => $product->review }) if($product->review);
DB/Result/Book.pm:	$book->update({ work => $work });
DB/Result/Book.pm:	$book->recalc_rating;
DB/Result/Book.pm:	$book->invalidate();
DB/Result/Book.pm:    my $review = DB->resultset('Review')->create({
DB/Result/Book.pm:			book => $book, rating => $info->{rating},
DB/Result/Book.pm:			visitor_name => $info->{visitor_name}, 
DB/Result/Book.pm:			visitor_ip => $info->{visitor_ip}, 
DB/Result/Book.pm:			html_text => $info->{html_text},
DB/Result/Book.pm:			impact => $info->{impact},
DB/Result/Book.pm:	$visitor->update({ name => $info->{name} }) if($info->{name});
DB/Result/Book.pm:	$book->recalc_rating;
DB/Result/Book.pm:	$book->recalc_review;
DB/Result/Book.pm:	$book->invalidate;
DB/Result/Book.pm:# --------------------------------------------------------------
DB/Result/Book.pm:	my $book_bibinfo = $book->bibinfo;
DB/Result/Book.pm:	if($book_bibinfo->merge($bibinfo)) {
DB/Result/Book.pm:		$book_bibinfo->save_to($book);
DB/Result/Book.pm:		$book->invalidate;
DB/Result/Book.pm:#	$bibinfo->save_to($book);
DB/Result/Book.pm:	my $cover = $book->get_cover; # pripadne najde work->cover
DB/Result/Book.pm:	# $this->{cover} = { url, width, height, [data (ie7+)?] }
DB/Result/Book.pm:	# $this->{thumbnail} = { url, width, height }
DB/Result/Book.pm:	# $this->{generic_thumbnail} = { url, width, height }
DB/Result/Book.pm:	#   DB->resultset('Cover')->find_generic($library,$format) unless($cover);
DB/Result/Book.pm:		$info->{cover_thumbnail_url} = $cover->get_thumbnail_url($secure);
DB/Result/Book.pm:		$info->{cover_medium_url}    = $cover->get_cover_url($secure);
DB/Result/Book.pm:	my $toc = $book->get_toc; # pripadne najde work->cover
DB/Result/Book.pm:		$info->{toc_pdf_url}       = $toc->get_pdf_url($secure);
DB/Result/Book.pm:		$info->{toc_thumbnail_url} = $toc->get_thumbnail_url($secure);
DB/Result/Book.pm:		$info->{toc_text_url}      = $toc->get_text_url($secure);
DB/Result/Book.pm:		$info->{backlink_url}  = $book->get_obalkyknih_url($secure);
DB/Result/Book.pm:	my($r_sum,$r_count) = $book->get_rating;
DB/Result/Book.pm:	$info->{rating_sum}   = $r_sum;
DB/Result/Book.pm:	$info->{rating_count} = $r_count;
DB/Result/Book.pm:		$info->{rating_avg100} = $avg;
DB/Result/Book.pm:		$info->{rating_avg5} = ($avg % 20) ?
DB/Result/Book.pm:		$info->{rating_url} = Obalky::Config->url($secure).
DB/Result/Book.pm:	$info->{reviews} = [];
DB/Result/Book.pm:#	foreach($book->reviews) {
DB/Result/Book.pm:#		my $review = $_->to_info;
DB/Result/Book.pm:#		push @{$info->{reviews}}, $review if($review);
DB/Result/Product.pm:__PACKAGE__->inflate_column( 'created' => {
DB/Result/Product.pm:    inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift); } },
DB/Result/Product.pm:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/Product.pm:__PACKAGE__->inflate_column( 'modified' => {
DB/Result/Product.pm:    inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift); } },
DB/Result/Product.pm:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/Product.pm:sub media { Obalky::Media->new(shift) }
DB/Result/Product.pm:sub price_human { shift->media->price_human }
DB/Result/Marc.pm:__PACKAGE__->inflate_column( 'created' => {
DB/Result/Marc.pm:    inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/Marc.pm:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/Marc.pm:    return Obalky::Tools->fix_permalink($book->permalink);
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/Result/.svn/text-base/Product.pm.svn-base:__PACKAGE__->inflate_column( 'created' => {
DB/Result/.svn/text-base/Product.pm.svn-base:    inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift); } },
DB/Result/.svn/text-base/Product.pm.svn-base:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/Product.pm.svn-base:__PACKAGE__->inflate_column( 'modified' => {
DB/Result/.svn/text-base/Product.pm.svn-base:    inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift); } },
DB/Result/.svn/text-base/Product.pm.svn-base:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/Product.pm.svn-base:sub media { Obalky::Media->new(shift) }
DB/Result/.svn/text-base/Product.pm.svn-base:sub price_human { shift->media->price_human }
DB/Result/.svn/text-base/Book.pm.svn-base:#__PACKAGE__->utf8_columns(qw/title authors/);
DB/Result/.svn/text-base/Book.pm.svn-base:__PACKAGE__->inflate_column( 'created' => {
DB/Result/.svn/text-base/Book.pm.svn-base:    inflate => sub { DateTime::Format::MySQL->parse_datetime(shift); },
DB/Result/.svn/text-base/Book.pm.svn-base:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/Book.pm.svn-base:__PACKAGE__->inflate_column( 'harvest_last_time' => {
DB/Result/.svn/text-base/Book.pm.svn-base:    inflate => sub { DateTime::Format::MySQL->parse_datetime(shift); },
DB/Result/.svn/text-base/Book.pm.svn-base:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/Book.pm.svn-base:	foreach my $product ($book->products) {
DB/Result/.svn/text-base/Book.pm.svn-base:		my $factory = $product->eshop->factory;
DB/Result/.svn/text-base/Book.pm.svn-base:		push @displayable, $product if($factory->{display});
DB/Result/.svn/text-base/Book.pm.svn-base:    return $id->to_string;
DB/Result/.svn/text-base/Book.pm.svn-base:    return $book->bibinfo->to_isbn;
DB/Result/.svn/text-base/Book.pm.svn-base:	my $cover = $book->cover;
DB/Result/.svn/text-base/Book.pm.svn-base:	my $work = $book->work;
DB/Result/.svn/text-base/Book.pm.svn-base:	return $work->get_cover; 
DB/Result/.svn/text-base/Book.pm.svn-base:	my $toc = $book->toc;
DB/Result/.svn/text-base/Book.pm.svn-base:	my $work = $book->work;
DB/Result/.svn/text-base/Book.pm.svn-base:	return $work->get_toc; 
DB/Result/.svn/text-base/Book.pm.svn-base:	my $work = $book->work;
DB/Result/.svn/text-base/Book.pm.svn-base:	# $work->
DB/Result/.svn/text-base/Book.pm.svn-base:	return $work ? $work->books : ($book);
DB/Result/.svn/text-base/Book.pm.svn-base:	foreach($book->reviews) { # WHERE rating NOT NULL ?
DB/Result/.svn/text-base/Book.pm.svn-base:		$best = $_ if($_->impact eq $Obalky::Media::REVIEW_ANNOTATION);
DB/Result/.svn/text-base/Book.pm.svn-base:		$best = $_ if($_->impact eq $Obalky::Media::REVIEW_REVIEW 
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->update({ review => $best });
DB/Result/.svn/text-base/Book.pm.svn-base:	# $book->invalidate(); # musi volat volajici!
DB/Result/.svn/text-base/Book.pm.svn-base:	DB->resultset('Cache')->invalidate($book);
DB/Result/.svn/text-base/Book.pm.svn-base:	foreach($book->reviews) { # WHERE rating NOT NULL ?
DB/Result/.svn/text-base/Book.pm.svn-base:		if(defined $_->rating) {
DB/Result/.svn/text-base/Book.pm.svn-base:			if($_->product) { $ers += $_->rating; $erc++ }
DB/Result/.svn/text-base/Book.pm.svn-base:					   else { $rs  += $_->rating; $rc++ }
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->update({ cached_rating_sum => $rs, cached_rating_count => $rc });
DB/Result/.svn/text-base/Book.pm.svn-base:	# $book->invalidate(); # musi volat volajici!
DB/Result/.svn/text-base/Book.pm.svn-base:	my @books = $book->work_books; # pres vsechna dila..
DB/Result/.svn/text-base/Book.pm.svn-base:		$rs += $_->cached_rating_sum || 0;
DB/Result/.svn/text-base/Book.pm.svn-base:		$rc += $_->cached_rating_count || 0;
DB/Result/.svn/text-base/Book.pm.svn-base:	my($rs,$rc) = $book->get_rating;
DB/Result/.svn/text-base/Book.pm.svn-base:	my($rs,$rc) = $book->get_rating;
DB/Result/.svn/text-base/Book.pm.svn-base:	my($rs,$rc) = $book->get_rating;
DB/Result/.svn/text-base/Book.pm.svn-base:	return sprintf("%1.1f",$book->get_rating_avg100/20);
DB/Result/.svn/text-base/Book.pm.svn-base:	my $bibinfo = $book->bibinfo;
DB/Result/.svn/text-base/Book.pm.svn-base:	return $bibinfo ? $bibinfo->get_obalkyknih_url($secure) : undef;
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->update({ cover => $product->cover })   if($product->cover);
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->update({ toc => $product->toc })       if($product->toc);
DB/Result/.svn/text-base/Book.pm.svn-base:#	$book->update({ review => $product->review }) if($product->review);
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->recalc_rating;
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->invalidate();
DB/Result/.svn/text-base/Book.pm.svn-base:#	$book->update({ external_sum => $product->review }) if($product->review);
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->update({ work => $work });
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->recalc_rating;
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->invalidate();
DB/Result/.svn/text-base/Book.pm.svn-base:    my $review = DB->resultset('Review')->create({
DB/Result/.svn/text-base/Book.pm.svn-base:			book => $book, rating => $info->{rating},
DB/Result/.svn/text-base/Book.pm.svn-base:			visitor_name => $info->{visitor_name}, 
DB/Result/.svn/text-base/Book.pm.svn-base:			visitor_ip => $info->{visitor_ip}, 
DB/Result/.svn/text-base/Book.pm.svn-base:			html_text => $info->{html_text},
DB/Result/.svn/text-base/Book.pm.svn-base:			impact => $info->{impact},
DB/Result/.svn/text-base/Book.pm.svn-base:	$visitor->update({ name => $info->{name} }) if($info->{name});
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->recalc_rating;
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->recalc_review;
DB/Result/.svn/text-base/Book.pm.svn-base:	$book->invalidate;
DB/Result/.svn/text-base/Book.pm.svn-base:# --------------------------------------------------------------
DB/Result/.svn/text-base/Book.pm.svn-base:	my $book_bibinfo = $book->bibinfo;
DB/Result/.svn/text-base/Book.pm.svn-base:	if($book_bibinfo->merge($bibinfo)) {
DB/Result/.svn/text-base/Book.pm.svn-base:		$book_bibinfo->save_to($book);
DB/Result/.svn/text-base/Book.pm.svn-base:		$book->invalidate;
DB/Result/.svn/text-base/Book.pm.svn-base:#	$bibinfo->save_to($book);
DB/Result/.svn/text-base/Book.pm.svn-base:	my $cover = $book->get_cover; # pripadne najde work->cover
DB/Result/.svn/text-base/Book.pm.svn-base:	# $this->{cover} = { url, width, height, [data (ie7+)?] }
DB/Result/.svn/text-base/Book.pm.svn-base:	# $this->{thumbnail} = { url, width, height }
DB/Result/.svn/text-base/Book.pm.svn-base:	# $this->{generic_thumbnail} = { url, width, height }
DB/Result/.svn/text-base/Book.pm.svn-base:	#   DB->resultset('Cover')->find_generic($library,$format) unless($cover);
DB/Result/.svn/text-base/Book.pm.svn-base:		$info->{cover_thumbnail_url} = $cover->get_thumbnail_url($secure);
DB/Result/.svn/text-base/Book.pm.svn-base:		$info->{cover_medium_url}    = $cover->get_cover_url($secure);
DB/Result/.svn/text-base/Book.pm.svn-base:	my $toc = $book->get_toc; # pripadne najde work->cover
DB/Result/.svn/text-base/Book.pm.svn-base:		$info->{toc_pdf_url}       = $toc->get_pdf_url($secure);
DB/Result/.svn/text-base/Book.pm.svn-base:		$info->{toc_thumbnail_url} = $toc->get_thumbnail_url($secure);
DB/Result/.svn/text-base/Book.pm.svn-base:		$info->{toc_text_url}      = $toc->get_text_url($secure);
DB/Result/.svn/text-base/Book.pm.svn-base:		$info->{backlink_url}  = $book->get_obalkyknih_url($secure);
DB/Result/.svn/text-base/Book.pm.svn-base:	my($r_sum,$r_count) = $book->get_rating;
DB/Result/.svn/text-base/Book.pm.svn-base:	$info->{rating_sum}   = $r_sum;
DB/Result/.svn/text-base/Book.pm.svn-base:	$info->{rating_count} = $r_count;
DB/Result/.svn/text-base/Book.pm.svn-base:		$info->{rating_avg100} = $avg;
DB/Result/.svn/text-base/Book.pm.svn-base:		$info->{rating_avg5} = ($avg % 20) ?
DB/Result/.svn/text-base/Book.pm.svn-base:		$info->{rating_url} = Obalky::Config->url($secure).
DB/Result/.svn/text-base/Book.pm.svn-base:	$info->{reviews} = [];
DB/Result/.svn/text-base/Book.pm.svn-base:#	foreach($book->reviews) {
DB/Result/.svn/text-base/Book.pm.svn-base:#		my $review = $_->to_info;
DB/Result/.svn/text-base/Book.pm.svn-base:#		push @{$info->{reviews}}, $review if($review);
DB/Result/.svn/text-base/Eshop.pm.svn-base:sub factory { Eshop->get_eshop(shift->name) }
DB/Result/.svn/text-base/Eshop.pm.svn-base:	my $book = DB->resultset('Book')->find_by_bibinfo_or_create($bibinfo);
DB/Result/.svn/text-base/Eshop.pm.svn-base:	$bibinfo->save_to($book); # aktualizuj dle produktu -- jen docasne pro opravu TOC!
DB/Result/.svn/text-base/Eshop.pm.svn-base:	my $product = DB->resultset('Product')->find($product_url, 
DB/Result/.svn/text-base/Eshop.pm.svn-base:	$product = DB->resultset('Product')->find_or_create(
DB/Result/.svn/text-base/Eshop.pm.svn-base:	$product->update({ modified => DateTime->now() });
DB/Result/.svn/text-base/Eshop.pm.svn-base:	$bibinfo->save_to($product);
DB/Result/.svn/text-base/Eshop.pm.svn-base:	$media->save_to($product);
DB/Result/.svn/text-base/Eshop.pm.svn-base:	my $book_bibinfo = $book->bibinfo;
DB/Result/.svn/text-base/Eshop.pm.svn-base:	$book_bibinfo->save_to($book) if($book_bibinfo->merge($bibinfo));
DB/Result/.svn/text-base/Eshop.pm.svn-base:	# podle media zaktualizovat book!!! book->prepocitej_media..
DB/Result/.svn/text-base/Eshop.pm.svn-base:	$book->actualize_by_product($product);
DB/Result/.svn/text-base/Library.pm.svn-base:__PACKAGE__->inflate_column( 'created' => {
DB/Result/.svn/text-base/Library.pm.svn-base:    inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/.svn/text-base/Library.pm.svn-base:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/Work.pm.svn-base:	foreach my $book ($work->books) {
DB/Result/.svn/text-base/Work.pm.svn-base:		return $book->cover if($book->cover);
DB/Result/.svn/text-base/Work.pm.svn-base:	foreach my $book ($work->books) {
DB/Result/.svn/text-base/Work.pm.svn-base:		return $book->toc if($book->toc);
DB/Result/.svn/text-base/User.pm.svn-base:__PACKAGE__->inflate_column( 'created' => {
DB/Result/.svn/text-base/User.pm.svn-base:    inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/.svn/text-base/User.pm.svn-base:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/User.pm.svn-base:	die "Neplatný e-mail '$email'.\n" unless $email =~ /\@.+\..+/;
DB/Result/.svn/text-base/User.pm.svn-base:	my($user) = $pkg->search(login => $email);
DB/Result/.svn/text-base/User.pm.svn-base:	die "Uživatel s e-mailovou adresou <a href=\"mailto:$email\">$email</a>".
DB/Result/.svn/text-base/User.pm.svn-base:			" nebyl v systému nalezen.\n" unless $pkg->find_by_email($email);
DB/Result/.svn/text-base/User.pm.svn-base:	# FIX: send e-mail
DB/Result/.svn/text-base/User.pm.svn-base:	open(MUTT,"| mutt -s 'obalkyknih.cz -- vyresetovani hesla' '$email'");
DB/Result/.svn/text-base/User.pm.svn-base:	my $login = $hash->{email};
DB/Result/.svn/text-base/User.pm.svn-base:		if(not $hash->{fullname} or $hash->{fullname} !~ /\s/);
DB/Result/.svn/text-base/User.pm.svn-base:	push @errors, "Neplatný e-mail '$login'.\n" unless $login =~ /\@.+\..+/;
DB/Result/.svn/text-base/User.pm.svn-base:	push @errors, "Uživatel s e-mailem <a href=\"mailto:$login\">$login</a>".
DB/Result/.svn/text-base/User.pm.svn-base:			" už v systému existuje."  if($pkg->find($login));
DB/Result/.svn/text-base/User.pm.svn-base:	push @errors, "Není vyplněno heslo." unless($hash->{password1});
DB/Result/.svn/text-base/User.pm.svn-base:		if($hash->{password1} ne $hash->{password2});
DB/Result/.svn/text-base/User.pm.svn-base:	my $libcode = $hash->{libcode};
DB/Result/.svn/text-base/User.pm.svn-base:		unless($hash->{libname});
DB/Result/.svn/text-base/User.pm.svn-base:		unless($hash->{libopac} =~ /^http\:\/\/.+\..+$/);
DB/Result/.svn/text-base/User.pm.svn-base:		my $library = DB->resultset('Library')->find($libcode);
DB/Result/.svn/text-base/User.pm.svn-base:		$library = DB->resultset('Library')->create(
DB/Result/.svn/text-base/User.pm.svn-base:			$library->name($hash->{libname});
DB/Result/.svn/text-base/User.pm.svn-base:			$library->webopac($hash->{libopac});
DB/Result/.svn/text-base/User.pm.svn-base:			$library->update;
DB/Result/.svn/text-base/User.pm.svn-base:			eval { $user = $pkg->create({
DB/Result/.svn/text-base/User.pm.svn-base:				login => $login, fullname => $hash->{fullname},
DB/Result/.svn/text-base/User.pm.svn-base:				password => $hash->{password1}, library => $library
DB/Result/.svn/text-base/Cache.pm.svn-base:__PACKAGE__->inflate_column( 'created' => {
DB/Result/.svn/text-base/Cache.pm.svn-base:	inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/.svn/text-base/Cache.pm.svn-base:	deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/Toc.pm.svn-base:	$toc->update({ pdf_url => $url, pdf_file => $content });
DB/Result/.svn/text-base/Toc.pm.svn-base:	$toc->make_thumbnail($tmpfile);
DB/Result/.svn/text-base/Toc.pm.svn-base:	my $text = $toc->full_text;
DB/Result/.svn/text-base/Toc.pm.svn-base:	unless($toc->product) {
DB/Result/.svn/text-base/Toc.pm.svn-base:		warn $toc->id." no product\n";
DB/Result/.svn/text-base/Toc.pm.svn-base:#	my $book = $toc->book;
DB/Result/.svn/text-base/Toc.pm.svn-base:	my $book = $toc->product->book;
DB/Result/.svn/text-base/Toc.pm.svn-base:		warn $toc->id." no book ".$toc->book."\n";
DB/Result/.svn/text-base/Toc.pm.svn-base:	my $bibinfo = Obalky::BibInfo->new($book);
DB/Result/.svn/text-base/Toc.pm.svn-base:	return "\t<book>\n".$bibinfo->to_xml.
DB/Result/.svn/text-base/Toc.pm.svn-base:			"\t\t<toc>".HTML::Tiny->entity_encode($text).
DB/Result/.svn/text-base/Toc.pm.svn-base:	my $max_height = $Obalky::Config::MEDIUM_HEIGHT-4; # 236
DB/Result/.svn/text-base/Toc.pm.svn-base:	my $max_width  = $Obalky::Config::MEDIUM_WIDTH-4;  # 166
DB/Result/.svn/text-base/Toc.pm.svn-base:	my $obsah0 = "/tmp/.obsah-$$-0.png";
DB/Result/.svn/text-base/Toc.pm.svn-base:	my $obsah1 = "/tmp/.obsah-$$-1.png";
DB/Result/.svn/text-base/Toc.pm.svn-base:	system("convert ".$pdf."[0] -resize x".$max_height." $obsah0");
DB/Result/.svn/text-base/Toc.pm.svn-base:	system("convert ".$pdf."[0] -resize ".$max_width."x $obsah1");
DB/Result/.svn/text-base/Toc.pm.svn-base:	my($w0,$h0) = Obalky::Tools->image_size($obsah0);
DB/Result/.svn/text-base/Toc.pm.svn-base:	my($w1,$h1) = Obalky::Tools->image_size($obsah1);
DB/Result/.svn/text-base/Toc.pm.svn-base:	my $xoff = 1+int(($max_width-$wN)/2);
DB/Result/.svn/text-base/Toc.pm.svn-base:	my $yoff = 1+int(($max_height-$hN)/2);
DB/Result/.svn/text-base/Toc.pm.svn-base:	my $result = "/tmp/.toc-$$-result.png";
DB/Result/.svn/text-base/Toc.pm.svn-base:	system("composite -compose atop -geometry +$xoff+$yoff $obsahN ".
DB/Result/.svn/text-base/Toc.pm.svn-base:		warn $toc->id.": Failed to thumbnail TOC from $pdf\n";
DB/Result/.svn/text-base/Toc.pm.svn-base:	$toc->update({ pdf_thumbnail => Obalky::Tools->slurp($result) })
DB/Result/.svn/text-base/Toc.pm.svn-base:		if(-f $result);
DB/Result/.svn/text-base/Toc.pm.svn-base:    return "/file/toc/".$toc->id."/".$method;
DB/Result/.svn/text-base/Toc.pm.svn-base:    return Obalky::Config->url($secure).$toc->get_relative_url($method);
DB/Result/.svn/text-base/Toc.pm.svn-base:    shift->get_absolute_url('pdf',$secure) 
DB/Result/.svn/text-base/Toc.pm.svn-base:       shift->get_absolute_url('thumbnail',$secure) 
DB/Result/.svn/text-base/Toc.pm.svn-base:    shift->get_absolute_url('text',$secure) 
DB/Result/.svn/text-base/Toc.pm.svn-base:	return ("image/png",$toc->pdf_thumbnail,"jpeg") if($method eq 'thumbnail');
DB/Result/.svn/text-base/Toc.pm.svn-base:	return ("image/pdf",$toc->pdf_file,"pdf")       if($method eq 'pdf');
DB/Result/.svn/text-base/Toc.pm.svn-base:	return ("text/plain",$toc->full_text,"txt")     if($method eq 'text');
DB/Result/.svn/text-base/Visitor.pm.svn-base:__PACKAGE__->inflate_column( 'first_time' => {
DB/Result/.svn/text-base/Visitor.pm.svn-base:	inflate => sub { DateTime::Format::MySQL->parse_datetime(shift); },
DB/Result/.svn/text-base/Visitor.pm.svn-base:	deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/Visitor.pm.svn-base:__PACKAGE__->inflate_column( 'last_time' => {
DB/Result/.svn/text-base/Visitor.pm.svn-base:	inflate => sub { DateTime::Format::MySQL->parse_datetime(shift); },
DB/Result/.svn/text-base/Visitor.pm.svn-base:	deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/Visitor.pm.svn-base:	my $ip = $visitor->last_ip;
DB/Result/.svn/text-base/Marc.pm.svn-base:__PACKAGE__->inflate_column( 'created' => {
DB/Result/.svn/text-base/Marc.pm.svn-base:    inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/.svn/text-base/Marc.pm.svn-base:    deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/Marc.pm.svn-base:    return Obalky::Tools->fix_permalink($book->permalink);
DB/Result/.svn/text-base/Review.pm.svn-base:__PACKAGE__->inflate_column( 'created' => {
DB/Result/.svn/text-base/Review.pm.svn-base:	inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/.svn/text-base/Review.pm.svn-base:	deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/Review.pm.svn-base:	my $ip = $review->visitor_ip;
DB/Result/.svn/text-base/Review.pm.svn-base:	return unless($review->html_text);
DB/Result/.svn/text-base/Review.pm.svn-base:#		visitor_ip => $review->visitor_blurred_ip,
DB/Result/.svn/text-base/Review.pm.svn-base:#		visitor_name => $review->visitor_name,
DB/Result/.svn/text-base/Review.pm.svn-base:		impact => $review->impact,	
DB/Result/.svn/text-base/Review.pm.svn-base:		html_text => $review->html_text,
DB/Result/.svn/text-base/Review.pm.svn-base:		rating => $review->rating,
DB/Result/.svn/text-base/Upload.pm.svn-base:	return $Obalky::Config::WWW_URL.$upload->file_url;
DB/Result/.svn/text-base/Upload.pm.svn-base:	return $Obalky::Config::WWW_DIR.$upload->file_url;
DB/Result/.svn/text-base/Upload.pm.svn-base:	return "/upload/".$upload->batch."/".$upload->filename;
DB/Result/.svn/text-base/Upload.pm.svn-base:#	return 0 unless($upload->isbn);
DB/Result/.svn/text-base/Upload.pm.svn-base:#	return 0 unless($upload->check_isbn_format($upload->isbn));
DB/Result/.svn/text-base/Upload.pm.svn-base:#	return 0 if($upload->check_duplicit_isbn);
DB/Result/.svn/text-base/Upload.pm.svn-base:	return 0 if($upload->check_duplicit_file);
DB/Result/.svn/text-base/Upload.pm.svn-base:	return $upload->{cache_isbn} if(defined $upload->{cache_isbn});
DB/Result/.svn/text-base/Upload.pm.svn-base:	my @books = DB->resultset('Book')->find_by_ean13($upload->ean13);
DB/Result/.svn/text-base/Upload.pm.svn-base:	return $upload->{cache_isbn} = join(" ",map $_->to_isbn, @books);
DB/Result/.svn/text-base/Upload.pm.svn-base:	return $upload->{cache_file} if(defined $upload->{cache_file});
DB/Result/.svn/text-base/Upload.pm.svn-base:	my @objects = DB->resultset('Cover')->search(
DB/Result/.svn/text-base/Upload.pm.svn-base:					checksum => $upload->checksum);
DB/Result/.svn/text-base/Upload.pm.svn-base:	return $upload->{cache_file} = join(" ",map $_->id, @objects);
DB/Result/.svn/text-base/Upload.pm.svn-base:	my $bibinfo = Obalky::BibInfo->new($upload); # ???
DB/Result/.svn/text-base/Upload.pm.svn-base:	return "/upload/".$upload->batch."/".$upload->filename;
DB/Result/.svn/text-base/Upload.pm.svn-base:	my $bibinfo = Obalky::BibInfo->new($upload);
DB/Result/.svn/text-base/Upload.pm.svn-base:	return $bibinfo->to_isbn;
DB/Result/.svn/text-base/Cover.pm.svn-base:__PACKAGE__->inflate_column( 'created' => {
DB/Result/.svn/text-base/Cover.pm.svn-base:	inflate => sub { eval { DateTime::Format::MySQL->parse_datetime(shift) } },
DB/Result/.svn/text-base/Cover.pm.svn-base:	deflate => sub { DateTime::Format::MySQL->format_datetime(shift); }
DB/Result/.svn/text-base/Cover.pm.svn-base:sub is_generic { shift->id < 1_000_000 ? 1 : 0 }
DB/Result/.svn/text-base/Cover.pm.svn-base:	my($ow,$oh) = ($cover->orig_width,$cover->orig_height);
DB/Result/.svn/text-base/Cover.pm.svn-base:    my($cw,$ch) = Obalky::Tools->resize(180,240,$ow,$oh);
DB/Result/.svn/text-base/Cover.pm.svn-base:	my($tw,$th) = Obalky::Tools->resize(27,36,$ow,$oh);
DB/Result/.svn/text-base/Cover.pm.svn-base:		id => $cover->id,
DB/Result/.svn/text-base/Cover.pm.svn-base:		thumbnail_url => $cover->get_thumbnail_url($secure),
DB/Result/.svn/text-base/Cover.pm.svn-base:		cover_url => $cover->get_cover_url($secure),
DB/Result/.svn/text-base/Cover.pm.svn-base:		backlink_url => $cover->book->get_obalkyknih_url($secure),
DB/Result/.svn/text-base/Cover.pm.svn-base:	return "/file/cover/".$cover->id."/".$method;
DB/Result/.svn/text-base/Cover.pm.svn-base:	return Obalky::Config->url($secure).$cover->get_relative_url($method);
DB/Result/.svn/text-base/Cover.pm.svn-base:    $cover->get_absolute_url('medium',$secure) 
DB/Result/.svn/text-base/Cover.pm.svn-base:    $cover->get_absolute_url('thumbnail',$secure) 
DB/Result/.svn/text-base/Cover.pm.svn-base:	my $blob = $method eq 'medium' ? $cover->file_medium : 
DB/Result/.svn/text-base/Cover.pm.svn-base:			   $method eq 'orig' ? $cover->file_orig : $cover->file_thumb;
DB/Result/.svn/text-base/Cover.pm.svn-base:	return $blob ? ("image/jpeg", $blob->content, "jpeg") : ();
DB/Result/.svn/entries:2011-10-12T15:48:26.758104Z
DB/Result/.svn/entries:svn:special svn:externals svn:needs-lock
DB/Result/.svn/entries:49789afe-7772-4492-8243-1a4b1d9f4dda
DB/Result/.svn/entries:2009-10-12T16:49:22.000000Z
DB/Result/.svn/entries:2009-10-12T15:33:53.114562Z
DB/Result/.svn/entries:2009-12-06T22:02:37.000000Z
DB/Result/.svn/entries:2009-12-07T13:34:52.769465Z
DB/Result/.svn/entries:2009-10-08T16:38:30.000000Z
DB/Result/.svn/entries:2009-10-08T14:04:10.502186Z
DB/Result/.svn/entries:2009-10-23T09:53:31.000000Z
DB/Result/.svn/entries:2009-10-23T10:18:25.907570Z
DB/Result/.svn/entries:2011-10-07T09:32:45.000000Z
DB/Result/.svn/entries:2011-10-12T15:53:43.030645Z
DB/Result/.svn/entries:2009-10-17T14:43:46.000000Z
DB/Result/.svn/entries:2009-10-16T20:10:37.701417Z
DB/Result/.svn/entries:2009-12-06T22:47:36.000000Z
DB/Result/.svn/entries:2009-12-03T06:05:24.327653Z
DB/Result/.svn/entries:2011-01-10T10:26:48.000000Z
DB/Result/.svn/entries:2011-01-10T11:36:57.541695Z
DB/Result/.svn/entries:2011-02-28T06:51:24.000000Z
DB/Result/.svn/entries:2010-11-03T10:01:16.742646Z
DB/Result/.svn/entries:2011-06-22T16:40:38.000000Z
DB/Result/.svn/entries:2011-06-22T19:35:35.405441Z
DB/Result/.svn/entries:2009-10-08T16:38:30.000000Z
DB/Result/.svn/entries:2009-10-08T14:04:10.502186Z
DB/Result/.svn/entries:2011-10-19T16:11:23.000000Z
DB/Result/.svn/entries:2011-10-12T16:13:50.979293Z
DB/Result/.svn/entries:2009-12-06T22:47:36.000000Z
DB/Result/.svn/entries:2009-12-03T06:05:24.327653Z
DB/Result/.svn/entries:has-props
DB/Result/.svn/entries:2009-10-08T16:38:30.000000Z
DB/Result/.svn/entries:2009-10-08T14:04:10.502186Z
DB/Result/.svn/entries:2009-12-06T22:47:36.000000Z
DB/Result/.svn/entries:2009-12-03T06:05:24.327653Z
DB/Result/.svn/entries:2011-10-12T15:15:55.000000Z
DB/Result/.svn/entries:2011-10-12T15:48:26.758104Z
DB/.svn/all-wcprops:svn:wc:ra_dav:version-url
DB/.svn/entries:2011-10-12T15:48:26.758104Z
DB/.svn/entries:svn:special svn:externals svn:needs-lock
DB/.svn/entries:49789afe-7772-4492-8243-1a4b1d9f4dda
DB.pm:__PACKAGE__->connection(
DB.pm:	__PACKAGE__->dsn, __PACKAGE__->user, __PACKAGE__->pass,
DB.pm:__PACKAGE__->load_namespaces;
Eshop/SKAT.pm:##    my $seenfile = '/tmp/.obalky-skat';
Eshop/SKAT.pm:###	  my $seenfile = '/tmp/.obalky-skat-'.$from->strftime('%F');
Eshop/SKAT.pm:	my $oai = Net::OAI::Harvester->new(baseURL => $self->baseURL);
Eshop/SKAT.pm:	my $records = $oai->listAllRecords(
Eshop/SKAT.pm:					metadataPrefix => $self->metadataPrefix,
Eshop/SKAT.pm:					metadataHandler => $self->metadataHandler, 
Eshop/SKAT.pm:					set => $self->recordSet,
Eshop/SKAT.pm:					from => $from->ymd, 'until' => $to->ymd);
Eshop/SKAT.pm:	while ( my $record = $records->next() ) {
Eshop/SKAT.pm:        my $meta = $record->metadata();
Eshop/SKAT.pm:		## print $meta->{id}.":".$meta->{x00}."\n";
Eshop/SKAT.pm:		$meta->{url} = $1 if($meta->{x00} =~ /(http\S+)/);
Eshop/SKAT.pm:		$meta->{url} =~ s/^(.*kanzelsberger.*)(\/m\/m\_)/$1\//;
Eshop/SKAT.pm:		warn $meta->{id}.": cover URL missing\n" 
Eshop/SKAT.pm:						if($meta->{id} and not $meta->{url});
Eshop/SKAT.pm:		next unless($meta->{id} and $meta->{url});
Eshop/SKAT.pm:##		next if($seen->{$meta->{id}}++);
Eshop/SKAT.pm:		my $url = $self->fixurl($meta->{id},$meta->{url});
Eshop/SKAT.pm:		my $bibinfo = Obalky::BibInfo->new_from_params(
Eshop/SKAT.pm:						{ isbn => $meta->{isbn} });
Eshop/SKAT.pm:		my $media = Obalky::Media->new_from_info({ cover_url => $url });
Eshop/SKAT.pm:__PACKAGE__->register(crawl => 0, license => 'licensed', title => 'SKAT' );
Eshop/SKAT.pm:		"31520" => "http://www.ok-litomerice.cz/clavius/",
Eshop/SKAT.pm:		"32520" => "http://lanius.kmp.plzen-city.cz/",
Eshop/SKAT.pm:# http://www.vkta.cz/obalky/l.dll?verb=ListRecords&from=2008-09-10&until=2008-09-30&metadataPrefix=unimarc&set=OBA
Eshop/Mechanize.pm:    my($isbn,$ean,$isbn10,$isbn13) = $search->isbn_forms;
Eshop/Mechanize.pm:	return $self->mechanize(new WWW::Mechanize,$ean);
Eshop/Mechanize.pm:	my($link,$product_url) = $self->cover_link($mech,$ean);
Eshop/Mechanize.pm:	my $url = ref $link ? $link->url_abs : $link;
Eshop/Mechanize.pm:	my $bibinfo = Obalky::BibInfo->new_from_ean($ean); # zname jen EAN
Eshop/Mechanize.pm:	my $media = Obalky::Media->new_from_info({ cover_url => $url });
Eshop/Mechanize.pm:#	my $tree = HTML::TreeBuilder::XPath->new_from_content($mech->content());
Eshop/Mechanize.pm:# www.sckn.cz/ceskeknihy/ -> rozsirene vyhledavani -> Od DEN Do DEN, ISBN 9
Eshop/Mechanize.pm:# -> http://www.sckn.cz/ceskeknihy/html/csv_txt_export_hledani.php?dotaz=15674,22305,23255,32050,32051,32052,32053,32054,32055,
Eshop/Mechanize.pm:# -> stahnout ISBN a detaily
Eshop/Mechanize.pm:# SCKN - cca 6.000 obalek
Eshop/Mechanize.pm:	$mech->get("http://www.sckn.cz/ceskeknihy/html/vyhledavani.php?".
Eshop/Mechanize.pm:	my $product_url = $mech->base;
Eshop/Mechanize.pm:	my $tree = HTML::TreeBuilder::XPath->new_from_content($mech->content);
Eshop/Mechanize.pm:	my($review) = $tree->findnodes('//div[@class="titul_anotace"]');
Eshop/Mechanize.pm:		$info->{review_impact} = $Obalky::Media::REVIEW_ANNOTATION;
Eshop/Mechanize.pm:		$info->{review_html} = $review->as_text 
Eshop/Mechanize.pm:	my $cover_link = $mech->find_image( url_regex => qr/\/images\/.*jpe?g$/ );
Eshop/Mechanize.pm:	$info->{cover_url} = ref $cover_link ? $cover_link->url_abs : $cover_link;
Eshop/Mechanize.pm:	my $text = $tree->findnodes_as_string('//td');
Eshop/Mechanize.pm:	if($text =~ /Doporučená cena\:\s+([\s\d\.\,]+)\s*\,\-/) {
Eshop/Mechanize.pm:		$info->{price_vat} = sprintf("%d.%02d",$price_int,$price_cent);
Eshop/Mechanize.pm:		$info->{price_cur} = 'CZK';
Eshop/Mechanize.pm:		print "Cena: ".$info->{price_vat}."\n";
Eshop/Mechanize.pm:	my $bibinfo = Obalky::BibInfo->new_from_ean($ean); # zname jen EAN
Eshop/Mechanize.pm:	my $media = Obalky::Media->new_from_info( $info );
Eshop/Mechanize.pm:#	my $html = `wget -O - '$url/vyhledavani.php?isbn=$ean&odeslano=1'`;
Eshop/Mechanize.pm:#	$tree->dump;
Eshop/Mechanize.pm:	$mech->get("http://www.sckn.cz/ceskeknihy/html/vyhledavani.php?".
Eshop/Mechanize.pm:#	$mech->post( "http://www.sckn.cz/ceskeknihy/html/vyhledavani.php", 
Eshop/Mechanize.pm:	my $tree = HTML::TreeBuilder::XPath->new_from_content($mech->content);
Eshop/Mechanize.pm:	my($review) = $tree->findnodes('//div[@class="titul_anotace"]');
Eshop/Mechanize.pm:#	print $review->as_text."\n" if $review;
Eshop/Mechanize.pm:#	my($cover) = $tree->findnodes('//img[@class="obalka"]');
Eshop/Mechanize.pm:	print $mech->find_image( url_regex => qr/\/images\/.*jpe?g$/ )."\n";
Eshop/Mechanize.pm:	my $cover_url = $mech->find_image( url_regex => qr/\/images\/.*jpe?g$/ );
Eshop/Mechanize.pm:	return $cover_url ? ($cover_url,$mech->base) : ();
Eshop/Mechanize.pm:__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/Mechanize.pm:	return; # dasabled since 201107 - pada na follow_link nize..
Eshop/Mechanize.pm:	$mech->get( "http://www.martinus.sk/" );
Eshop/Mechanize.pm:	$mech->submit_form(form_number => 1, 
Eshop/Mechanize.pm:	return unless($mech->content() =~ /Bol n/); # @found == 1
Eshop/Mechanize.pm:	$mech->follow_link( url_regex => qr/uItem/, class => "titlelist" );
Eshop/Mechanize.pm:	my $product_url = $mech->base;
Eshop/Mechanize.pm:	my $cover_url = $mech->find_link( url_regex => qr/data\/tovar/ );
Eshop/Mechanize.pm:__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/Mechanize.pm:	my $length = 25-12+length($ean);
Eshop/Mechanize.pm:	open(NC,"| nc www.kosmas.cz 80 > /tmp/.post-kosmas-$$") or die;
Eshop/Mechanize.pm:Content-Type: application/x-www-form-urlencoded
Eshop/Mechanize.pm:Content-Length: $length
Eshop/Mechanize.pm:	open(TMP,"<","/tmp/.post-kosmas-$$") or die;
Eshop/Mechanize.pm:	close(TMP); unlink "/tmp/.post-kosmas-$$";
Eshop/Mechanize.pm:	$mech->get( $url );
Eshop/Mechanize.pm:#	$mech->submit_form(form_number => 2, fields => 
Eshop/Mechanize.pm:#	print $mech->content; exit;
Eshop/Mechanize.pm:#	return if($mech->content() =~ /nebyl bohu/);
Eshop/Mechanize.pm:	my $cover_url = $mech->find_image( url_regex => qr/kosmas.cz\/obalky\// );
Eshop/Mechanize.pm:	return $cover_url ? ($cover_url, $mech->base) : ();
Eshop/Mechanize.pm:#__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/Mechanize.pm:    my($isbn,$ean,$isbn10,$isbn13) = $search->isbn_forms;
Eshop/Mechanize.pm:	return $self->mechanize(new WWW::Mechanize,$ean);
Eshop/Mechanize.pm:	my $date = $tm->mday."-".$tm->mon."-".$tm->year;
Eshop/Mechanize.pm:	my $feeds = DB->resultset('User')->get_xmlfeeds();
Eshop/Mechanize.pm:			if(-f "/tmp/.harvest/Zbozi-cache/$date/$feed5/out") {#Denni cache
Eshop/Mechanize.pm:				open(XML,"</tmp/.harvest/Zbozi-cache/$date/$feed5/out");
Eshop/Mechanize.pm:				eval {$mech->get($feed);};
Eshop/Mechanize.pm:				$xml_content = $mech->content;
Eshop/Mechanize.pm:				$xml_content =~ s/windows-1250/utf-8/ if($feed =~ /fragment/);
Eshop/Mechanize.pm:				$xml_content =~ s/iso-8859-2/utf-8/ if($feed =~ /knihy.abz.cz/);
Eshop/Mechanize.pm:				unless(-d "/tmp/.harvest/Zbozi-cache/$date/") {
Eshop/Mechanize.pm:					rmtree("/tmp/.harvest/Zbozi-cache/");
Eshop/Mechanize.pm:				mkpath("/tmp/.harvest/Zbozi-cache/$date/$feed5/") or die;
Eshop/Mechanize.pm:				open(XML,">/tmp/.harvest/Zbozi-cache/$date/$feed5/out") or die $!."/tmp/.harvest/Zbozi-cache/$date/$feed5/out";
Eshop/Mechanize.pm:			$eans =~ s/-//g;
Eshop/Mechanize.pm:				my $warn = "Chybný formát XML" if($@ =~ /not well-formed/);
Eshop/Mechanize.pm:			my $titles = $xml->{SHOPITEM};
Eshop/Mechanize.pm:				my $id = $tit->{EAN} || $tit->{ISBN};
Eshop/Mechanize.pm:					my $file = $tit->{CONTENTURL} || $tit->{IMGURL};
Eshop/Mechanize.pm:					my $title = $tit->{PRODUCT};
Eshop/Mechanize.pm:					$title =~ s/ - SLEVA \d+\%//g;
Eshop/Mechanize.pm:					$info->{price_vat} = $tit->{PRICE_VAT};
Eshop/Mechanize.pm:					$info->{price_cur} = 'CZK';
Eshop/Mechanize.pm:					$info->{review_impact} = $Obalky::Media::REVIEW_ANNOTATION;
Eshop/Mechanize.pm:					$info->{review_html} = $tit->{DESCRIPTION};
Eshop/Mechanize.pm:					system ("wget $file -P $temp >/dev/null") and die $!;
Eshop/Mechanize.pm:					if($tit->{TOC}) {
Eshop/Mechanize.pm:						my $pages = $tit->{TOC}->{PAGEURL};
Eshop/Mechanize.pm:							system ("wget $page -P /tmp/.harvest/$ean >/dev/null") and die $!;							
Eshop/Mechanize.pm:		    	        $info->{cover_url} = $file;
Eshop/Mechanize.pm:				        $info->{cover_tmpfile} = "$tempfile";
Eshop/Mechanize.pm:				        $info->{tocpdf_url} = $file;
Eshop/Mechanize.pm:				        $info->{tocpdf_tmpfile} = "$tempfile";
Eshop/Mechanize.pm:				        $info->{toctext} = Obalky::Tools->slurp(
Eshop/Mechanize.pm:				                  "$tempfile","windows-1250");
Eshop/Mechanize.pm:						$info->{tocpdf_url} = $firsttocfile;
Eshop/Mechanize.pm:				        $info->{tocpdf_tmpfile} = "$tocfile";
Eshop/Mechanize.pm:				    my $bibinfo = Obalky::BibInfo->new_from_params({
Eshop/Mechanize.pm:						authors=> $tit->{AUTHORS}, year => $tit->{ROKVYDANI} });
Eshop/Mechanize.pm:					my $media = Obalky::Media->new_from_info( $info );
Eshop/Mechanize.pm:__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/Upload.pm:# Interni "eShop" -- data nahrana na obalkyknih.cz
Eshop/Upload.pm:__PACKAGE__->register(license => 'free', czech => 1, display => 0,
Eshop/Upload.pm:	title => 'obalky-legacy', test => '9788072038848' );
Eshop/TOC.pm:__PACKAGE__->register(crawl => 0, license => 'free',
Eshop/TOC.pm:	my $yyyymm = $from->strftime("%Y%m");
Eshop/TOC.pm:	my $bibinfo = Obalky::BibInfo->new_from_params({ nbn => $nbn });
Eshop/TOC.pm:	$bibinfo->oclc($1) if($f035a =~ /(\d+)/);
Eshop/TOC.pm:	$bibinfo->isbn($1) if($f020a =~ /([\d\-xX]+)\s*.*$/);
Eshop/TOC.pm:	$bibinfo->issn($1) if($f022a =~ /([\d\-xX]+)\s*.*$/);
Eshop/TOC.pm:	$bibinfo->{nbn}     = $1         if($f015a =~ /([cnb\d\-xX]+)\s*.*$/);
Eshop/TOC.pm:	$bibinfo->{title}   = $1         if($f245a =~ /^([^\/\:]+)/);
Eshop/TOC.pm:	$bibinfo->{authors} = [ $f100a ] if($f100a);
Eshop/TOC.pm:	$bibinfo->{year}    = $1         if($f260c and $f260c =~ /(\d{4})/);
Eshop/TOC.pm:	my $res = $g_zoom->search_pqf('@attr 1=12 '.$nbn); sleep 1; # !
Eshop/TOC.pm:	#my $res = $g_zoom->search_pqf('@attr 1=1032 '.$nbn); sleep 1; # !
Eshop/TOC.pm:	if($res->size() != 1) {
Eshop/TOC.pm:		warn "$nbn: multiple $nbn records in NKC??\n" if($res->size() > 1);
Eshop/TOC.pm:##		warn "$nbn: record not found in NKC!\n" unless($res->size());
Eshop/TOC.pm:	my $rec = $res->record(0) or die;
Eshop/TOC.pm:	my $marc = decode_utf8($rec->render("charset=windows-1250"));
Eshop/TOC.pm:	return $pkg->parse_marc($nbn,$marc, 'http://aleph.nkp.cz'.
Eshop/TOC.pm:			'/F?func=find-c&ccl_term=sys=$&local_base=NKC01');
Eshop/TOC.pm:	my $ua = LWP::UserAgent->new; $ua->timeout(10);
Eshop/TOC.pm:	$ua->proxy('http', 'http://www.obalkyknih.cz:3374/');
Eshop/TOC.pm:	my $dir_url = $self->get_dir_url($subdir,$from);
Eshop/TOC.pm:	my $response_dir = $ua->get($dir_url);
Eshop/TOC.pm:	my $dirlist = $response_dir->decoded_content || '';
Eshop/TOC.pm:		my $day = int($from->strftime("%d")) % 10;
Eshop/TOC.pm:		last if(defined $DEBUG_LIMIT and $DEBUG_LIMIT-- == 0);
Eshop/TOC.pm:		next if($seen->{$ext}->{$nbn}++); #?
Eshop/TOC.pm:		my $response_file = $ua->mirror($dir_url.$file,"$TMP_DIR/$file");
Eshop/TOC.pm:		unless($response_file->is_success) {
Eshop/TOC.pm:			warn "Failed to download $dir_url$file: ".$response->status_line;
Eshop/TOC.pm:		my($bibinfo,$product_url) = $self->nbn_to_bibinfo($nbn);
Eshop/TOC.pm:			$media->{cover_url} = $dir_url.$file;
Eshop/TOC.pm:			$media->{cover_tmpfile} = "$TMP_DIR/$file";
Eshop/TOC.pm:			$media->{tocpdf_url} = $dir_url.$file;
Eshop/TOC.pm:			$media->{tocpdf_tmpfile} = "$TMP_DIR/$file";
Eshop/TOC.pm:			$media->{toctext} = Obalky::Tools->slurp(
Eshop/TOC.pm:						"$TMP_DIR/$file","windows-1250");
Eshop/TOC.pm:		push @list, [$bibinfo, Obalky::Media->new_from_info($media), 
Eshop/TOC.pm:#		last if($ENV{DEBUG} and $bibinfo->{nbn} eq 'cnb000356585');
Eshop/TOC.pm:	push @list, $self->download("covers",  $storable,$from,$to,$TMP_DIR);
Eshop/TOC.pm:	push @list, $self->download("contents",$storable,$from,$to,$TMP_DIR);
Eshop/Legacy.pm:__PACKAGE__->register(crawl => 0, license => 'free', display => 0,
Eshop/Legacy.pm:	my $number = $1 if("$from" =~ /^2009-04-2(\d)T/);
Eshop/Legacy.pm:	die "$from - nezname cislo?" unless(defined $number);
Eshop/Legacy.pm:	open(LIST,"$LIST-$number") or die;
Eshop/Legacy.pm:		my $obj13 = eval { Business::ISBN->new($ean12."0"); };
Eshop/Legacy.pm:		$obj13->fix_checksum;
Eshop/Legacy.pm:		my $bibinfo = Obalky::BibInfo->new_from_ean($obj13->as_string);
Eshop/Legacy.pm:		next unless(-f "$DIR/$file");
Eshop/Legacy.pm:		my $media = Obalky::Media->new_from_info(
Eshop/Legacy.pm:							$bibinfo->to_some_param;
Eshop/Static.pm:	my($isbn,$ean,$isbn10,$isbn13) = $search->isbn_forms;
Eshop/Static.pm:	my $product_url = "http://grr.ics.muni.cz/stuff/ISBN_978-80-7203-884-8.JPEG";
Eshop/Static.pm:	my $media = Obalky::Media->new_from_info({
Eshop/Static.pm:    my $bibinfo = Obalky::BibInfo->new_from_ean($ean); # zname jen EAN
Eshop/Static.pm:__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/Static.pm:	display => 0, title => 'obalky-test', test => '9788072038848' );
Eshop/OpenLibrary.pm:__PACKAGE__->register(harvest => 1, # test => '9780071544337',
Eshop/OpenLibrary.pm:    my($isbn,$ean,$isbn10,$isbn13) = $search->isbn_forms;
Eshop/OpenLibrary.pm:    my $bibinfo = Obalky::BibInfo->new_from_params({
Eshop/OpenLibrary.pm:		isbn => $isbn13, title => $book->title, authors => $authors,
Eshop/OpenLibrary.pm:		year => $book->year });
Eshop/OpenLibrary.pm:	$media_info->{cover_url} = $book->ImageUrlLarge;
Eshop/OpenLibrary.pm:    my $media = Obalky::Media->new_from_info( $media_info );
Eshop/OpenLibrary.pm:	my $product_url = $book->url;
Eshop/Amazon.pm:__PACKAGE__->register(harvest => 1, # test => '9780071544337',
Eshop/Amazon.pm:my $ua = Net::Amazon->new(
Eshop/Amazon.pm:    my($isbn,$ean,$isbn10,$isbn13) = $search->isbn_forms;
Eshop/Amazon.pm:	my $response = $ua->search(isbn => $isbn13) if($isbn13);
Eshop/Amazon.pm:	return () unless($response and $response->is_success());
Eshop/Amazon.pm:	my $book = eval { $response->properties };
Eshop/Amazon.pm:	my $authors = join(";",grep defined $_, $book->authors);
Eshop/Amazon.pm:    my $bibinfo = Obalky::BibInfo->new_from_params({
Eshop/Amazon.pm:		isbn => $isbn13, title => $book->title, authors => $authors,
Eshop/Amazon.pm:		year => $book->year });
Eshop/Amazon.pm:	$media_info->{cover_url} = $book->ImageUrlLarge;
Eshop/Amazon.pm:	if($book->OurPrice =~ /^\$([\d\.]+)$/) {
Eshop/Amazon.pm:		$media_info->{price_vat} = $1;
Eshop/Amazon.pm:		$media_info->{price_cur} = "USD";
Eshop/Amazon.pm:	if(exists $book->{ProductDescription}) {
Eshop/Amazon.pm:		$media_info->{review_html} = $book->{ProductDescription};
Eshop/Amazon.pm:		$media_info->{review_impact} = $Obalky::Media::REVIEW_ANNOTATION;
Eshop/Amazon.pm:	my $review_set = $book->review_set;
Eshop/Amazon.pm:	my $rating = $review_set->average_customer_rating; # 0..5
Eshop/Amazon.pm:		# fix: productdescription -- anno BUT rating -- customer rating
Eshop/Amazon.pm:		$media_info->{review_rating} = int(20.0*$rating);
Eshop/Amazon.pm:		$media_info->{review_impact} ||= $Obalky::Media::REVIEW_COMMENT;
Eshop/Amazon.pm:#		$media_info->{$review_set->average_customer_rating;
Eshop/Amazon.pm:#	foreach my $review ($review_set ? $review_set->reviews : ()) {
Eshop/Amazon.pm:#		$media_info->{rating_count} = $review->total_votes;
Eshop/Amazon.pm:#		$media_info->{rating_sum} = 
Eshop/Amazon.pm:#				int($review->rating * $review->total_votes);
Eshop/Amazon.pm:    my $media = Obalky::Media->new_from_info( $media_info );
Eshop/Amazon.pm:	my $product_url = $book->url;#{DetailPageURL};
Eshop/SimpleURL.pm:	my($isbn,$ean,$isbn10,$isbn13) = $bibinfo->isbn_forms;
Eshop/SimpleURL.pm:	foreach my $url ($self->url) {
Eshop/SimpleURL.pm:		my $filename = Eshop->fetch_image($isbn13,$url,$dir);
Eshop/SimpleURL.pm:    	my $bibinfo = Obalky::BibInfo->new_from_ean($ean); # zname jen EAN
Eshop/SimpleURL.pm:		my $media = Obalky::Media->new_from_info({ cover_url => $url, 
Eshop/SimpleURL.pm:#sub url { "http://ec2.images-amazon.com/images/P/0123456789.01.L.jpg" }
Eshop/SimpleURL.pm:#__PACKAGE__->register(harvest => 1, license => 'licensed',
Eshop/SimpleURL.pm:#__PACKAGE__->register(harvest => 1, license => 'licensed',
Eshop/SimpleURL.pm:__PACKAGE__->register(harvest => 0, license => 'licensed', czech => 1,
Eshop/SimpleURL.pm:#__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/SimpleURL.pm:#__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/SCKN.pm:__PACKAGE__->register(crawl => 1, license => 'licensed', title => 'SCKN' );
Eshop/SCKN.pm:#	my $id = $storable->{last_id}; 
Eshop/SCKN.pm:#	# 500 dozadu - pokud by pridali obalku?
Eshop/SCKN.pm:#	$id = $id ? ($id > 500 ? $id-500 : 1) : 1;
Eshop/SCKN.pm:	my $id = $storable->{last_id} || 1;
Eshop/SCKN.pm:		my $csv = Text::CSV::Encoded->new({ sep_char => ';', 
Eshop/SCKN.pm:		open(CSV,"wget -q -O - '$listurl' |") or die;
Eshop/SCKN.pm:		my $colref = $csv->getline(*CSV);
Eshop/SCKN.pm:		$csv->column_names(@$colref);
Eshop/SCKN.pm:		while(my $row = $csv->getline_hr(*CSV)) {
Eshop/SCKN.pm:			my $isbn = $row->{'ISBN 1'}; 
Eshop/SCKN.pm:			$isbn =~ s/\-//g;
Eshop/SCKN.pm:			my $bibinfo = Obalky::BibInfo->new_from_params({ isbn => $isbn });
Eshop/SCKN.pm:			$bibinfo->{title} = $row->{Podtitul} ? $row->{"N\x{e1}zev"}."; ".
Eshop/SCKN.pm:									$row->{Podtitul} : $row->{"N\x{e1}zev"};
Eshop/SCKN.pm:			$bibinfo->{authors} = [split(/\s\-\s/,$row->{'Autor'})];
Eshop/SCKN.pm:			$bibinfo->{year} = $1 if($row->{"Datum vydani"} 
Eshop/SCKN.pm:										=~ /^(\d\d\d\d)\-/);
Eshop/SCKN.pm:			my $cover_file = "/tmp/.sckn-$$-$isbn";
Eshop/SCKN.pm:			system("wget -q -O '$cover_file' '$cover_url'");
Eshop/SCKN.pm:				cover_url     => -s $cover_file ? $cover_url  : undef,
Eshop/SCKN.pm:				cover_tmpfile => -s $cover_file ? $cover_file : undef,
Eshop/SCKN.pm:				price_vat => $row->{'Cena'},
Eshop/SCKN.pm:				review_html => $row->{'Anotace'},
Eshop/SCKN.pm:			my $media = Obalky::Media->new_from_info($media_info);
Eshop/SCKN.pm:			## print "$id $isbn: ".(-s $cover_file)." ".$row->{'ISBN souboru'}."\n";
Eshop/SCKN.pm:		$csv->eof or $csv->error_diag();
Eshop/SCKN.pm:	$storable->{last_id} = $id;
Eshop/SCKN.pm:	# nejak od do zjisti ID zaznamu - na zacatku 1..35000
Eshop/SCKN.pm:#"Gilbert, Guy";"Křížová cesta";"";"978-80-7195-441-5";"";"";"Karmelitánské nakladatelství";"0";"39";"B";"49";"";"český";"Křížová cesta se může stát nejen zajímavou inspirací k meditaci a modlitbě, ale také pěkným dárkem.";"100x145";"";"";"Kubů, Anna";"Martinková, Ludmila";"";"Miklošková, Lucie";"";"";"1.";"tisk Grafotechna Print, s.r.o., Praha";"";"francouzský";"";"";"";"";"";"";"9788071954415";"2010-01-29"
Eshop/SCKN.pm:#	my $since = today()-50;
Eshop/SCKN.pm:#	my $listURL = $self->baseURL.sprintf("%02d-%02d-%04d",
Eshop/SCKN.pm:#					$since->day,$since->month,$since->year);
Eshop/SCKN.pm:#    my $ua = LWP::UserAgent->new; $ua->timeout(10);
Eshop/SCKN.pm:#    my $list_response = $ua->get($listURL);
Eshop/SCKN.pm:#    my $list_csv = decode("windows-1250",$list_response->content);
Eshop/SCKN.pm:	my $csv = Text::CSV::Encoded->new({ sep_char => ';', 
Eshop/SCKN.pm:	open(CSV,"wget -q -O - '$listURL' |") or die;
Eshop/SCKN.pm:	$colref = $csv->getline(*CSV);
Eshop/SCKN.pm:	$csv->column_names(@$colref);
Eshop/.svn/all-wcprops:svn:wc:ra_dav:version-url
Eshop/.svn/all-wcprops:svn:wc:ra_dav:version-url
Eshop/.svn/all-wcprops:svn:wc:ra_dav:version-url
Eshop/.svn/all-wcprops:svn:wc:ra_dav:version-url
Eshop/.svn/all-wcprops:svn:wc:ra_dav:version-url
Eshop/.svn/all-wcprops:svn:wc:ra_dav:version-url
Eshop/.svn/all-wcprops:svn:wc:ra_dav:version-url
Eshop/.svn/all-wcprops:svn:wc:ra_dav:version-url
Eshop/.svn/all-wcprops:svn:wc:ra_dav:version-url
Eshop/.svn/all-wcprops:svn:wc:ra_dav:version-url
Eshop/.svn/all-wcprops:svn:wc:ra_dav:version-url
Eshop/.svn/tmp/tempfile.tmp:    my($isbn,$ean,$isbn10,$isbn13) = $search->isbn_forms;
Eshop/.svn/tmp/tempfile.tmp:	return $self->mechanize(new WWW::Mechanize,$ean);
Eshop/.svn/tmp/tempfile.tmp:	my $link = $self->cover_link($mech,$ean);
Eshop/.svn/tmp/tempfile.tmp:	my $url = ref $link ? $link->url_abs : $link;
Eshop/.svn/tmp/tempfile.tmp:	my $bibinfo = Obalky::BibInfo->new_from_ean($ean); # zname jen EAN
Eshop/.svn/tmp/tempfile.tmp:	my $media = Obalky::Media->new_from_info({ cover_url => $url });
Eshop/.svn/tmp/tempfile.tmp:#	my $tree = HTML::TreeBuilder::XPath->new_from_content($mech->content());
Eshop/.svn/tmp/tempfile.tmp:	$mech->get("http://www.sckn.cz/ceskeknihy/html/vyhledavani.php?".
Eshop/.svn/tmp/tempfile.tmp:	my $tree = HTML::TreeBuilder::XPath->new_from_content($mech->content);
Eshop/.svn/tmp/tempfile.tmp:	my($review) = $tree->findnodes('//div[@class="titul_anotace"]');
Eshop/.svn/tmp/tempfile.tmp:		$info->{review_impact} = $Obalky::Media::REVIEW_ANNOTATION;
Eshop/.svn/tmp/tempfile.tmp:		$info->{review_html} = $review->as_text 
Eshop/.svn/tmp/tempfile.tmp:	my $cover_link = $mech->find_image( url_regex => qr/\/images\/.*jpe?g$/ );
Eshop/.svn/tmp/tempfile.tmp:	$info->{cover_url} = ref $cover_link ? $cover_link->url_abs : $cover_link;
Eshop/.svn/tmp/tempfile.tmp:	my $text = $tree->findnodes_as_string('//td');
Eshop/.svn/tmp/tempfile.tmp:	if($text =~ /Doporučená cena\:\s+([\s\d\.\,]+)\s*\,\-/) {
Eshop/.svn/tmp/tempfile.tmp:		$info->{price_vat} = sprintf("%d.%02d",$price_int,$price_cent);
Eshop/.svn/tmp/tempfile.tmp:		$info->{price_cur} = 'CZK';
Eshop/.svn/tmp/tempfile.tmp:		print "Cena: ".$info->{price_vat}."\n";
Eshop/.svn/tmp/tempfile.tmp:	my $bibinfo = Obalky::BibInfo->new_from_ean($ean); # zname jen EAN
Eshop/.svn/tmp/tempfile.tmp:	my $media = Obalky::Media->new_from_info( $info );
Eshop/.svn/tmp/tempfile.tmp:#	my $html = `wget -O - '$url/vyhledavani.php?isbn=$ean&odeslano=1'`;
Eshop/.svn/tmp/tempfile.tmp:#	$tree->dump;
Eshop/.svn/tmp/tempfile.tmp:	$mech->get("http://www.sckn.cz/ceskeknihy/html/vyhledavani.php?".
Eshop/.svn/tmp/tempfile.tmp:#	$mech->post( "http://www.sckn.cz/ceskeknihy/html/vyhledavani.php", 
Eshop/.svn/tmp/tempfile.tmp:	my $tree = HTML::TreeBuilder::XPath->new_from_content($mech->content);
Eshop/.svn/tmp/tempfile.tmp:	my($review) = $tree->findnodes('//div[@class="titul_anotace"]');
Eshop/.svn/tmp/tempfile.tmp:#	print $review->as_text."\n" if $review;
Eshop/.svn/tmp/tempfile.tmp:#	my($cover) = $tree->findnodes('//img[@class="obalka"]');
Eshop/.svn/tmp/tempfile.tmp:	print $mech->find_image( url_regex => qr/\/images\/.*jpe?g$/ )."\n";
Eshop/.svn/tmp/tempfile.tmp:	return $mech->find_image( url_regex => qr/\/images\/.*jpe?g$/ );
Eshop/.svn/tmp/tempfile.tmp:__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/.svn/tmp/tempfile.tmp:	$mech->get( "http://www.martinus.sk/" );
Eshop/.svn/tmp/tempfile.tmp:	$mech->submit_form(form_number => 1, 
Eshop/.svn/tmp/tempfile.tmp:	return unless($mech->content() =~ /Bol n/); # @found == 1
Eshop/.svn/tmp/tempfile.tmp:	$mech->follow_link( url_regex => qr/uItem/, class => "titlelist" );
Eshop/.svn/tmp/tempfile.tmp:	return $mech->find_link( url_regex => qr/data\/tovar/ );
Eshop/.svn/tmp/tempfile.tmp:__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/.svn/tmp/tempfile.tmp:	my $length = 25-12+length($ean);
Eshop/.svn/tmp/tempfile.tmp:	open(NC,"| nc www.kosmas.cz 80 > /tmp/.post-kosmas-$$") or die;
Eshop/.svn/tmp/tempfile.tmp:Content-Type: application/x-www-form-urlencoded
Eshop/.svn/tmp/tempfile.tmp:Content-Length: $length
Eshop/.svn/tmp/tempfile.tmp:	open(TMP,"<","/tmp/.post-kosmas-$$") or die;
Eshop/.svn/tmp/tempfile.tmp:	close(TMP); unlink "/tmp/.post-kosmas-$$";
Eshop/.svn/tmp/tempfile.tmp:	$mech->get( $url );
Eshop/.svn/tmp/tempfile.tmp:#	$mech->submit_form(form_number => 2, fields => 
Eshop/.svn/tmp/tempfile.tmp:#	print $mech->content; exit;
Eshop/.svn/tmp/tempfile.tmp:#	return if($mech->content() =~ /nebyl bohu/);
Eshop/.svn/tmp/tempfile.tmp:	return $mech->find_image( url_regex => qr/kosmas.cz\/obalky\// );
Eshop/.svn/tmp/tempfile.tmp:#__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/.svn/tmp/tempfile.5.tmp:__PACKAGE__->register(crawl => 1, license => 'free',
Eshop/.svn/tmp/tempfile.5.tmp:	my $yyyymm = $from->strftime("%Y%m");
Eshop/.svn/tmp/tempfile.5.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params({ nbn => $nbn });
Eshop/.svn/tmp/tempfile.5.tmp:	my $res = $g_zoom->search_pqf('@attr 1=12 '.$nbn); sleep 1; # !
Eshop/.svn/tmp/tempfile.5.tmp:	if($res->size() != 1) {
Eshop/.svn/tmp/tempfile.5.tmp:		warn "$nbn: multiple $nbn records in NKC??\n" if($res->size() > 1);
Eshop/.svn/tmp/tempfile.5.tmp:		warn "$nbn: record not found in NKC!\n" unless($res->size());
Eshop/.svn/tmp/tempfile.5.tmp:	my $rec = $res->record(0) or die;
Eshop/.svn/tmp/tempfile.5.tmp:#	warn Dumper($rec->render(), $rec);
Eshop/.svn/tmp/tempfile.5.tmp:	my $marc = decode_utf8($rec->render("charset=windows-1250"));
Eshop/.svn/tmp/tempfile.5.tmp:	$bibinfo->oclc($1) if($f035a =~ /(\d+)/);
Eshop/.svn/tmp/tempfile.5.tmp:	$bibinfo->isbn($1) if($f020a =~ /([\d\-xX]+)\s*.*$/);
Eshop/.svn/tmp/tempfile.5.tmp:	$bibinfo->issn($1) if($f022a =~ /([\d\-xX]+)\s*.*$/);
Eshop/.svn/tmp/tempfile.5.tmp:	$bibinfo->{title}   = $1         if($f245a =~ /^(.*?)\s*[\/\:]/);
Eshop/.svn/tmp/tempfile.5.tmp:	$bibinfo->{authors} = [ $f100a ] if($f100a);
Eshop/.svn/tmp/tempfile.5.tmp:	$bibinfo->{year}    = $1         if($f260c =~ /(\d{4})/);
Eshop/.svn/tmp/tempfile.5.tmp:	my $permalink = "http://sigma.nkp.cz/F?func=find-c&ccl_term=sys="
Eshop/.svn/tmp/tempfile.5.tmp:	my $ua = LWP::UserAgent->new; $ua->timeout(10);
Eshop/.svn/tmp/tempfile.5.tmp:	$ua->proxy('http', 'http://www.obalkyknih.cz:3374/');
Eshop/.svn/tmp/tempfile.5.tmp:	my $dir_url = $self->get_dir_url($subdir,$from);
Eshop/.svn/tmp/tempfile.5.tmp:	my $response_dir = $ua->get($dir_url);
Eshop/.svn/tmp/tempfile.5.tmp:	my $dirlist = $response_dir->decoded_content || '';
Eshop/.svn/tmp/tempfile.5.tmp:		last if($Obalky::Config::DEBUG and $DEBUG_LIMIT-- == 0);
Eshop/.svn/tmp/tempfile.5.tmp:		next if($seen->{$ext}->{$nbn}++); #?
Eshop/.svn/tmp/tempfile.5.tmp:		my $response_file = $ua->mirror($dir_url.$file,"$TMP_DIR/$file");
Eshop/.svn/tmp/tempfile.5.tmp:		unless($response_file->is_success) {
Eshop/.svn/tmp/tempfile.5.tmp:			warn "Failed to download $dir_url$file: ".$response->status_line;
Eshop/.svn/tmp/tempfile.5.tmp:		my($bibinfo,$product_url) = $self->nbn_to_bibinfo($nbn);
Eshop/.svn/tmp/tempfile.5.tmp:			$media->{cover_url} = $dir_url.$file;
Eshop/.svn/tmp/tempfile.5.tmp:			$media->{cover_tmpfile} = "$TMP_DIR/$file";
Eshop/.svn/tmp/tempfile.5.tmp:			$media->{tocpdf_url} = $dir_url.$file;
Eshop/.svn/tmp/tempfile.5.tmp:			$media->{tocpdf_tmpfile} = "$TMP_DIR/$file";
Eshop/.svn/tmp/tempfile.5.tmp:			$media->{toctext} = Obalky::Tools->slurp("$TMP_DIR/$file");
Eshop/.svn/tmp/tempfile.5.tmp:		push @list, [$bibinfo, Obalky::Media->new_from_info($media), 
Eshop/.svn/tmp/tempfile.5.tmp:	push @list, $self->download("contents",$storable,$from,$to,$TMP_DIR);
Eshop/.svn/tmp/tempfile.5.tmp:	push @list, $self->download("covers",  $storable,$from,$to,$TMP_DIR);
Eshop/.svn/tmp/tempfile.2.tmp:__PACKAGE__->register(crawl => 0, license => 'free',
Eshop/.svn/tmp/tempfile.2.tmp:	my $number = $1 if("$from" =~ /^2009-04-2(\d)T/);
Eshop/.svn/tmp/tempfile.2.tmp:	die "$from - nezname cislo?" unless(defined $number);
Eshop/.svn/tmp/tempfile.2.tmp:	open(LIST,"$LIST-$number") or die;
Eshop/.svn/tmp/tempfile.2.tmp:		my $obj13 = eval { Business::ISBN->new($ean12."0"); };
Eshop/.svn/tmp/tempfile.2.tmp:		$obj13->fix_checksum;
Eshop/.svn/tmp/tempfile.2.tmp:		my $bibinfo = Obalky::BibInfo->new_from_ean($obj13->as_string);
Eshop/.svn/tmp/tempfile.2.tmp:		next unless(-f "$DIR/$file");
Eshop/.svn/tmp/tempfile.2.tmp:		my $media = Obalky::Media->new_from_info(
Eshop/.svn/tmp/tempfile.2.tmp:							$bibinfo->to_some_param;
Eshop/.svn/tmp/tempfile.3.tmp:__PACKAGE__->register(crawl => 1, license => 'free',
Eshop/.svn/tmp/tempfile.3.tmp:	my $yyyymm = $from->strftime("%Y%m");
Eshop/.svn/tmp/tempfile.3.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params({ nbn => $nbn });
Eshop/.svn/tmp/tempfile.3.tmp:	my $res = $g_zoom->search_pqf('@attr 1=12 '.$nbn);
Eshop/.svn/tmp/tempfile.3.tmp:	if($res->size() != 1) {
Eshop/.svn/tmp/tempfile.3.tmp:		warn "$nbn: multiple $nbn records in NKC??\n" if($res->size() > 1);
Eshop/.svn/tmp/tempfile.3.tmp:		warn "$nbn: record not found in NKC!\n" unless($res->size());
Eshop/.svn/tmp/tempfile.3.tmp:	my $rec = $res->record(0) or die;
Eshop/.svn/tmp/tempfile.3.tmp:#	warn Dumper($rec->render(), $rec);
Eshop/.svn/tmp/tempfile.3.tmp:	foreach(split(/\n/,decode_utf8($rec->render()))) {
Eshop/.svn/tmp/tempfile.3.tmp:	$bibinfo->oclc($1) if($f035a =~ /(\d+)/);
Eshop/.svn/tmp/tempfile.3.tmp:	$bibinfo->isbn($1) if($f020a =~ /([\d\-xX]+)\s*.*$/);
Eshop/.svn/tmp/tempfile.3.tmp:	$bibinfo->issn($1) if($f022a =~ /([\d\-xX]+)\s*.*$/);
Eshop/.svn/tmp/tempfile.3.tmp:	$bibinfo->{title}   = $1 if($f245a =~ /^(.*?)\s*[\/\:]/);
Eshop/.svn/tmp/tempfile.3.tmp:	$bibinfo->{authors} = $1 if($f100a);
Eshop/.svn/tmp/tempfile.3.tmp:	$bibinfo->{year}    = $1 if($f260c =~ /(\d{4})/);
Eshop/.svn/tmp/tempfile.3.tmp:	my $permalink = "http://sigma.nkp.cz/F?func=find-c&ccl_term=sys="
Eshop/.svn/tmp/tempfile.3.tmp:	my $ua = LWP::UserAgent->new; $ua->timeout(10);
Eshop/.svn/tmp/tempfile.3.tmp:	$ua->proxy('http', 'http://www.obalkyknih.cz:3374/');
Eshop/.svn/tmp/tempfile.3.tmp:	my $dir_url = $self->get_dir_url($subdir,$from);
Eshop/.svn/tmp/tempfile.3.tmp:	my $response_dir = $ua->get($dir_url);
Eshop/.svn/tmp/tempfile.3.tmp:	my $dirlist = $response_dir->decoded_content || '';
Eshop/.svn/tmp/tempfile.3.tmp:#		last unless($DEBUG_LIMIT--);
Eshop/.svn/tmp/tempfile.3.tmp:		next if($seen->{$ext}->{$nbn}++); #?
Eshop/.svn/tmp/tempfile.3.tmp:		my $response_file = $ua->mirror($dir_url.$file,"$TMP_DIR/$file");
Eshop/.svn/tmp/tempfile.3.tmp:		my($bibinfo,$product_url) = $self->nbn_to_bibinfo($nbn);
Eshop/.svn/tmp/tempfile.3.tmp:			$media->{cover_url} = $dir_url.$file;
Eshop/.svn/tmp/tempfile.3.tmp:			$media->{cover_tmpfile} = "$TMP_DIR/$file";
Eshop/.svn/tmp/tempfile.3.tmp:			$media->{tocpdf_url} = $dir_url.$file;
Eshop/.svn/tmp/tempfile.3.tmp:			$media->{tocpdf_tmpfile} = "$TMP_DIR/$file";
Eshop/.svn/tmp/tempfile.3.tmp:			$media->{toctext} = Obalky::Tools->slurp("$TMP_DIR/$file");
Eshop/.svn/tmp/tempfile.3.tmp:		push @list, [$bibinfo, Obalky::Media->new_from_info($media), 
Eshop/.svn/tmp/tempfile.3.tmp:	push @list, $self->download("contents",$storable,$from,$to,$TMP_DIR);
Eshop/.svn/tmp/tempfile.3.tmp:	push @list, $self->download("covers",  $storable,$from,$to,$TMP_DIR);
Eshop/.svn/tmp/tempfile.4.tmp:__PACKAGE__->register(crawl => 1, license => 'free',
Eshop/.svn/tmp/tempfile.4.tmp:	my $yyyymm = $from->strftime("%Y%m");
Eshop/.svn/tmp/tempfile.4.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params({ nbn => $nbn });
Eshop/.svn/tmp/tempfile.4.tmp:	my $res = $g_zoom->search_pqf('@attr 1=12 '.$nbn);
Eshop/.svn/tmp/tempfile.4.tmp:	if($res->size() != 1) {
Eshop/.svn/tmp/tempfile.4.tmp:		warn "$nbn: multiple $nbn records in NKC??\n" if($res->size() > 1);
Eshop/.svn/tmp/tempfile.4.tmp:		warn "$nbn: record not found in NKC!\n" unless($res->size());
Eshop/.svn/tmp/tempfile.4.tmp:	my $rec = $res->record(0) or die;
Eshop/.svn/tmp/tempfile.4.tmp:#	warn Dumper($rec->render(), $rec);
Eshop/.svn/tmp/tempfile.4.tmp:	foreach(split(/\n/,decode_utf8($rec->render()))) {
Eshop/.svn/tmp/tempfile.4.tmp:	$bibinfo->oclc($1) if($f035a =~ /(\d+)/);
Eshop/.svn/tmp/tempfile.4.tmp:	$bibinfo->isbn($1) if($f020a =~ /([\d\-xX]+)\s*.*$/);
Eshop/.svn/tmp/tempfile.4.tmp:	$bibinfo->issn($1) if($f022a =~ /([\d\-xX]+)\s*.*$/);
Eshop/.svn/tmp/tempfile.4.tmp:	$bibinfo->{title}   = $1 if($f245a =~ /^(.*?)\s*[\/\:]/);
Eshop/.svn/tmp/tempfile.4.tmp:	$bibinfo->{authors} = $1 if($f100a);
Eshop/.svn/tmp/tempfile.4.tmp:	$bibinfo->{year}    = $1 if($f260c =~ /(\d{4})/);
Eshop/.svn/tmp/tempfile.4.tmp:	my $permalink = "http://sigma.nkp.cz/F?func=find-c&ccl_term=sys="
Eshop/.svn/tmp/tempfile.4.tmp:	my $ua = LWP::UserAgent->new; $ua->timeout(10);
Eshop/.svn/tmp/tempfile.4.tmp:	$ua->proxy('http', 'http://www.obalkyknih.cz:3374/');
Eshop/.svn/tmp/tempfile.4.tmp:	my $dir_url = $self->get_dir_url($subdir,$from);
Eshop/.svn/tmp/tempfile.4.tmp:	my $response_dir = $ua->get($dir_url);
Eshop/.svn/tmp/tempfile.4.tmp:	my $dirlist = $response_dir->decoded_content || '';
Eshop/.svn/tmp/tempfile.4.tmp:#		last unless($DEBUG_LIMIT--);
Eshop/.svn/tmp/tempfile.4.tmp:		next if($seen->{$ext}->{$nbn}++); #?
Eshop/.svn/tmp/tempfile.4.tmp:		my $response_file = $ua->mirror($dir_url.$file,"$TMP_DIR/$file");
Eshop/.svn/tmp/tempfile.4.tmp:		my($bibinfo,$product_url) = $self->nbn_to_bibinfo($nbn);
Eshop/.svn/tmp/tempfile.4.tmp:			$media->{cover_url} = $dir_url.$file;
Eshop/.svn/tmp/tempfile.4.tmp:			$media->{cover_tmpfile} = "$TMP_DIR/$file";
Eshop/.svn/tmp/tempfile.4.tmp:			$media->{tocpdf_url} = $dir_url.$file;
Eshop/.svn/tmp/tempfile.4.tmp:			$media->{tocpdf_tmpfile} = "$TMP_DIR/$file";
Eshop/.svn/tmp/tempfile.4.tmp:			$media->{toctext} = Obalky::Tools->slurp("$TMP_DIR/$file");
Eshop/.svn/tmp/tempfile.4.tmp:		push @list, [$bibinfo, Obalky::Media->new_from_info($media), 
Eshop/.svn/tmp/tempfile.4.tmp:	push @list, $self->download("contents",$storable,$from,$to,$TMP_DIR);
Eshop/.svn/tmp/tempfile.4.tmp:	push @list, $self->download("covers",  $storable,$from,$to,$TMP_DIR);
Eshop/.svn/text-base/SimpleURL.pm.svn-base:	my($isbn,$ean,$isbn10,$isbn13) = $bibinfo->isbn_forms;
Eshop/.svn/text-base/SimpleURL.pm.svn-base:	foreach my $url ($self->url) {
Eshop/.svn/text-base/SimpleURL.pm.svn-base:		my $filename = Eshop->fetch_image($isbn13,$url,$dir);
Eshop/.svn/text-base/SimpleURL.pm.svn-base:    	my $bibinfo = Obalky::BibInfo->new_from_ean($ean); # zname jen EAN
Eshop/.svn/text-base/SimpleURL.pm.svn-base:		my $media = Obalky::Media->new_from_info({ cover_url => $url, 
Eshop/.svn/text-base/SimpleURL.pm.svn-base:#sub url { "http://ec2.images-amazon.com/images/P/0123456789.01.L.jpg" }
Eshop/.svn/text-base/SimpleURL.pm.svn-base:#__PACKAGE__->register(harvest => 1, license => 'licensed',
Eshop/.svn/text-base/SimpleURL.pm.svn-base:#__PACKAGE__->register(harvest => 1, license => 'licensed',
Eshop/.svn/text-base/SimpleURL.pm.svn-base:__PACKAGE__->register(harvest => 0, license => 'licensed', czech => 1,
Eshop/.svn/text-base/SimpleURL.pm.svn-base:#__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/.svn/text-base/SimpleURL.pm.svn-base:#__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/.svn/text-base/Amazon.pm.svn-base:__PACKAGE__->register(harvest => 1, # test => '9780071544337',
Eshop/.svn/text-base/Amazon.pm.svn-base:my $ua = Net::Amazon->new(
Eshop/.svn/text-base/Amazon.pm.svn-base:    my($isbn,$ean,$isbn10,$isbn13) = $search->isbn_forms;
Eshop/.svn/text-base/Amazon.pm.svn-base:	my $response = $ua->search(isbn => $isbn13) if($isbn13);
Eshop/.svn/text-base/Amazon.pm.svn-base:	return () unless($response and $response->is_success());
Eshop/.svn/text-base/Amazon.pm.svn-base:	my $book = eval { $response->properties };
Eshop/.svn/text-base/Amazon.pm.svn-base:	my $authors = join(";",grep defined $_, $book->authors);
Eshop/.svn/text-base/Amazon.pm.svn-base:    my $bibinfo = Obalky::BibInfo->new_from_params({
Eshop/.svn/text-base/Amazon.pm.svn-base:		isbn => $isbn13, title => $book->title, authors => $authors,
Eshop/.svn/text-base/Amazon.pm.svn-base:		year => $book->year });
Eshop/.svn/text-base/Amazon.pm.svn-base:	$media_info->{cover_url} = $book->ImageUrlLarge;
Eshop/.svn/text-base/Amazon.pm.svn-base:	if($book->OurPrice =~ /^\$([\d\.]+)$/) {
Eshop/.svn/text-base/Amazon.pm.svn-base:		$media_info->{price_vat} = $1;
Eshop/.svn/text-base/Amazon.pm.svn-base:		$media_info->{price_cur} = "USD";
Eshop/.svn/text-base/Amazon.pm.svn-base:	if(exists $book->{ProductDescription}) {
Eshop/.svn/text-base/Amazon.pm.svn-base:		$media_info->{review_html} = $book->{ProductDescription};
Eshop/.svn/text-base/Amazon.pm.svn-base:		$media_info->{review_impact} = $Obalky::Media::REVIEW_ANNOTATION;
Eshop/.svn/text-base/Amazon.pm.svn-base:	my $review_set = $book->review_set;
Eshop/.svn/text-base/Amazon.pm.svn-base:	my $rating = $review_set->average_customer_rating; # 0..5
Eshop/.svn/text-base/Amazon.pm.svn-base:		# fix: productdescription -- anno BUT rating -- customer rating
Eshop/.svn/text-base/Amazon.pm.svn-base:		$media_info->{review_rating} = int(20.0*$rating);
Eshop/.svn/text-base/Amazon.pm.svn-base:		$media_info->{review_impact} ||= $Obalky::Media::REVIEW_COMMENT;
Eshop/.svn/text-base/Amazon.pm.svn-base:#		$media_info->{$review_set->average_customer_rating;
Eshop/.svn/text-base/Amazon.pm.svn-base:#	foreach my $review ($review_set ? $review_set->reviews : ()) {
Eshop/.svn/text-base/Amazon.pm.svn-base:#		$media_info->{rating_count} = $review->total_votes;
Eshop/.svn/text-base/Amazon.pm.svn-base:#		$media_info->{rating_sum} = 
Eshop/.svn/text-base/Amazon.pm.svn-base:#				int($review->rating * $review->total_votes);
Eshop/.svn/text-base/Amazon.pm.svn-base:    my $media = Obalky::Media->new_from_info( $media_info );
Eshop/.svn/text-base/Amazon.pm.svn-base:	my $product_url = $book->url;#{DetailPageURL};
Eshop/.svn/text-base/OpenLibrary.pm.svn-base:__PACKAGE__->register(harvest => 1, # test => '9780071544337',
Eshop/.svn/text-base/OpenLibrary.pm.svn-base:    my($isbn,$ean,$isbn10,$isbn13) = $search->isbn_forms;
Eshop/.svn/text-base/OpenLibrary.pm.svn-base:    my $bibinfo = Obalky::BibInfo->new_from_params({
Eshop/.svn/text-base/OpenLibrary.pm.svn-base:		isbn => $isbn13, title => $book->title, authors => $authors,
Eshop/.svn/text-base/OpenLibrary.pm.svn-base:		year => $book->year });
Eshop/.svn/text-base/OpenLibrary.pm.svn-base:	$media_info->{cover_url} = $book->ImageUrlLarge;
Eshop/.svn/text-base/OpenLibrary.pm.svn-base:    my $media = Obalky::Media->new_from_info( $media_info );
Eshop/.svn/text-base/OpenLibrary.pm.svn-base:	my $product_url = $book->url;
Eshop/.svn/text-base/TOC.pm.svn-base:__PACKAGE__->register(crawl => 0, license => 'free',
Eshop/.svn/text-base/TOC.pm.svn-base:	my $yyyymm = $from->strftime("%Y%m");
Eshop/.svn/text-base/TOC.pm.svn-base:	my $bibinfo = Obalky::BibInfo->new_from_params({ nbn => $nbn });
Eshop/.svn/text-base/TOC.pm.svn-base:	$bibinfo->oclc($1) if($f035a =~ /(\d+)/);
Eshop/.svn/text-base/TOC.pm.svn-base:	$bibinfo->isbn($1) if($f020a =~ /([\d\-xX]+)\s*.*$/);
Eshop/.svn/text-base/TOC.pm.svn-base:	$bibinfo->issn($1) if($f022a =~ /([\d\-xX]+)\s*.*$/);
Eshop/.svn/text-base/TOC.pm.svn-base:	$bibinfo->{nbn}     = $1         if($f015a =~ /([cnb\d\-xX]+)\s*.*$/);
Eshop/.svn/text-base/TOC.pm.svn-base:	$bibinfo->{title}   = $1         if($f245a =~ /^([^\/\:]+)/);
Eshop/.svn/text-base/TOC.pm.svn-base:	$bibinfo->{authors} = [ $f100a ] if($f100a);
Eshop/.svn/text-base/TOC.pm.svn-base:	$bibinfo->{year}    = $1         if($f260c and $f260c =~ /(\d{4})/);
Eshop/.svn/text-base/TOC.pm.svn-base:	my $res = $g_zoom->search_pqf('@attr 1=12 '.$nbn); sleep 1; # !
Eshop/.svn/text-base/TOC.pm.svn-base:	#my $res = $g_zoom->search_pqf('@attr 1=1032 '.$nbn); sleep 1; # !
Eshop/.svn/text-base/TOC.pm.svn-base:	if($res->size() != 1) {
Eshop/.svn/text-base/TOC.pm.svn-base:		warn "$nbn: multiple $nbn records in NKC??\n" if($res->size() > 1);
Eshop/.svn/text-base/TOC.pm.svn-base:##		warn "$nbn: record not found in NKC!\n" unless($res->size());
Eshop/.svn/text-base/TOC.pm.svn-base:	my $rec = $res->record(0) or die;
Eshop/.svn/text-base/TOC.pm.svn-base:	my $marc = decode_utf8($rec->render("charset=windows-1250"));
Eshop/.svn/text-base/TOC.pm.svn-base:	return $pkg->parse_marc($nbn,$marc, 'http://aleph.nkp.cz'.
Eshop/.svn/text-base/TOC.pm.svn-base:			'/F?func=find-c&ccl_term=sys=$&local_base=NKC01');
Eshop/.svn/text-base/TOC.pm.svn-base:	my $ua = LWP::UserAgent->new; $ua->timeout(10);
Eshop/.svn/text-base/TOC.pm.svn-base:	$ua->proxy('http', 'http://www.obalkyknih.cz:3374/');
Eshop/.svn/text-base/TOC.pm.svn-base:	my $dir_url = $self->get_dir_url($subdir,$from);
Eshop/.svn/text-base/TOC.pm.svn-base:	my $response_dir = $ua->get($dir_url);
Eshop/.svn/text-base/TOC.pm.svn-base:	my $dirlist = $response_dir->decoded_content || '';
Eshop/.svn/text-base/TOC.pm.svn-base:		my $day = int($from->strftime("%d")) % 10;
Eshop/.svn/text-base/TOC.pm.svn-base:		last if(defined $DEBUG_LIMIT and $DEBUG_LIMIT-- == 0);
Eshop/.svn/text-base/TOC.pm.svn-base:		next if($seen->{$ext}->{$nbn}++); #?
Eshop/.svn/text-base/TOC.pm.svn-base:		my $response_file = $ua->mirror($dir_url.$file,"$TMP_DIR/$file");
Eshop/.svn/text-base/TOC.pm.svn-base:		unless($response_file->is_success) {
Eshop/.svn/text-base/TOC.pm.svn-base:			warn "Failed to download $dir_url$file: ".$response->status_line;
Eshop/.svn/text-base/TOC.pm.svn-base:		my($bibinfo,$product_url) = $self->nbn_to_bibinfo($nbn);
Eshop/.svn/text-base/TOC.pm.svn-base:			$media->{cover_url} = $dir_url.$file;
Eshop/.svn/text-base/TOC.pm.svn-base:			$media->{cover_tmpfile} = "$TMP_DIR/$file";
Eshop/.svn/text-base/TOC.pm.svn-base:			$media->{tocpdf_url} = $dir_url.$file;
Eshop/.svn/text-base/TOC.pm.svn-base:			$media->{tocpdf_tmpfile} = "$TMP_DIR/$file";
Eshop/.svn/text-base/TOC.pm.svn-base:			$media->{toctext} = Obalky::Tools->slurp(
Eshop/.svn/text-base/TOC.pm.svn-base:						"$TMP_DIR/$file","windows-1250");
Eshop/.svn/text-base/TOC.pm.svn-base:		push @list, [$bibinfo, Obalky::Media->new_from_info($media), 
Eshop/.svn/text-base/TOC.pm.svn-base:#		last if($ENV{DEBUG} and $bibinfo->{nbn} eq 'cnb000356585');
Eshop/.svn/text-base/TOC.pm.svn-base:	push @list, $self->download("covers",  $storable,$from,$to,$TMP_DIR);
Eshop/.svn/text-base/TOC.pm.svn-base:	push @list, $self->download("contents",$storable,$from,$to,$TMP_DIR);
Eshop/.svn/text-base/SCKN.pm.svn-base:__PACKAGE__->register(crawl => 1, license => 'licensed', title => 'SCKN' );
Eshop/.svn/text-base/SCKN.pm.svn-base:#	my $id = $storable->{last_id}; 
Eshop/.svn/text-base/SCKN.pm.svn-base:#	# 500 dozadu - pokud by pridali obalku?
Eshop/.svn/text-base/SCKN.pm.svn-base:#	$id = $id ? ($id > 500 ? $id-500 : 1) : 1;
Eshop/.svn/text-base/SCKN.pm.svn-base:	my $id = $storable->{last_id} || 1;
Eshop/.svn/text-base/SCKN.pm.svn-base:		my $csv = Text::CSV::Encoded->new({ sep_char => ';', 
Eshop/.svn/text-base/SCKN.pm.svn-base:		open(CSV,"wget -q -O - '$listurl' |") or die;
Eshop/.svn/text-base/SCKN.pm.svn-base:		my $colref = $csv->getline(*CSV);
Eshop/.svn/text-base/SCKN.pm.svn-base:		$csv->column_names(@$colref);
Eshop/.svn/text-base/SCKN.pm.svn-base:		while(my $row = $csv->getline_hr(*CSV)) {
Eshop/.svn/text-base/SCKN.pm.svn-base:			my $isbn = $row->{'ISBN 1'}; 
Eshop/.svn/text-base/SCKN.pm.svn-base:			$isbn =~ s/\-//g;
Eshop/.svn/text-base/SCKN.pm.svn-base:			my $bibinfo = Obalky::BibInfo->new_from_params({ isbn => $isbn });
Eshop/.svn/text-base/SCKN.pm.svn-base:			$bibinfo->{title} = $row->{Podtitul} ? $row->{"N\x{e1}zev"}."; ".
Eshop/.svn/text-base/SCKN.pm.svn-base:									$row->{Podtitul} : $row->{"N\x{e1}zev"};
Eshop/.svn/text-base/SCKN.pm.svn-base:			$bibinfo->{authors} = [split(/\s\-\s/,$row->{'Autor'})];
Eshop/.svn/text-base/SCKN.pm.svn-base:			$bibinfo->{year} = $1 if($row->{"Datum vydani"} 
Eshop/.svn/text-base/SCKN.pm.svn-base:										=~ /^(\d\d\d\d)\-/);
Eshop/.svn/text-base/SCKN.pm.svn-base:			my $cover_file = "/tmp/.sckn-$$-$isbn";
Eshop/.svn/text-base/SCKN.pm.svn-base:			system("wget -q -O '$cover_file' '$cover_url'");
Eshop/.svn/text-base/SCKN.pm.svn-base:				cover_url     => -s $cover_file ? $cover_url  : undef,
Eshop/.svn/text-base/SCKN.pm.svn-base:				cover_tmpfile => -s $cover_file ? $cover_file : undef,
Eshop/.svn/text-base/SCKN.pm.svn-base:				price_vat => $row->{'Cena'},
Eshop/.svn/text-base/SCKN.pm.svn-base:				review_html => $row->{'Anotace'},
Eshop/.svn/text-base/SCKN.pm.svn-base:			my $media = Obalky::Media->new_from_info($media_info);
Eshop/.svn/text-base/SCKN.pm.svn-base:			## print "$id $isbn: ".(-s $cover_file)." ".$row->{'ISBN souboru'}."\n";
Eshop/.svn/text-base/SCKN.pm.svn-base:		$csv->eof or $csv->error_diag();
Eshop/.svn/text-base/SCKN.pm.svn-base:	$storable->{last_id} = $id;
Eshop/.svn/text-base/SCKN.pm.svn-base:	# nejak od do zjisti ID zaznamu - na zacatku 1..35000
Eshop/.svn/text-base/SCKN.pm.svn-base:#"Gilbert, Guy";"Křížová cesta";"";"978-80-7195-441-5";"";"";"Karmelitánské nakladatelství";"0";"39";"B";"49";"";"český";"Křížová cesta se může stát nejen zajímavou inspirací k meditaci a modlitbě, ale také pěkným dárkem.";"100x145";"";"";"Kubů, Anna";"Martinková, Ludmila";"";"Miklošková, Lucie";"";"";"1.";"tisk Grafotechna Print, s.r.o., Praha";"";"francouzský";"";"";"";"";"";"";"9788071954415";"2010-01-29"
Eshop/.svn/text-base/SCKN.pm.svn-base:#	my $since = today()-50;
Eshop/.svn/text-base/SCKN.pm.svn-base:#	my $listURL = $self->baseURL.sprintf("%02d-%02d-%04d",
Eshop/.svn/text-base/SCKN.pm.svn-base:#					$since->day,$since->month,$since->year);
Eshop/.svn/text-base/SCKN.pm.svn-base:#    my $ua = LWP::UserAgent->new; $ua->timeout(10);
Eshop/.svn/text-base/SCKN.pm.svn-base:#    my $list_response = $ua->get($listURL);
Eshop/.svn/text-base/SCKN.pm.svn-base:#    my $list_csv = decode("windows-1250",$list_response->content);
Eshop/.svn/text-base/SCKN.pm.svn-base:	my $csv = Text::CSV::Encoded->new({ sep_char => ';', 
Eshop/.svn/text-base/SCKN.pm.svn-base:	open(CSV,"wget -q -O - '$listURL' |") or die;
Eshop/.svn/text-base/SCKN.pm.svn-base:	$colref = $csv->getline(*CSV);
Eshop/.svn/text-base/SCKN.pm.svn-base:	$csv->column_names(@$colref);
Eshop/.svn/text-base/Legacy.pm.svn-base:__PACKAGE__->register(crawl => 0, license => 'free', display => 0,
Eshop/.svn/text-base/Legacy.pm.svn-base:	my $number = $1 if("$from" =~ /^2009-04-2(\d)T/);
Eshop/.svn/text-base/Legacy.pm.svn-base:	die "$from - nezname cislo?" unless(defined $number);
Eshop/.svn/text-base/Legacy.pm.svn-base:	open(LIST,"$LIST-$number") or die;
Eshop/.svn/text-base/Legacy.pm.svn-base:		my $obj13 = eval { Business::ISBN->new($ean12."0"); };
Eshop/.svn/text-base/Legacy.pm.svn-base:		$obj13->fix_checksum;
Eshop/.svn/text-base/Legacy.pm.svn-base:		my $bibinfo = Obalky::BibInfo->new_from_ean($obj13->as_string);
Eshop/.svn/text-base/Legacy.pm.svn-base:		next unless(-f "$DIR/$file");
Eshop/.svn/text-base/Legacy.pm.svn-base:		my $media = Obalky::Media->new_from_info(
Eshop/.svn/text-base/Legacy.pm.svn-base:							$bibinfo->to_some_param;
Eshop/.svn/text-base/Mechanize.pm.svn-base:    my($isbn,$ean,$isbn10,$isbn13) = $search->isbn_forms;
Eshop/.svn/text-base/Mechanize.pm.svn-base:	return $self->mechanize(new WWW::Mechanize,$ean);
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my($link,$product_url) = $self->cover_link($mech,$ean);
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $url = ref $link ? $link->url_abs : $link;
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $bibinfo = Obalky::BibInfo->new_from_ean($ean); # zname jen EAN
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $media = Obalky::Media->new_from_info({ cover_url => $url });
Eshop/.svn/text-base/Mechanize.pm.svn-base:#	my $tree = HTML::TreeBuilder::XPath->new_from_content($mech->content());
Eshop/.svn/text-base/Mechanize.pm.svn-base:# www.sckn.cz/ceskeknihy/ -> rozsirene vyhledavani -> Od DEN Do DEN, ISBN 9
Eshop/.svn/text-base/Mechanize.pm.svn-base:# -> http://www.sckn.cz/ceskeknihy/html/csv_txt_export_hledani.php?dotaz=15674,22305,23255,32050,32051,32052,32053,32054,32055,
Eshop/.svn/text-base/Mechanize.pm.svn-base:# -> stahnout ISBN a detaily
Eshop/.svn/text-base/Mechanize.pm.svn-base:# SCKN - cca 6.000 obalek
Eshop/.svn/text-base/Mechanize.pm.svn-base:	$mech->get("http://www.sckn.cz/ceskeknihy/html/vyhledavani.php?".
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $product_url = $mech->base;
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $tree = HTML::TreeBuilder::XPath->new_from_content($mech->content);
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my($review) = $tree->findnodes('//div[@class="titul_anotace"]');
Eshop/.svn/text-base/Mechanize.pm.svn-base:		$info->{review_impact} = $Obalky::Media::REVIEW_ANNOTATION;
Eshop/.svn/text-base/Mechanize.pm.svn-base:		$info->{review_html} = $review->as_text 
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $cover_link = $mech->find_image( url_regex => qr/\/images\/.*jpe?g$/ );
Eshop/.svn/text-base/Mechanize.pm.svn-base:	$info->{cover_url} = ref $cover_link ? $cover_link->url_abs : $cover_link;
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $text = $tree->findnodes_as_string('//td');
Eshop/.svn/text-base/Mechanize.pm.svn-base:	if($text =~ /Doporučená cena\:\s+([\s\d\.\,]+)\s*\,\-/) {
Eshop/.svn/text-base/Mechanize.pm.svn-base:		$info->{price_vat} = sprintf("%d.%02d",$price_int,$price_cent);
Eshop/.svn/text-base/Mechanize.pm.svn-base:		$info->{price_cur} = 'CZK';
Eshop/.svn/text-base/Mechanize.pm.svn-base:		print "Cena: ".$info->{price_vat}."\n";
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $bibinfo = Obalky::BibInfo->new_from_ean($ean); # zname jen EAN
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $media = Obalky::Media->new_from_info( $info );
Eshop/.svn/text-base/Mechanize.pm.svn-base:#	my $html = `wget -O - '$url/vyhledavani.php?isbn=$ean&odeslano=1'`;
Eshop/.svn/text-base/Mechanize.pm.svn-base:#	$tree->dump;
Eshop/.svn/text-base/Mechanize.pm.svn-base:	$mech->get("http://www.sckn.cz/ceskeknihy/html/vyhledavani.php?".
Eshop/.svn/text-base/Mechanize.pm.svn-base:#	$mech->post( "http://www.sckn.cz/ceskeknihy/html/vyhledavani.php", 
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $tree = HTML::TreeBuilder::XPath->new_from_content($mech->content);
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my($review) = $tree->findnodes('//div[@class="titul_anotace"]');
Eshop/.svn/text-base/Mechanize.pm.svn-base:#	print $review->as_text."\n" if $review;
Eshop/.svn/text-base/Mechanize.pm.svn-base:#	my($cover) = $tree->findnodes('//img[@class="obalka"]');
Eshop/.svn/text-base/Mechanize.pm.svn-base:	print $mech->find_image( url_regex => qr/\/images\/.*jpe?g$/ )."\n";
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $cover_url = $mech->find_image( url_regex => qr/\/images\/.*jpe?g$/ );
Eshop/.svn/text-base/Mechanize.pm.svn-base:	return $cover_url ? ($cover_url,$mech->base) : ();
Eshop/.svn/text-base/Mechanize.pm.svn-base:__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/.svn/text-base/Mechanize.pm.svn-base:	return; # dasabled since 201107 - pada na follow_link nize..
Eshop/.svn/text-base/Mechanize.pm.svn-base:	$mech->get( "http://www.martinus.sk/" );
Eshop/.svn/text-base/Mechanize.pm.svn-base:	$mech->submit_form(form_number => 1, 
Eshop/.svn/text-base/Mechanize.pm.svn-base:	return unless($mech->content() =~ /Bol n/); # @found == 1
Eshop/.svn/text-base/Mechanize.pm.svn-base:	$mech->follow_link( url_regex => qr/uItem/, class => "titlelist" );
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $product_url = $mech->base;
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $cover_url = $mech->find_link( url_regex => qr/data\/tovar/ );
Eshop/.svn/text-base/Mechanize.pm.svn-base:__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $length = 25-12+length($ean);
Eshop/.svn/text-base/Mechanize.pm.svn-base:	open(NC,"| nc www.kosmas.cz 80 > /tmp/.post-kosmas-$$") or die;
Eshop/.svn/text-base/Mechanize.pm.svn-base:Content-Type: application/x-www-form-urlencoded
Eshop/.svn/text-base/Mechanize.pm.svn-base:Content-Length: $length
Eshop/.svn/text-base/Mechanize.pm.svn-base:	open(TMP,"<","/tmp/.post-kosmas-$$") or die;
Eshop/.svn/text-base/Mechanize.pm.svn-base:	close(TMP); unlink "/tmp/.post-kosmas-$$";
Eshop/.svn/text-base/Mechanize.pm.svn-base:	$mech->get( $url );
Eshop/.svn/text-base/Mechanize.pm.svn-base:#	$mech->submit_form(form_number => 2, fields => 
Eshop/.svn/text-base/Mechanize.pm.svn-base:#	print $mech->content; exit;
Eshop/.svn/text-base/Mechanize.pm.svn-base:#	return if($mech->content() =~ /nebyl bohu/);
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $cover_url = $mech->find_image( url_regex => qr/kosmas.cz\/obalky\// );
Eshop/.svn/text-base/Mechanize.pm.svn-base:	return $cover_url ? ($cover_url, $mech->base) : ();
Eshop/.svn/text-base/Mechanize.pm.svn-base:#__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/.svn/text-base/Mechanize.pm.svn-base:    my($isbn,$ean,$isbn10,$isbn13) = $search->isbn_forms;
Eshop/.svn/text-base/Mechanize.pm.svn-base:	return $self->mechanize(new WWW::Mechanize,$ean);
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $date = $tm->mday."-".$tm->mon."-".$tm->year;
Eshop/.svn/text-base/Mechanize.pm.svn-base:	my $feeds = DB->resultset('User')->get_xmlfeeds();
Eshop/.svn/text-base/Mechanize.pm.svn-base:			if(-f "/tmp/.harvest/Zbozi-cache/$date/$feed5/out") {#Denni cache
Eshop/.svn/text-base/Mechanize.pm.svn-base:				open(XML,"</tmp/.harvest/Zbozi-cache/$date/$feed5/out");
Eshop/.svn/text-base/Mechanize.pm.svn-base:				eval {$mech->get($feed);};
Eshop/.svn/text-base/Mechanize.pm.svn-base:				$xml_content = $mech->content;
Eshop/.svn/text-base/Mechanize.pm.svn-base:				$xml_content =~ s/windows-1250/utf-8/ if($feed =~ /fragment/);
Eshop/.svn/text-base/Mechanize.pm.svn-base:				$xml_content =~ s/iso-8859-2/utf-8/ if($feed =~ /knihy.abz.cz/);
Eshop/.svn/text-base/Mechanize.pm.svn-base:				unless(-d "/tmp/.harvest/Zbozi-cache/$date/") {
Eshop/.svn/text-base/Mechanize.pm.svn-base:					rmtree("/tmp/.harvest/Zbozi-cache/");
Eshop/.svn/text-base/Mechanize.pm.svn-base:				mkpath("/tmp/.harvest/Zbozi-cache/$date/$feed5/") or die;
Eshop/.svn/text-base/Mechanize.pm.svn-base:				open(XML,">/tmp/.harvest/Zbozi-cache/$date/$feed5/out") or die $!."/tmp/.harvest/Zbozi-cache/$date/$feed5/out";
Eshop/.svn/text-base/Mechanize.pm.svn-base:			$eans =~ s/-//g;
Eshop/.svn/text-base/Mechanize.pm.svn-base:				my $warn = "Chybný formát XML" if($@ =~ /not well-formed/);
Eshop/.svn/text-base/Mechanize.pm.svn-base:			my $titles = $xml->{SHOPITEM};
Eshop/.svn/text-base/Mechanize.pm.svn-base:				my $id = $tit->{EAN} || $tit->{ISBN};
Eshop/.svn/text-base/Mechanize.pm.svn-base:					my $file = $tit->{CONTENTURL} || $tit->{IMGURL};
Eshop/.svn/text-base/Mechanize.pm.svn-base:					my $title = $tit->{PRODUCT};
Eshop/.svn/text-base/Mechanize.pm.svn-base:					$title =~ s/ - SLEVA \d+\%//g;
Eshop/.svn/text-base/Mechanize.pm.svn-base:					$info->{price_vat} = $tit->{PRICE_VAT};
Eshop/.svn/text-base/Mechanize.pm.svn-base:					$info->{price_cur} = 'CZK';
Eshop/.svn/text-base/Mechanize.pm.svn-base:					$info->{review_impact} = $Obalky::Media::REVIEW_ANNOTATION;
Eshop/.svn/text-base/Mechanize.pm.svn-base:					$info->{review_html} = $tit->{DESCRIPTION};
Eshop/.svn/text-base/Mechanize.pm.svn-base:					system ("wget $file -P $temp >/dev/null") and die $!;
Eshop/.svn/text-base/Mechanize.pm.svn-base:					if($tit->{TOC}) {
Eshop/.svn/text-base/Mechanize.pm.svn-base:						my $pages = $tit->{TOC}->{PAGEURL};
Eshop/.svn/text-base/Mechanize.pm.svn-base:							system ("wget $page -P /tmp/.harvest/$ean >/dev/null") and die $!;							
Eshop/.svn/text-base/Mechanize.pm.svn-base:		    	        $info->{cover_url} = $file;
Eshop/.svn/text-base/Mechanize.pm.svn-base:				        $info->{cover_tmpfile} = "$tempfile";
Eshop/.svn/text-base/Mechanize.pm.svn-base:				        $info->{tocpdf_url} = $file;
Eshop/.svn/text-base/Mechanize.pm.svn-base:				        $info->{tocpdf_tmpfile} = "$tempfile";
Eshop/.svn/text-base/Mechanize.pm.svn-base:				        $info->{toctext} = Obalky::Tools->slurp(
Eshop/.svn/text-base/Mechanize.pm.svn-base:				                  "$tempfile","windows-1250");
Eshop/.svn/text-base/Mechanize.pm.svn-base:						$info->{tocpdf_url} = $firsttocfile;
Eshop/.svn/text-base/Mechanize.pm.svn-base:				        $info->{tocpdf_tmpfile} = "$tocfile";
Eshop/.svn/text-base/Mechanize.pm.svn-base:				    my $bibinfo = Obalky::BibInfo->new_from_params({
Eshop/.svn/text-base/Mechanize.pm.svn-base:						authors=> $tit->{AUTHORS}, year => $tit->{ROKVYDANI} });
Eshop/.svn/text-base/Mechanize.pm.svn-base:					my $media = Obalky::Media->new_from_info( $info );
Eshop/.svn/text-base/Mechanize.pm.svn-base:__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/.svn/text-base/SKAT.pm.svn-base:##    my $seenfile = '/tmp/.obalky-skat';
Eshop/.svn/text-base/SKAT.pm.svn-base:###	  my $seenfile = '/tmp/.obalky-skat-'.$from->strftime('%F');
Eshop/.svn/text-base/SKAT.pm.svn-base:	my $oai = Net::OAI::Harvester->new(baseURL => $self->baseURL);
Eshop/.svn/text-base/SKAT.pm.svn-base:	my $records = $oai->listAllRecords(
Eshop/.svn/text-base/SKAT.pm.svn-base:					metadataPrefix => $self->metadataPrefix,
Eshop/.svn/text-base/SKAT.pm.svn-base:					metadataHandler => $self->metadataHandler, 
Eshop/.svn/text-base/SKAT.pm.svn-base:					set => $self->recordSet,
Eshop/.svn/text-base/SKAT.pm.svn-base:					from => $from->ymd, 'until' => $to->ymd);
Eshop/.svn/text-base/SKAT.pm.svn-base:	while ( my $record = $records->next() ) {
Eshop/.svn/text-base/SKAT.pm.svn-base:        my $meta = $record->metadata();
Eshop/.svn/text-base/SKAT.pm.svn-base:		## print $meta->{id}.":".$meta->{x00}."\n";
Eshop/.svn/text-base/SKAT.pm.svn-base:		$meta->{url} = $1 if($meta->{x00} =~ /(http\S+)/);
Eshop/.svn/text-base/SKAT.pm.svn-base:		$meta->{url} =~ s/^(.*kanzelsberger.*)(\/m\/m\_)/$1\//;
Eshop/.svn/text-base/SKAT.pm.svn-base:		warn $meta->{id}.": cover URL missing\n" 
Eshop/.svn/text-base/SKAT.pm.svn-base:						if($meta->{id} and not $meta->{url});
Eshop/.svn/text-base/SKAT.pm.svn-base:		next unless($meta->{id} and $meta->{url});
Eshop/.svn/text-base/SKAT.pm.svn-base:##		next if($seen->{$meta->{id}}++);
Eshop/.svn/text-base/SKAT.pm.svn-base:		my $url = $self->fixurl($meta->{id},$meta->{url});
Eshop/.svn/text-base/SKAT.pm.svn-base:		my $bibinfo = Obalky::BibInfo->new_from_params(
Eshop/.svn/text-base/SKAT.pm.svn-base:						{ isbn => $meta->{isbn} });
Eshop/.svn/text-base/SKAT.pm.svn-base:		my $media = Obalky::Media->new_from_info({ cover_url => $url });
Eshop/.svn/text-base/SKAT.pm.svn-base:__PACKAGE__->register(crawl => 0, license => 'licensed', title => 'SKAT' );
Eshop/.svn/text-base/SKAT.pm.svn-base:		"31520" => "http://www.ok-litomerice.cz/clavius/",
Eshop/.svn/text-base/SKAT.pm.svn-base:		"32520" => "http://lanius.kmp.plzen-city.cz/",
Eshop/.svn/text-base/SKAT.pm.svn-base:# http://www.vkta.cz/obalky/l.dll?verb=ListRecords&from=2008-09-10&until=2008-09-30&metadataPrefix=unimarc&set=OBA
Eshop/.svn/text-base/Static.pm.svn-base:	my($isbn,$ean,$isbn10,$isbn13) = $search->isbn_forms;
Eshop/.svn/text-base/Static.pm.svn-base:	my $product_url = "http://grr.ics.muni.cz/stuff/ISBN_978-80-7203-884-8.JPEG";
Eshop/.svn/text-base/Static.pm.svn-base:	my $media = Obalky::Media->new_from_info({
Eshop/.svn/text-base/Static.pm.svn-base:    my $bibinfo = Obalky::BibInfo->new_from_ean($ean); # zname jen EAN
Eshop/.svn/text-base/Static.pm.svn-base:__PACKAGE__->register(harvest => 1, license => 'licensed', czech => 1,
Eshop/.svn/text-base/Static.pm.svn-base:	display => 0, title => 'obalky-test', test => '9788072038848' );
Eshop/.svn/text-base/Upload.pm.svn-base:# Interni "eShop" -- data nahrana na obalkyknih.cz
Eshop/.svn/text-base/Upload.pm.svn-base:__PACKAGE__->register(license => 'free', czech => 1, display => 0,
Eshop/.svn/text-base/Upload.pm.svn-base:	title => 'obalky-legacy', test => '9788072038848' );
Eshop/.svn/entries:2011-06-22T19:35:35.405441Z
Eshop/.svn/entries:has-props
Eshop/.svn/entries:svn:special svn:externals svn:needs-lock
Eshop/.svn/entries:49789afe-7772-4492-8243-1a4b1d9f4dda
Eshop/.svn/entries:2009-10-18T06:46:54.000000Z
Eshop/.svn/entries:2009-10-18T06:48:37.735128Z
Eshop/.svn/entries:has-props
Eshop/.svn/entries:2009-10-18T06:46:54.000000Z
Eshop/.svn/entries:2009-10-18T06:48:37.735128Z
Eshop/.svn/entries:2011-06-22T19:33:16.000000Z
Eshop/.svn/entries:2011-06-22T19:35:35.405441Z
Eshop/.svn/entries:2011-07-26T17:42:13.000000Z
Eshop/.svn/entries:2011-10-12T15:53:43.030645Z
Eshop/.svn/entries:2010-04-10T20:11:09.000000Z
Eshop/.svn/entries:2011-10-12T15:53:43.030645Z
Eshop/.svn/entries:2009-10-18T06:46:54.000000Z
Eshop/.svn/entries:2009-10-18T06:48:37.735128Z
Eshop/.svn/entries:has-props
Eshop/.svn/entries:2009-10-17T14:43:47.000000Z
Eshop/.svn/entries:2009-10-16T20:10:37.701417Z
Eshop/.svn/entries:has-props
Eshop/.svn/entries:2010-07-07T12:01:08.000000Z
Eshop/.svn/entries:2010-11-03T10:01:16.742646Z
Eshop/.svn/entries:2009-10-17T14:43:47.000000Z
Eshop/.svn/entries:2009-10-16T20:10:37.701417Z
Eshop/.svn/entries:2011-11-21T14:58:56.000000Z
Eshop/.svn/entries:2011-11-21T15:00:48.264904Z
Eshop.pm:	return $Obalky::Config::WWW_URL."/img/logo/".$eshop->name.".gif";
Eshop.pm:	$eshop{$eshop}->{name} = $1;
Eshop.pm:	$eshop{$eshop}->{found} = 0;
Eshop.pm:	$eshop{$eshop}->{fails} = 0;
Eshop.pm:	$eshop{$eshop}->{fetch} = 0;
Eshop.pm:	$eshop{$eshop}->{display} = 1 unless(defined $eshop{$eshop}->{display});
Eshop.pm:	my $ean = $eshop->{test};
Eshop.pm:	return Obalky::BibInfo->new_from_params({ ean => $ean });
Eshop.pm:sub name { shift->{name} };
Eshop.pm:	return $eshop->{harvest} ? 1 : 0;
Eshop.pm:#	my $czech = $bibinfo->is_czech;
Eshop.pm:		system("wget -q -O '$dir/$filename' '$url'");
Eshop.pm:	if(-f $dir."/".$filename and -s $dir."/".$filename > 1000) {
Eshop.pm:	foreach(grep $eshop{$_}->{crawl}, keys %eshop) {
Eshop.pm:		my $name = $eshop{$_}->{eshop};
Eshop.pm:	my @order = ($ean13 and 0 ) ? #$pkg->is_czech($ean13)) ? 
Eshop.pm:	foreach(grep $eshop{$_}->{harvest}, (@order,keys %eshop)) {
Eshop.pm:		my $name = $eshop{$_}->{eshop};
Obalky/Media.pm:	$media->{price_vat} = $object->price_vat;
Obalky/Media.pm:	$media->{price_cur} = $object->price_cur;
Obalky/Media.pm:#	$media->{rating}    = $object->rating;
Obalky/Media.pm:		#year => $param->{year},
Obalky/Media.pm:	map $media->{$_} = $info->{$_}, grep defined $info->{$_}, @keys;
Obalky/Media.pm:	my $book = $product->book;
Obalky/Media.pm:	# vytvor cover jen pokud je novy/lisi-se
Obalky/Media.pm:	my $cover_url = $media->{cover_url};
Obalky/Media.pm:		my $tmp = $media->{cover_tmpfile};
Obalky/Media.pm:			my $TMP_DIR = "/tmp/.obalky-media"; mkdir $TMP_DIR;
Obalky/Media.pm:			$tmp = Obalky::Tools->wget_to_file(
Obalky/Media.pm:						$cover_url, "$TMP_DIR/cover-".$product->id);
Obalky/Media.pm:		$cover = DB->resultset('Cover')->create_from_file($book,$product,$tmp);
Obalky/Media.pm:		$cover->update({ orig_url => $cover_url }) if($cover);
Obalky/Media.pm:		$product->update({ cover => $cover });
Obalky/Media.pm:	my $toc_text = $media->{toctext};
Obalky/Media.pm:	my $toc_url  = $media->{tocpdf_url};
Obalky/Media.pm:		$toc = DB->resultset('Toc')->find_or_create(
Obalky/Media.pm:			my $tmp = $media->{tocpdf_tmpfile};
Obalky/Media.pm:				Obalky::Tools->slurp($tmp) : Obalky::Tools->wget($toc_url);
Obalky/Media.pm:			$toc->set_pdf($toc_url,$content,$tmp);
Obalky/Media.pm:			$toc->update({ full_text => $toc_text });
Obalky/Media.pm:		$product->update({ toc => $toc });
Obalky/Media.pm:		$book->update({ toc => $toc });
Obalky/Media.pm:	if($media->{review_html} or $media->{review_rating}) {
Obalky/Media.pm:		die unless(defined $media->{review_impact});
Obalky/Media.pm:#		$review = DB->resultset('Review')->find_or_create(
Obalky/Media.pm:		my $review = eval { DB->resultset('Review')->create({ 
Obalky/Media.pm:			html_text => $media->{review_html},
Obalky/Media.pm:			rating => $media->{review_rating},
Obalky/Media.pm:			impact => $media->{review_impact} 
Obalky/Media.pm:		$book->recalc_rating;
Obalky/Media.pm:		$book->recalc_review;
Obalky/Media.pm:	if($media->{price_vat}) {
Obalky/Media.pm:		die unless($media->{price_cur});
Obalky/Media.pm:		$product->update({ price_vat => $media->{price_vat},
Obalky/Media.pm:						   price_cur => $media->{price_cur} });
Obalky/Media.pm:	my($vat,$cur) = ($media->{price_vat}, $media->{price_cur});
Obalky/View/TT.pm:Obalky::View::TT - Catalyst TT View
Obalky/View/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/View/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/View/.svn/text-base/TT.pm.svn-base:Obalky::View::TT - Catalyst TT View
Obalky/View/.svn/entries:2008-08-15T18:37:32.453957Z
Obalky/View/.svn/entries:svn:special svn:externals svn:needs-lock
Obalky/View/.svn/entries:49789afe-7772-4492-8243-1a4b1d9f4dda
Obalky/View/.svn/entries:2009-09-29T06:31:41.000000Z
Obalky/View/.svn/entries:2008-08-15T18:37:32.453957Z
Obalky/Tools.pm:	my $res = $ua->get($url);
Obalky/Tools.pm:	die $url.": ".$res->status_line unless($res->is_success);
Obalky/Tools.pm:	return $res->content if($res->is_success);
Obalky/Tools.pm:	my $ua = LWP::UserAgent->new;
Obalky/Tools.pm:	my $res = $ua->mirror($url,$file);
Obalky/Tools.pm:	return ($res and $res->is_success) ? $file : undef;
Obalky/Tools.pm:	my $sizecmd = "/usr/bin/identify -format '\%wx\%h' '$file' $DEVNULL";
Obalky/Tools.pm:#	my $ctx = new MD5; $ctx->reset();
Obalky/Tools.pm:#	$ctx->addfile(FILE);
Obalky/Tools.pm:#	return $ctx->hexdigest();
Obalky/Tools.pm:#	return $mem->get($id->to_string);
Obalky/Tools.pm:#	$mem->set($id->to_string,$cover->id);
Obalky/Model/DB.pm:__PACKAGE__->config(
Obalky/Model/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/Model/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/Model/.svn/text-base/DB.pm.svn-base:__PACKAGE__->config(
Obalky/Model/.svn/entries:2009-10-08T12:29:57.257222Z
Obalky/Model/.svn/entries:svn:special svn:externals svn:needs-lock
Obalky/Model/.svn/entries:49789afe-7772-4492-8243-1a4b1d9f4dda
Obalky/Model/.svn/entries:2009-10-08T09:47:46.000000Z
Obalky/Model/.svn/entries:2009-10-08T12:29:57.257222Z
Obalky/Model/.svn/entries:has-props
Obalky/Config.pm:our $DEBUG = -e "$ROOT_DIR/debug" ? 1 : 0;
Obalky/BibInfo-issn.pm:Obalky::BibInfo - zpracovani (zejmena) identifikatoru knizky
Obalky/BibInfo-issn.pm:#    my $object = My::Module->new();
Obalky/BibInfo-issn.pm:#    print $object->as_string;
Obalky/BibInfo-issn.pm:PREFIX ::= [a-z]+
Obalky/BibInfo-issn.pm:EAN ::= [0-9]{12}[0-9X] /* pripadne s pomlckami */
Obalky/BibInfo-issn.pm:ISBN ::= [0-9]{9}[0-9X] /* pripadne s pomlckami */
Obalky/BibInfo-issn.pm:978-123-4-56789-X
Obalky/BibInfo-issn.pm:123-4-56789-X
Obalky/BibInfo-issn.pm:	$bibinfo->{ean13} = $object->ean13 if(defined $object->ean13);
Obalky/BibInfo-issn.pm:	$bibinfo->{oclc} = $object->oclc   if(defined $object->oclc);
Obalky/BibInfo-issn.pm:	$bibinfo->{nbn}  = $object->nbn    if(defined $object->nbn);
Obalky/BibInfo-issn.pm:	$bibinfo->{title} = $object->title if(defined $object->title);
Obalky/BibInfo-issn.pm:	my $authors = $object->authors;
Obalky/BibInfo-issn.pm:	$bibinfo->{authors} = [split(/\;/,$authors)] if(defined $authors);
Obalky/BibInfo-issn.pm:	$bibinfo->{year} = $object->year if(defined $object->year);
Obalky/BibInfo-issn.pm:		if(defined $new->{$key} and not defined $old->{$key}) {
Obalky/BibInfo-issn.pm:			$old->{$key} = $new->{$key};
Obalky/BibInfo-issn.pm:	return $a->ean13 ne $b->ean13 if($a->ean13 and $b->ean13);
Obalky/BibInfo-issn.pm:	return $a->oclc  ne $b->occl  if($a->oclc  and $b->oclc );
Obalky/BibInfo-issn.pm:	return $a->nbn   ne $b->nbn   if($a->nbn   and $b->nbn  );
Obalky/BibInfo-issn.pm:	$id->{nbn} = $value if(defined $value);
Obalky/BibInfo-issn.pm:	return $id->{nbn};
Obalky/BibInfo-issn.pm:	$id->{oclc} = $value if(defined $value);
Obalky/BibInfo-issn.pm:	return $id->{oclc};
Obalky/BibInfo-issn.pm:	$id->{ean13} = $value if(defined $value);
Obalky/BibInfo-issn.pm:	return $id->{ean13};
Obalky/BibInfo-issn.pm:	return $id->ean($isbn);
Obalky/BibInfo-issn.pm:	return $id->ean($issn);
Obalky/BibInfo-issn.pm:		$ean =~ s/\-//g; 
Obalky/BibInfo-issn.pm:        	my $obj = Business::ISSN->new($ean);
Obalky/BibInfo-issn.pm:        	my $format = $obj->as_string;
Obalky/BibInfo-issn.pm:        	$id->{ean13} = $id->isbn_to_ean13($format);
Obalky/BibInfo-issn.pm:			return $id->{ean13};
Obalky/BibInfo-issn.pm:        	$obj = Business::ISBN->new($ean);
Obalky/BibInfo-issn.pm:        	my $format = $obj->as_string;
Obalky/BibInfo-issn.pm:        	$id->{ean13} = $id->isbn_to_ean13($format);
Obalky/BibInfo-issn.pm:			return $id->{ean13};
Obalky/BibInfo-issn.pm:			$id->{ean13} = $ean;
Obalky/BibInfo-issn.pm:			return $id->to_isbn;
Obalky/BibInfo-issn.pm:	return $id->to_isbn;
Obalky/BibInfo-issn.pm:	return $pkg->new_from_params({ ean => $ean});
Obalky/BibInfo-issn.pm:	my $eanvalue = $string; $eanvalue =~ s/\-//g;
Obalky/BibInfo-issn.pm:				/^(isbn|issn|ean)?\_?(97.)?(\d{8,9}[0-9X])$/i);
Obalky/BibInfo-issn.pm:			my($key,$value) = ($1,$2) if(/^([a-z]+)[\_\:\=]?(.+)$/);
Obalky/BibInfo-issn.pm:	return $pkg->new_from_params({ oclc => $oclc, nbn => $nbn, ean => $ean});
Obalky/BibInfo-issn.pm:	my $ean = $param->{ean} || $param->{isbn};
Obalky/BibInfo-issn.pm:	$ean13 = $pkg->isbn_to_ean13($ean) if($ean);
Obalky/BibInfo-issn.pm:	$ean13 = $param->{ean13} if($param->{ean13});
Obalky/BibInfo-issn.pm:	my $year = ($param->{year} and $param->{year} =~ /(\d{4})/) ? $1 : undef;
Obalky/BibInfo-issn.pm:	return unless($ean13 or $param->{oclc} or 
Obalky/BibInfo-issn.pm:				  $param->{nbn} or $param->{title}); 
Obalky/BibInfo-issn.pm:		oclc => $param->{oclc},
Obalky/BibInfo-issn.pm:		nbn => $param->{nbn},
Obalky/BibInfo-issn.pm:		title => $param->{title},
Obalky/BibInfo-issn.pm:		authors => $param->{authors}, # ujistit se, ze to je pole?
Obalky/BibInfo-issn.pm:	$object->update($id->save_to_hash());
Obalky/BibInfo-issn.pm:	map $hash->{$_} = $id->{$_}, grep $id->{$_}, qw/ean13 oclc nbn title year/;
Obalky/BibInfo-issn.pm:	$hash->{authors} = join(";",@{$id->{authors}}) if($id->{authors});
Obalky/BibInfo-issn.pm:    $isbn =~ s/\-//g; $isbn =~ s/^\s*//; $isbn =~ s/\s.*//;
Obalky/BibInfo-issn.pm:    $isbn =~ s/^.*?([0-9]{9,12}[0-9X]).*/$1/;
Obalky/BibInfo-issn.pm:	return $isbn if((not $obj or not $obj->is_valid) and ($isbn =~ /^977/) and (length($isbn) == 13));
Obalky/BibInfo-issn.pm:	my $obj = Business::ISBN->new($isbn);
Obalky/BibInfo-issn.pm:	$obj = Business::ISSN->new($isbn) unless($obj and $obj->is_valid);
Obalky/BibInfo-issn.pm:	return unless($obj and $obj->is_valid);
Obalky/BibInfo-issn.pm:	my $ean13 = $obj->as_isbn13->as_string;
Obalky/BibInfo-issn.pm:	$ean13 =~ s/\-//g;
Obalky/BibInfo-issn.pm:#	warn "$in -> $isbn -> $ean13\n";
Obalky/BibInfo-issn.pm:	return undef unless($id->{ean13});
Obalky/BibInfo-issn.pm:	return $id->{ean13};
Obalky/BibInfo-issn.pm:#    my $isbn = Business::ISBN->new($id->{ean13}) or return;
Obalky/BibInfo-issn.pm:#	return $isbn->as_isbn13->as_string;
Obalky/BibInfo-issn.pm:		push @out, $_."=".$id->{$_} if($id->{$_});
Obalky/BibInfo-issn.pm:	return $id->{ean13} ? "isbn=".$id->to_isbn : $id->to_params;
Obalky/BibInfo-issn.pm:	my $isbn = $id->to_isbn;
Obalky/BibInfo-issn.pm:	return $id->oclc ? $id->oclc : "NULL";
Obalky/BibInfo-issn.pm:		$ids{isbn} = $id->to_isbn;
Obalky/BibInfo-issn.pm:	return $id->{title} if($id->{title});
Obalky/BibInfo-issn.pm:	return "ISBN ".$id->to_isbn if($id->{ean13});
Obalky/BibInfo-issn.pm:	return "OCLC ".$id->oclc if($id->oclc);
Obalky/BibInfo-issn.pm:	return $id->to_some_param; # failback...
Obalky/BibInfo-issn.pm:		$ids{isbn} = $id->to_isbn;
Obalky/BibInfo-issn.pm:	my($isbn,$ean) = $id->isbn_forms;
Obalky/BibInfo-issn.pm:				 oclc => $id->oclc, nbn => $id->nbn };
Obalky/BibInfo-issn.pm:		my $value = $info->{$key} or next;
Obalky/BibInfo-issn.pm:			HTML::Tiny->entity_encode($value)."</$key>\n";
Obalky/BibInfo-issn.pm:	push @ids, {"name"=>"ISBN","value"=>$id->isbn} if($id->isbn);
Obalky/BibInfo-issn.pm:	push @ids, {"name"=>"ISBN","value"=>$id->issn} if($id->issn);
Obalky/BibInfo-issn.pm:	push @ids, {"name"=>"OCLC Number","value"=>$id->oclc} if($id->oclc);
Obalky/BibInfo-issn.pm:	push @ids, {"name"=>"NKP-NBN","value"=>$id->nbn} if($id->nbn);
Obalky/BibInfo-issn.pm:# je tato knizka ceska? undef -- nelze rict
Obalky/BibInfo-issn.pm:	my $ean13 = $id->ean13 or return;
Obalky/BibInfo-issn.pm:    eval { $obj13 = Business::ISBN->new($ean13); };
Obalky/BibInfo-issn.pm:    return $obj13->group_code eq '80' ? 1 : 0;
Obalky/BibInfo-issn.pm:	my $ean13 = $bibinfo->ean13;
Obalky/BibInfo-issn.pm:        $obj13 = Business::ISBN->new($ean13);
Obalky/BibInfo-issn.pm:        $isbn13 = $ean = $obj13->as_string; $isbn13 =~ s/\-//g;
Obalky/BibInfo-issn.pm:        my $obj10 = $obj13->as_isbn10;
Obalky/BibInfo-issn.pm:        $isbn10 = $isbn = $obj10->as_string; $isbn10 =~ s/\-//g;
Obalky/BibInfo-issn.pm:    return Obalky::Config->url($secure)."/view?".$bibinfo->to_some_param;
Obalky/BibInfo-issn.pm:	return "" unless $bibinfo->{authors};
Obalky/BibInfo-issn.pm:	my $last = pop @{$bibinfo->{authors}};
Obalky/BibInfo-issn.pm:	return $last || '' unless($bibinfo->{authors});
Obalky/BibInfo-issn.pm:	my $first = join(", ",@{$bibinfo->{authors}});
Obalky/BibInfo-issn.pm:Martin Sarfy - L<mailto:martin@sarfy.cz>
Obalky/Controller/Root.pm:#use encoding 'latin-2';
Obalky/Controller/Root.pm:#binmode(STDOUT,":encoding(latin-2)") or die;
Obalky/Controller/Root.pm:__PACKAGE__->config->{namespace} = '';
Obalky/Controller/Root.pm:Obalky::Controller::Root - Root Controller for Obalky
Obalky/Controller/Root.pm:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/Root.pm:	if($c->req->param('revive')) {
Obalky/Controller/Root.pm:		my $params = $c->req->body_params();
Obalky/Controller/Root.pm:			my $abuse = DB->resultset('Abuse')->find($id) or next;
Obalky/Controller/Root.pm:			my $book  = $abuse->book;
Obalky/Controller/Root.pm:			my $cover = $abuse->cover;
Obalky/Controller/Root.pm:				warn "Reverting ".$cover->id." in book ".$book->id."\n";
Obalky/Controller/Root.pm:				$book->update({ cover => $cover });
Obalky/Controller/Root.pm:			DB->resultset('Abuse')->search({ id => $id })->delete_all;
Obalky/Controller/Root.pm:	$c->stash->{abused} = [ DB->resultset('Abuse')->all ];
Obalky/Controller/Root.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Root.pm:	$c->stash->{libraries} = [ DB->resultset('Library')->all ];
Obalky/Controller/Root.pm:	# echo 'select user,fullname,library.code,library.name from upload,user,library where upload.user = user.id and user.library = library.id;'|mysql|sort|uniq -c
Obalky/Controller/Root.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Root.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Root.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Root.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Root.pm:	$c->stash->{covers} = DB->resultset('Cover')->count;
Obalky/Controller/Root.pm:	$c->stash->{tocs} = DB->resultset('Toc')->count;
Obalky/Controller/Root.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Root.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Root.pm:	my $value = $c->req->param('value');
Obalky/Controller/Root.pm:	$c->serve_static_file($Obalky::Config::WWW_DIR."/img/stars/$img.gif");
Obalky/Controller/Root.pm:    $c->response->content_type("text/plain");
Obalky/Controller/Root.pm:    $c->response->content_encoding("UTF-8");
Obalky/Controller/Root.pm:    foreach my $lib (DB->resultset('Library')->all) {
Obalky/Controller/Root.pm:        $c->response->write($lib->name."\n");
Obalky/Controller/Root.pm:	my($table,$id,$method) = @{$c->req->arguments};
Obalky/Controller/Root.pm:		$object = DB->resultset('Cover')->find($id);
Obalky/Controller/Root.pm:		$object = DB->resultset('Toc')->find($id);
Obalky/Controller/Root.pm:	my($mime,$content,$ext) = $object->get_file($method) if($object);
Obalky/Controller/Root.pm:		$c->response->status(404);
Obalky/Controller/Root.pm:		$c->response->body("File '$table/$id".($method ? "/$method":"").
Obalky/Controller/Root.pm:		$c->response->content_type($mime);
Obalky/Controller/Root.pm:		$c->response->headers->header( 'Content-Disposition' =>  # ????
Obalky/Controller/Root.pm:			"attachment;filename=$table-$id-$method.$ext") if($ext eq 'pdf');
Obalky/Controller/Root.pm:		$c->response->body($content);
Obalky/Controller/Root.pm:	my($user,$passwd) = ($c->req->param('email'),$c->req->param('password'));
Obalky/Controller/Root.pm:	my $return = $c->req->param('return');
Obalky/Controller/Root.pm:#	warn Dumper($c->models,$c->model('Obalky::AuthUser'));
Obalky/Controller/Root.pm:		if($c->authenticate({ login => $user, password => $passwd })) {
Obalky/Controller/Root.pm:			$c->res->redirect($return || "/index");
Obalky/Controller/Root.pm:#			warn "user ".Dumper($c->user->get('login'))." authenticated\n";
Obalky/Controller/Root.pm:			$c->stash->{error} = 
Obalky/Controller/Root.pm:				"Byl zadán neexistující e-mail nebo špatné heslo";
Obalky/Controller/Root.pm:#			$c->res->redirect('signup');
Obalky/Controller/Root.pm:#		$c->res->redirect('signup'); # login 
Obalky/Controller/Root.pm:	$c->stash->{email} = $user;
Obalky/Controller/Root.pm:	$c->stash->{password} = $passwd;
Obalky/Controller/Root.pm:	$c->stash->{'return'} = $return;
Obalky/Controller/Root.pm:	my $return = $c->req->param('return');
Obalky/Controller/Root.pm:	$c->logout();
Obalky/Controller/Root.pm:	$c->res->redirect($return || "/index");
Obalky/Controller/Root.pm:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/Root.pm:	$c->stash->{menu} = "browse";
Obalky/Controller/Root.pm:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/Root.pm:	my $file = $c->req->upload('file');
Obalky/Controller/Root.pm:	my $url  = $c->req->param('url');
Obalky/Controller/Root.pm:		login => scalar($c->user->get('login')),
Obalky/Controller/Root.pm:		unless($c->req->param('free')) {
Obalky/Controller/Root.pm:			$c->stash->{error} = "Nutno udělit souhlas s použitím.";
Obalky/Controller/Root.pm:				DB->resultset('Upload')->upload(undef,undef,$info) };
Obalky/Controller/Root.pm:			return $c->res->redirect("preview?batch=$batch") unless($@);
Obalky/Controller/Root.pm:			$c->stash->{error} = $@;
Obalky/Controller/Root.pm:	$c->stash->{url} = $url ? $url : "http://";
Obalky/Controller/Root.pm:	$c->stash->{menu} = "upload";
Obalky/Controller/Root.pm:	my $batch = $c->req->param('batch');
Obalky/Controller/Root.pm:	my @images = DB->resultset('Upload')->images($batch);
Obalky/Controller/Root.pm:	for(my $i=1;$i<@images;$i+=2) { $images[$i]->{odd} = 1 }
Obalky/Controller/Root.pm:	$c->stash->{batch} = $batch;
Obalky/Controller/Root.pm:	$c->stash->{menu} = "upload";
Obalky/Controller/Root.pm:#	warn "   thumb[0]: ",$images[0]." - ".$images[0]->thumbfile;
Obalky/Controller/Root.pm:	$c->stash->{images} = \@images;
Obalky/Controller/Root.pm:	$c->stash->{covers} = DB->resultset('Cover')->count;
Obalky/Controller/Root.pm:	$c->stash->{tocs} = DB->resultset('Toc')->count;
Obalky/Controller/Root.pm:	$c->stash->{recent} = DB->resultset('Cover')->recent(3,3);
Obalky/Controller/Root.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Root.pm:#	$c->stash->{books} = Obalky::Model::Book->count_all();
Obalky/Controller/Root.pm:	$c->stash->{books} = DB->resultset('Book')->count;
Obalky/Controller/Root.pm:	$c->stash->{recent} = DB->resultset('Cover')->recent(3,3);
Obalky/Controller/Root.pm:	$c->stash->{menu} = "about";
Obalky/Controller/Root.pm:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/Root.pm:	if($c->req->param('censor')) {
Obalky/Controller/Root.pm:		foreach my $param ($c->req->param()) {
Obalky/Controller/Root.pm:			next unless($c->req->param($param)); # ON
Obalky/Controller/Root.pm:			my $review = DB->resultset('Review')->find($id);
Obalky/Controller/Root.pm:			if($c->req->param("delete_$id")) {
Obalky/Controller/Root.pm:				$review->delete;
Obalky/Controller/Root.pm:				$review->update({ approved => $c->user->login });
Obalky/Controller/Root.pm:	$c->stash->{deleted} = $deleted;
Obalky/Controller/Root.pm:	$c->stash->{approved} = $approved;
Obalky/Controller/Root.pm:	my $month = $c->req->param('month') || 1;
Obalky/Controller/Root.pm:	$c->stash->{month} = $month;
Obalky/Controller/Root.pm:	$c->stash->{reviews} = [ DB->resultset('Review')->all_public($month) ];
Obalky/Controller/Root.pm:	$c->stash->{menu} = "upload";
Obalky/Controller/Root.pm:	my($library,$seance,$visitor) = Obalky->visit($c);
Obalky/Controller/Root.pm:	my $referer = $c->req->param('referer') || $c->req->referer;
Obalky/Controller/Root.pm:	if($c->req->param('report')) {
Obalky/Controller/Root.pm:		my $cover = DB->resultset('Cover')->find(
Obalky/Controller/Root.pm:							$c->req->param("cover"));
Obalky/Controller/Root.pm:		my $note = $c->req->param('note');
Obalky/Controller/Root.pm:		my $spamQuestion = $c->req->param('spamQuestion');
Obalky/Controller/Root.pm:		my $book = DB->resultset('Book')->find($c->req->param('book'));
Obalky/Controller/Root.pm:		my $abuse = DB->resultset('Abuse')->
Obalky/Controller/Root.pm:					abuse($book,$cover,$c->req->address,$referer,$note)
Obalky/Controller/Root.pm:		$c->stash->{error} = "Děkujeme za nahlášení, chybnou obálku se ".
Obalky/Controller/Root.pm:	if($c->req->param('review_add')) {
Obalky/Controller/Root.pm:		my $name    = $c->req->param('review_name');
Obalky/Controller/Root.pm:		my $book_id = $c->req->param('review_book');
Obalky/Controller/Root.pm:		my $text    = $c->req->param('review_text');
Obalky/Controller/Root.pm:		my $rating  = $c->req->param('review_rating');
Obalky/Controller/Root.pm:		my $book = DB->resultset('Book')->find($book_id) if($book_id);
Obalky/Controller/Root.pm:			my @reviews = $book->reviews;
Obalky/Controller/Root.pm:			$book->add_review($library,$visitor,{ 
Obalky/Controller/Root.pm:				html_text => $html, visitor_ip => $c->req->address,
Obalky/Controller/Root.pm:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,undef);
Obalky/Controller/Root.pm:	my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo) if($bibinfo);
Obalky/Controller/Root.pm:	my @books = $book ? ( $book->work ? $book->work->books : $book ) : ();
Obalky/Controller/Root.pm:		next unless($b1->tips);	
Obalky/Controller/Root.pm:		$b1->{tips_ids} = [];
Obalky/Controller/Root.pm:		foreach(split(/\s/,$b1->tips)) {
Obalky/Controller/Root.pm:			my $b2 = eval { DB->resultset('Book')->find($_) };
Obalky/Controller/Root.pm:			push @{$b1->{tips_ids}}, $b2 if($b2 and $b2->title);
Obalky/Controller/Root.pm:	$c->stash->{books}   = [ @books ];#\@info;
Obalky/Controller/Root.pm:	$c->stash->{referer} = $referer;
Obalky/Controller/Root.pm:	my $ip = $c->req->address; $ip =~ s/\.\d+$/.../;
Obalky/Controller/Root.pm:	$c->stash->{visitor_blurred_ip} = $ip;
Obalky/Controller/Root.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Root.pm:	if($c->req->param('signup')) {
Obalky/Controller/Root.pm:		eval { $signed = DB->resultset('User')->signup($c->req->params) };
Obalky/Controller/Root.pm:		$c->stash->{error} = $@ if($@);
Obalky/Controller/Root.pm:	$c->stash->{signed} = $signed;
Obalky/Controller/Root.pm:	$c->stash->{$_} = $c->req->param($_) 
Obalky/Controller/Root.pm:	$c->stash->{libopac} = $c->req->param('libopac') ?
Obalky/Controller/Root.pm:							$c->req->param('libopac') : "http://";
Obalky/Controller/Root.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Root.pm:	my $email = $c->req->param('email');
Obalky/Controller/Root.pm:	my $reset = $c->req->param('reset');
Obalky/Controller/Root.pm:	my $pass1 = $c->req->param('pass1');
Obalky/Controller/Root.pm:	my $pass2 = $c->req->param('pass2');
Obalky/Controller/Root.pm:		eval { $c->stash->{sent} = 
Obalky/Controller/Root.pm:			DB->resultset('User')->sendpassword($email) };
Obalky/Controller/Root.pm:		eval { $c->stash->{reseted} = 
Obalky/Controller/Root.pm:			DB->resultset('User')->resetpassword($reset,$pass1,$pass2) };
Obalky/Controller/Root.pm:	$c->stash->{error} = $@ if($@);
Obalky/Controller/Root.pm:	$c->stash->{'reset'} = $reset;
Obalky/Controller/Root.pm:	$c->stash->{email} = $email;
Obalky/Controller/Root.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Root.pm:	my $cloud = HTML::TagCloud->new;
Obalky/Controller/Root.pm:	open(LIST,"<utf8","/opt/obalky/doc/tags-655-c.txt") or die;
Obalky/Controller/Root.pm:		$cloud->add($text, "http://obalkyknih.cz/tag/$.", $count);
Obalky/Controller/Root.pm:#	$c->stash->{warning} = Dumper($c->models);
Obalky/Controller/Root.pm:	$c->stash->{tagcloud} = $cloud->html_and_css(50);
Obalky/Controller/Root.pm:	return $c->res->redirect("/login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/Root.pm:	my $batch = $c->req->param('batch');
Obalky/Controller/Root.pm:	foreach(keys %{$c->req->params}) {
Obalky/Controller/Root.pm:		$list->{$2}->{$1} = $c->req->param($_) if(/^(.+)\_(\d+)$/);
Obalky/Controller/Root.pm:	DB->resultset('Upload')->do_import($batch,$list);
Obalky/Controller/Root.pm:	$c->stash->{menu} = "upload";
Obalky/Controller/Root.pm:	#return $c->res->redirect("browse"); # s nejakym argumentem?
Obalky/Controller/Root.pm:	return $c->res->redirect("index"); # nebo podekovat?
Obalky/Controller/Root.pm:    return 1 if $c->response->status =~ /^3\d\d$/;
Obalky/Controller/Root.pm:    return 1 if $c->response->body;
Obalky/Controller/Root.pm:    unless ( $c->response->content_type ) {
Obalky/Controller/Root.pm:        $c->response->content_type('text/html; charset=utf-8');
Obalky/Controller/Root.pm:    if($c->stash->{menu}) {
Obalky/Controller/Root.pm:        my $menu = "menu_".$c->stash->{menu};
Obalky/Controller/Root.pm:        $c->stash->{$menu} = "menu_selected";
Obalky/Controller/Root.pm:#	warn "end() user: ".($c->user ? "ok: ".$c->user->get('login'):"fail")."\n";
Obalky/Controller/Root.pm:	$c->stash->{user} = $c->user ? $c->user->get('login') : undef;
Obalky/Controller/Root.pm:	$c->forward('Obalky::View::TT');	
Obalky/Controller/Util.pm:    $c->response->body('Matched Obalky::Controller::Main in Main.');
Obalky/Controller/Doc.pm:#	$c->stash->{books} = DB::Book->model->count;
Obalky/Controller/Doc.pm:#	$c->stash->{recent} = DB::Book->model->recent(3,3);
Obalky/Controller/Doc.pm:	$c->stash->{covers} = DB->resultset('Cover')->count;
Obalky/Controller/Doc.pm:	$c->stash->{tocs} = DB->resultset('Toc')->count; 
Obalky/Controller/Doc.pm:	$c->stash->{recent} = DB->resultset('Cover')->recent(3,3);
Obalky/Controller/Doc.pm:	$c->stash->{menu} = "index";
Obalky/Controller/Doc.pm:	$c->stash->{menu} = "doc";
Obalky/Controller/Doc.pm:    return 1 if $c->response->status =~ /^3\d\d$/;
Obalky/Controller/Doc.pm:    return 1 if $c->response->body;
Obalky/Controller/Doc.pm:    unless ( $c->response->content_type ) {
Obalky/Controller/Doc.pm:        $c->response->content_type('text/html; charset=utf-8');
Obalky/Controller/Doc.pm:    if($c->stash->{menu}) {
Obalky/Controller/Doc.pm:        my $menu = "menu_".$c->stash->{menu};
Obalky/Controller/Doc.pm:        $c->stash->{$menu} = "menu_selected";
Obalky/Controller/Doc.pm:	$c->forward('Obalky::View::TT');	
Obalky/Controller/API.pm:	$c->response->content_type("application/xml;charset=UTF-8");
Obalky/Controller/API.pm:	$c->response->headers->header('Content-disposition',
Obalky/Controller/API.pm:					"attachment;filename=toc-".today().".xml");
Obalky/Controller/API.pm:	binmode(STDOUT,"utf8"); # fakt skaredy hack.. :-(
Obalky/Controller/API.pm:	$c->response->print('<?xml version="1.0" encoding="utf-8" ?>'."\n");
Obalky/Controller/API.pm:	$c->response->print("<obalkyknih>\n");
Obalky/Controller/API.pm:	my $tocs = DB->resultset('Toc')->search;
Obalky/Controller/API.pm:	while(my $toc = $tocs->next) {
Obalky/Controller/API.pm:		$c->response->print($toc->to_xml);
Obalky/Controller/API.pm:	$c->response->print("</obalkyknih>\n");
Obalky/Controller/API.pm:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/API.pm:	$c->response->body("OK...");
Obalky/Controller/API.pm:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/API.pm:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/API.pm:	$c->response->body("OK...");
Obalky/Controller/API.pm:	my $this = from_json($c->req->param("book"));
Obalky/Controller/API.pm:	my $rating = $c->req->param("rating");
Obalky/Controller/API.pm:	my($library,$session,$visitor) = Obalky->visit($c);
Obalky/Controller/API.pm:	my $bibinfo = Obalky::BibInfo->new_from_params($this->{bibinfo});
Obalky/Controller/API.pm:	my $permalink = Obalky::Tools->fix_permalink($this->{permalink});
Obalky/Controller/API.pm:#		warn "Chybi minimalni udaje, ignoruju (lib=".($library?$library->code:"").")...\n";
Obalky/Controller/API.pm:	my($book,$record) = DB->resultset('Marc')->get_book_record(
Obalky/Controller/API.pm:	$book->add_review($library,$visitor,{ 
Obalky/Controller/API.pm:		visitor_name => $visitor->name, # asi nevyplneno...
Obalky/Controller/API.pm:		visitor_ip => $c->request->address,
Obalky/Controller/API.pm:	$book->enrich($this,$library,$permalink,$bibinfo,
Obalky/Controller/API.pm:							  $c->request->secure);
Obalky/Controller/API.pm:	$c->response->content_type("text/javascript;charset=UTF-8");
Obalky/Controller/API.pm:#	$c->response->content_encoding("UTF-8");
Obalky/Controller/API.pm:	$c->response->body("obalky.callback(".to_json([$this]).");\n");
Obalky/Controller/API.pm:	my $bibinfo = Obalky::BibInfo->new_from_params($this->{bibinfo});
Obalky/Controller/API.pm:	my $permalink = Obalky::Tools->fix_permalink($this->{permalink});
Obalky/Controller/API.pm:#		warn "Chybi minimalni udaje, ignoruju (lib=".($library?$library->code:"").",permalink=".($permalink||'').",bibinfo=".($bibinfo||'').")...\n";
Obalky/Controller/API.pm:    my($book,$record) = DB->resultset('Marc')->get_book_record(
Obalky/Controller/API.pm:	$book->enrich($this,$library,$permalink,$bibinfo,$c->request->secure);
Obalky/Controller/API.pm:	# zapis do DB #lastrequests [ visitor_id, session?, $book->id, $record->id ]
Obalky/Controller/API.pm:		DB->resultset('Lastrequests')->create({ 
Obalky/Controller/API.pm:			library => $library->id, book => $book->id, 
Obalky/Controller/API.pm:			visitor => $visitor->id, marc => $record->id, 
Obalky/Controller/API.pm:	# jen docasne - zkratime debug vypisy..
Obalky/Controller/API.pm:	# delete $this->{bibinfo} if($this); 
Obalky/Controller/API.pm:	return ($book->id,$this);
Obalky/Controller/API.pm:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/API.pm:	my($library,$session,$visitor) = Obalky->visit($c);
Obalky/Controller/API.pm:		my $key = DB->resultset('Cache')->canonize($this);
Obalky/Controller/API.pm:		my($bookid,$full) = DB->resultset('Cache')->load($key);
Obalky/Controller/API.pm:			($bookid,$full) = $self->do_book_request($c,$session,
Obalky/Controller/API.pm:			DB->resultset('Cache')->store($key,$bookid,$full);
Obalky/Controller/API.pm:	$c->response->content_type("text/javascript;charset=UTF-8");
Obalky/Controller/API.pm:	$c->response->body("obalky.callback(".to_json(\@book).");\n");
Obalky/Controller/API.pm:	my $book = from_json($c->req->param("book"));
Obalky/Controller/API.pm:	$self->do_books_request($c,[$book],1);
Obalky/Controller/API.pm:	my $books = eval { from_json($c->req->param("books")) };
Obalky/Controller/API.pm:	$self->do_books_request($c,$books,(scalar(@$books) == 1));
Obalky/Controller/API.pm:	my $from  = DateTime::Format::ISO8601->parse_datetime(
Obalky/Controller/API.pm:					$c->req->param('from'));
Obalky/Controller/API.pm:	my $until = DateTime::Format::ISO8601->parse_datetime(
Obalky/Controller/API.pm:					$c->req->param('until'));
Obalky/Controller/API.pm:		$c->response->status(400); # Bad Request
Obalky/Controller/API.pm:		$c->response->content_type("text/plain");
Obalky/Controller/API.pm:	    $c->response->body("from/until: Malformed syntax\n");
Obalky/Controller/API.pm:		my @list = DB->resultset('Cover')->created_in_range($from,$until);	
Obalky/Controller/API.pm:		$c->response->content_type("text/plain");
Obalky/Controller/API.pm:	    $c->response->body(join("",map $_->id."\n", @list));
Obalky/Controller/API.pm:	# obvykle je tak kolem 10-ti
Obalky/Controller/API.pm:#			warn "$$ $last_time -> $last_count\n";
Obalky/Controller/API.pm:			if(($time_now - $last_warn < 600) or (($last_warn - $time_now) % 600) == 0) {
Obalky/Controller/API.pm:				warn "$$ $last_time -> $last_count thumbnails per second, disabling..\n";
Obalky/Controller/API.pm:			$c->response->status(404); # Not found
Obalky/Controller/API.pm:	my $format = $c->req->param('format') || '';
Obalky/Controller/API.pm:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,
Obalky/Controller/API.pm:					$library ? $library->code : undef);
Obalky/Controller/API.pm:	my $return = lc($c->req->param('return') || 'img'); # default bude js!!
Obalky/Controller/API.pm:	my $client_ip = $c->req->address;
Obalky/Controller/API.pm:			($visitor ? $visitor->id : undef) , returning => $return
Obalky/Controller/API.pm:		$cover = DB->resultset('Cover')->retrieve($c->req->param('id'))
Obalky/Controller/API.pm:					if($c->req->param('id'));
Obalky/Controller/API.pm:	    my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo) 
Obalky/Controller/API.pm:		$cover = $book->cover if($book and $book->cover);
Obalky/Controller/API.pm:	$cover->update({ used_count => $cover->used_count+1, 
Obalky/Controller/API.pm:					 used_last => DateTime->now() }) if($cover);
Obalky/Controller/API.pm:	$request->{result} = $result;
Obalky/Controller/API.pm:	$request->{cover} = $cover;
Obalky/Controller/API.pm:	$bibinfo->save_to_hash($request) if($bibinfo);
Obalky/Controller/API.pm:	DB->resultset('Request')->create($request) if($library);
Obalky/Controller/API.pm:	my $image = $cover->get_absolute_url( $method eq 'cover' 
Obalky/Controller/API.pm:		? 'medium' : 'thumbnail',$c->req->secure) if($cover);
Obalky/Controller/API.pm:	my $backlink = $bibinfo->get_obalkyknih_url 
Obalky/Controller/API.pm:	$c->response->header("Cache-Control"=>"max-age=600");
Obalky/Controller/API.pm:		my $default = $c->req->param('default');
Obalky/Controller/API.pm:			$c->response->redirect($default || $Obalky::Config::SPACER_URL);
Obalky/Controller/API.pm:			$c->response->redirect($image); # kdyz neni image?
Obalky/Controller/API.pm:		$c->response->content_type("text/javascript");
Obalky/Controller/API.pm:				"<img src=\\\"$image\\\" alt=\\\"cover ".$cover->id."\\\" ".
Obalky/Controller/API.pm:	    $c->response->body($body);
Obalky/Controller/API.pm:		$c->response->content_type("text/javascript");
Obalky/Controller/API.pm:		    $c->response->body($cover->js_callback(
Obalky/Controller/API.pm:				$c->req->param('callback'),$c->req->param('callback_arg')));
Obalky/Controller/API.pm:			$c->response->content_type("application/xml");
Obalky/Controller/API.pm:			my $xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n".
Obalky/Controller/API.pm:					"<cover id=\"".$cover->id."\">\n".
Obalky/Controller/API.pm:	    	$c->response->body($xml);
Obalky/Controller/API.pm:			$c->response->status(404); # Not found
Obalky/Controller/API.pm:#			$c->response->content_type("text/plain");
Obalky/Controller/API.pm:#		    $c->response->body("Requested cover not found or not available\n");
Obalky/Controller/API.pm:	my($library,$session,$visitor) = Obalky->visit($c);
Obalky/Controller/API.pm:	return $self->file("cover",$c,$visitor,$library);
Obalky/Controller/API.pm:	return $self->file("thumbnail",$c,undef,undef);
Obalky/Controller/API.pm:    $c->response->body('Matched Obalky::Controller::Main in Main.');
Obalky/Controller/API.pm:	$info->{login} = $c->user ? $c->user->get('login') : '-';
Obalky/Controller/API.pm:	$info->{file}  = $c->req->upload('file');
Obalky/Controller/API.pm:	$info->{$_} = scalar($c->req->param($_)) 
Obalky/Controller/API.pm:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/API.pm:	$c->response->content_type("text/plain");
Obalky/Controller/API.pm:	if($info->{url} or $info->{file}) {
Obalky/Controller/API.pm:		eval { $batch = DB->resultset('Upload')->upload(
Obalky/Controller/API.pm:							$c->response,$bibinfo,$info) };
Obalky/Controller/API.pm:    	$c->response->body($@) if($@);
Obalky/Controller/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/Controller/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/Controller/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/Controller/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/Controller/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/Controller/.svn/tmp/tempfile.tmp:	DB->init($c->model('DB')); # fix: set on startup once..
Obalky/Controller/.svn/tmp/tempfile.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.tmp:	DB->init($c->model('DB')); # fix: set on startup once..
Obalky/Controller/.svn/tmp/tempfile.tmp:	DB::Eshop->model->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.tmp:	DB->init($c->model('DB')); # fix: set on startup once..
Obalky/Controller/.svn/tmp/tempfile.tmp:	DB::Eshop->model->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.tmp:	my($library,$session,$patron) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.tmp:	my $books = from_json($c->req->param("books"));
Obalky/Controller/.svn/tmp/tempfile.tmp:		my $bibinfo = Obalky::BibInfo->new_from_params($this->{bibinfo});
Obalky/Controller/.svn/tmp/tempfile.tmp:		my $record = DB::Record->model->find_or_create(
Obalky/Controller/.svn/tmp/tempfile.tmp:						$library,$this->{permalink},$bibinfo);
Obalky/Controller/.svn/tmp/tempfile.tmp:		my $book = $record->book; # record je vzdy?
Obalky/Controller/.svn/tmp/tempfile.tmp:		my $cover = $book->cover if($book); # book je vzdy?
Obalky/Controller/.svn/tmp/tempfile.tmp:		#$cover = $book->find_work_cover if(not $cover and $book->work);
Obalky/Controller/.svn/tmp/tempfile.tmp:		# do fronty kdyz neni obalka -- ostatni neni potreba??
Obalky/Controller/.svn/tmp/tempfile.tmp:		# DB::Queue->model->put($bibinfo) unless($cover); 
Obalky/Controller/.svn/tmp/tempfile.tmp:		# $this->{cover} = { url, width, height, [data (ie7+)?] }
Obalky/Controller/.svn/tmp/tempfile.tmp:		# $this->{thumbnail} = { url, width, height }
Obalky/Controller/.svn/tmp/tempfile.tmp:		# $this->{generic_thumbnail} = { url, width, height }
Obalky/Controller/.svn/tmp/tempfile.tmp:		#	DB::Cover->model->find_generic($library,$format) unless($cover);
Obalky/Controller/.svn/tmp/tempfile.tmp:			$this->{backlink_url}  = $cover->get_backlink_url; # book->backlink!
Obalky/Controller/.svn/tmp/tempfile.tmp:			$this->{thumbnail_url} = $cover->get_thumbnail_url;
Obalky/Controller/.svn/tmp/tempfile.tmp:			$this->{cover_url}     = $cover->get_cover_url;
Obalky/Controller/.svn/tmp/tempfile.tmp:		delete $this->{bibinfo}; # docasne
Obalky/Controller/.svn/tmp/tempfile.tmp:	$c->response->content_type("text/javascript;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.tmp:#	$c->response->content_encoding("UTF-8");
Obalky/Controller/.svn/tmp/tempfile.tmp:	$c->response->body("obalky.callback(".to_json(\@book).");\n");
Obalky/Controller/.svn/tmp/tempfile.tmp:	DB->init($c->model('DB')); # fix: set on startup once..
Obalky/Controller/.svn/tmp/tempfile.tmp:	my $from  = Obalky->dt_from_string($c->req->param('from'));
Obalky/Controller/.svn/tmp/tempfile.tmp:	my $until = Obalky->dt_from_string($c->req->param('until'));
Obalky/Controller/.svn/tmp/tempfile.tmp:		$c->response->status(400); # Bad Request
Obalky/Controller/.svn/tmp/tempfile.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.tmp:	    $c->response->body("from/until: Malformed syntax\n");
Obalky/Controller/.svn/tmp/tempfile.tmp:		my @list = DB::Cover->model->created_in_range($from,$until);	
Obalky/Controller/.svn/tmp/tempfile.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.tmp:	    $c->response->body(join("",map $_->id."\n", @list));
Obalky/Controller/.svn/tmp/tempfile.tmp:#	DB->init($c->model('DB')); # fix: set on startup once..
Obalky/Controller/.svn/tmp/tempfile.tmp:#	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/.svn/tmp/tempfile.tmp:#    my $book = DB::Book->model->find_by_bibinfo($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.tmp:#	my $cover = $book->cover if($book and $book->cover);
Obalky/Controller/.svn/tmp/tempfile.tmp:#	DB::Queue->model->put($bibinfo) unless($cover);
Obalky/Controller/.svn/tmp/tempfile.tmp:#	$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.tmp:	DB->init($c->model('DB')); # fix: set on startup once..
Obalky/Controller/.svn/tmp/tempfile.tmp:	# obvykle je tak kolem 10-ti
Obalky/Controller/.svn/tmp/tempfile.tmp:#			warn "$$ $last_time -> $last_count\n";
Obalky/Controller/.svn/tmp/tempfile.tmp:			if(($time_now - $last_warn < 600) or (($last_warn - $time_now) % 600) == 0) {
Obalky/Controller/.svn/tmp/tempfile.tmp:				warn "$$ $last_time -> $last_count thumbnails per second, disabling..\n";
Obalky/Controller/.svn/tmp/tempfile.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.tmp:	# 	 dle ENV{REFERER} dohleda library - kod knihovny v #library
Obalky/Controller/.svn/tmp/tempfile.tmp:	#       id = book->cover
Obalky/Controller/.svn/tmp/tempfile.tmp:	#    log(args, cache, obrazek->id);
Obalky/Controller/.svn/tmp/tempfile.tmp:	#    redirect cache."/".obrazek->id."/".(cover nebo thumbnail).".jpg"
Obalky/Controller/.svn/tmp/tempfile.tmp:	my $format = $c->req->param('format') || '';
Obalky/Controller/.svn/tmp/tempfile.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,
Obalky/Controller/.svn/tmp/tempfile.tmp:					$library ? $library->code : undef);
Obalky/Controller/.svn/tmp/tempfile.tmp:	my $return = lc($c->req->param('return') || 'img'); # default bude js!!
Obalky/Controller/.svn/tmp/tempfile.tmp:	my $client_ip = $c->req->address;
Obalky/Controller/.svn/tmp/tempfile.tmp:			($patron ? $patron->id : undef) , returning => $return
Obalky/Controller/.svn/tmp/tempfile.tmp:#		warn "Unknown library for referer ".$c->req->referer."\n";
Obalky/Controller/.svn/tmp/tempfile.tmp:		$cover = DB::Cover->model->find_generic(undef,"skeleton");
Obalky/Controller/.svn/tmp/tempfile.tmp:		$cover = DB::Cover->model->retrieve($c->req->param('id'))
Obalky/Controller/.svn/tmp/tempfile.tmp:					if($c->req->param('id'));
Obalky/Controller/.svn/tmp/tempfile.tmp:###	unless($cover) { # pouzi memcache ( %id -> cover_id )
Obalky/Controller/.svn/tmp/tempfile.tmp:###		$cover = Obalky::Tools->cover_cache_get($id);
Obalky/Controller/.svn/tmp/tempfile.tmp:	    my $book = DB::Book->model->find_by_bibinfo($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.tmp:		$cover = $book->cover if($book and $book->cover);
Obalky/Controller/.svn/tmp/tempfile.tmp:##		DB::Queue->model->put($bibinfo) unless($cover);
Obalky/Controller/.svn/tmp/tempfile.tmp:###		Obalky::Tools->cover_cache_store($id,$cover);
Obalky/Controller/.svn/tmp/tempfile.tmp:			$cover = DB::Cover->model->find_generic($library,$format);
Obalky/Controller/.svn/tmp/tempfile.tmp:		$cover = DB::Cover->model->find_generic() or die;
Obalky/Controller/.svn/tmp/tempfile.tmp:#	$cover->used_count($cover->used_count+1);
Obalky/Controller/.svn/tmp/tempfile.tmp:#	$cover->used_last(DateTime->now());
Obalky/Controller/.svn/tmp/tempfile.tmp:#	$cover->update;
Obalky/Controller/.svn/tmp/tempfile.tmp:	my $cache = DB::Cache->model->assign(
Obalky/Controller/.svn/tmp/tempfile.tmp:		scalar($c->req->param('cache')),$library,$client_ip,$cover);
Obalky/Controller/.svn/tmp/tempfile.tmp:	$cache->mark_used;
Obalky/Controller/.svn/tmp/tempfile.tmp:#	$cache->used_last(DateTime->now());
Obalky/Controller/.svn/tmp/tempfile.tmp:#	$cache->used_count($cache->used_count+1);
Obalky/Controller/.svn/tmp/tempfile.tmp:#	$cache->update unless(int(rand 100));
Obalky/Controller/.svn/tmp/tempfile.tmp:		$request->{result} = $result;
Obalky/Controller/.svn/tmp/tempfile.tmp:		$request->{cover} = $cover;
Obalky/Controller/.svn/tmp/tempfile.tmp:		$request->{cache} = $cache;
Obalky/Controller/.svn/tmp/tempfile.tmp:		$bibinfo->save_to_hash($request) if($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.tmp:		DB::Request->model->create($request) if($library);
Obalky/Controller/.svn/tmp/tempfile.tmp:	my $image = $cover->cached_url($cache,$method);
Obalky/Controller/.svn/tmp/tempfile.tmp:	my $backlink = $cover->get_backlink_url if($method ne 'thumbnail');
Obalky/Controller/.svn/tmp/tempfile.tmp:	$c->response->header("Cache-Control"=>"max-age=600");
Obalky/Controller/.svn/tmp/tempfile.tmp:		my $default = $c->req->param('default');
Obalky/Controller/.svn/tmp/tempfile.tmp:			#$c->response->redirect("http://www.obalkyknih.cz/img/notfound.gif");
Obalky/Controller/.svn/tmp/tempfile.tmp:			#$c->response->redirect("http://www.obalkyknih.cz/img/notfound.gif");
Obalky/Controller/.svn/tmp/tempfile.tmp:			$c->response->redirect($image);
Obalky/Controller/.svn/tmp/tempfile.tmp:		my $default = $c->req->param('default');
Obalky/Controller/.svn/tmp/tempfile.tmp:			$c->response->redirect($default);
Obalky/Controller/.svn/tmp/tempfile.tmp:			$c->response->redirect($image);
Obalky/Controller/.svn/tmp/tempfile.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.tmp:				"<img src=\\\"$image\\\" alt=\\\"cover ".$cover->id."\\\" ".
Obalky/Controller/.svn/tmp/tempfile.tmp:	    $c->response->body($body);
Obalky/Controller/.svn/tmp/tempfile.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.tmp:	    $c->response->body($cover->js_callback($cache,
Obalky/Controller/.svn/tmp/tempfile.tmp:				$c->req->param('callback'),$c->req->param('callback_arg')));
Obalky/Controller/.svn/tmp/tempfile.tmp:			$c->response->content_type("application/xml");
Obalky/Controller/.svn/tmp/tempfile.tmp:			my $xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n".
Obalky/Controller/.svn/tmp/tempfile.tmp:					"<cover id=\"".$cover->id."\">\n".
Obalky/Controller/.svn/tmp/tempfile.tmp:	    	$c->response->body($xml);
Obalky/Controller/.svn/tmp/tempfile.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.tmp:#			$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.tmp:#		    $c->response->body("Requested cover not found or not available\n");
Obalky/Controller/.svn/tmp/tempfile.tmp:	my($library,$session,$patron) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.tmp:	return $self->file("cover",$c,$patron,$library);
Obalky/Controller/.svn/tmp/tempfile.tmp:	return $self->file("thumbnail",$c,undef,undef);
Obalky/Controller/.svn/tmp/tempfile.tmp:	DB->init($c->model('DB')); # fix: set on startup once..
Obalky/Controller/.svn/tmp/tempfile.tmp:    $c->response->body('Matched Obalky::Controller::Main in Main.');
Obalky/Controller/.svn/tmp/tempfile.tmp:#    return 1 if $c->response->status;
Obalky/Controller/.svn/tmp/tempfile.tmp:#    return 1 if $c->response->content_type;
Obalky/Controller/.svn/tmp/tempfile.tmp:#    return 1 if $c->response->status =~ /^3\d\d$/;
Obalky/Controller/.svn/tmp/tempfile.tmp:#    return 1 if $c->response->body;
Obalky/Controller/.svn/tmp/tempfile.tmp:#    unless ( $c->response->content_type ) {
Obalky/Controller/.svn/tmp/tempfile.tmp:#        $c->response->content_type('text/html; charset=utf-8');
Obalky/Controller/.svn/tmp/tempfile.tmp:	DB->init($c->model('DB')); # fix: set on startup once..
Obalky/Controller/.svn/tmp/tempfile.tmp:	$info->{login} = $c->user ? $c->user->get('login') : '-';
Obalky/Controller/.svn/tmp/tempfile.tmp:	$info->{file}  = $c->req->upload('file');
Obalky/Controller/.svn/tmp/tempfile.tmp:	$info->{$_} = scalar($c->req->param($_)) 
Obalky/Controller/.svn/tmp/tempfile.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/.svn/tmp/tempfile.tmp:	$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.tmp:	if($info->{url} or $info->{file}) {
Obalky/Controller/.svn/tmp/tempfile.tmp:		eval { $batch = DB::Upload->model->upload(
Obalky/Controller/.svn/tmp/tempfile.tmp:							$c->response,$bibinfo,$info) };
Obalky/Controller/.svn/tmp/tempfile.tmp:    	$c->response->body($@) if($@);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my($library,$session,$patron) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my $books = from_json($c->req->param("books"));
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	warn "api/books ".join(" ",(map $_->{permalink}, @huh))."\n";
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		my $bibinfo = Obalky::BibInfo->new_from_params($this->{bibinfo});
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		my $permalink = $this->{permalink};
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		DB->resultset('Book')->enrich($this,$library,$permalink,$bibinfo);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		# jen docasne - zkratime debug vypisy..
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		# delete $this->{bibinfo} if($this); 
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$c->response->content_type("text/javascript;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:#	$c->response->content_encoding("UTF-8");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$c->response->body("obalky.callback(".to_json(\@book).");\n");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my $from  = DateTime::Format::ISO8601->parse_datetime(
Obalky/Controller/.svn/tmp/tempfile.5.tmp:					$c->req->param('from'));
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my $until = DateTime::Format::ISO8601->parse_datetime(
Obalky/Controller/.svn/tmp/tempfile.5.tmp:					$c->req->param('until'));
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		$c->response->status(400); # Bad Request
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	    $c->response->body("from/until: Malformed syntax\n");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		my @list = DB->resultset('Cover')->created_in_range($from,$until);	
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	    $c->response->body(join("",map $_->id."\n", @list));
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	# obvykle je tak kolem 10-ti
Obalky/Controller/.svn/tmp/tempfile.5.tmp:#			warn "$$ $last_time -> $last_count\n";
Obalky/Controller/.svn/tmp/tempfile.5.tmp:			if(($time_now - $last_warn < 600) or (($last_warn - $time_now) % 600) == 0) {
Obalky/Controller/.svn/tmp/tempfile.5.tmp:				warn "$$ $last_time -> $last_count thumbnails per second, disabling..\n";
Obalky/Controller/.svn/tmp/tempfile.5.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my $format = $c->req->param('format') || '';
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,
Obalky/Controller/.svn/tmp/tempfile.5.tmp:					$library ? $library->code : undef);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my $return = lc($c->req->param('return') || 'img'); # default bude js!!
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my $client_ip = $c->req->address;
Obalky/Controller/.svn/tmp/tempfile.5.tmp:			($patron ? $patron->id : undef) , returning => $return
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		$cover = DB->resultset('Cover')->retrieve($c->req->param('id'))
Obalky/Controller/.svn/tmp/tempfile.5.tmp:					if($c->req->param('id'));
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	    my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo) 
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		$cover = $book->cover if($book and $book->cover);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$cover->update({ used_count => $cover->used_count+1, 
Obalky/Controller/.svn/tmp/tempfile.5.tmp:					 used_last => DateTime->now() }) if($cover);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$request->{result} = $result;
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$request->{cover} = $cover;
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$bibinfo->save_to_hash($request) if($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	DB->resultset('Request')->create($request) if($library);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my $image = $cover->get_relative_url($method) if($cover);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my $backlink = $cover->get_backlink_url 
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$c->response->header("Cache-Control"=>"max-age=600");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		my $default = $c->req->param('default');
Obalky/Controller/.svn/tmp/tempfile.5.tmp:			$c->response->redirect($default || $Obalky::SPACER_URL);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:			$c->response->redirect($image); # kdyz neni image?
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:				"<img src=\\\"$image\\\" alt=\\\"cover ".$cover->id."\\\" ".
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	    $c->response->body($body);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		    $c->response->body($cover->js_callback(
Obalky/Controller/.svn/tmp/tempfile.5.tmp:				$c->req->param('callback'),$c->req->param('callback_arg')));
Obalky/Controller/.svn/tmp/tempfile.5.tmp:			$c->response->content_type("application/xml");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:			my $xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n".
Obalky/Controller/.svn/tmp/tempfile.5.tmp:					"<cover id=\"".$cover->id."\">\n".
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	    	$c->response->body($xml);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.5.tmp:#			$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:#		    $c->response->body("Requested cover not found or not available\n");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my($library,$session,$patron) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	return $self->file("cover",$c,$patron,$library);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	return $self->file("thumbnail",$c,undef,undef);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:    $c->response->body('Matched Obalky::Controller::Main in Main.');
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$info->{login} = $c->user ? $c->user->get('login') : '-';
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$info->{file}  = $c->req->upload('file');
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$info->{$_} = scalar($c->req->param($_)) 
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.5.tmp:	if($info->{url} or $info->{file}) {
Obalky/Controller/.svn/tmp/tempfile.5.tmp:		eval { $batch = DB->resultset('Upload')->upload(
Obalky/Controller/.svn/tmp/tempfile.5.tmp:							$c->response,$bibinfo,$info) };
Obalky/Controller/.svn/tmp/tempfile.5.tmp:    	$c->response->body($@) if($@);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my($library,$session,$patron) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$library = DB->resultset('Library')->find('obalky') unless($library);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my $books = from_json($c->req->param("books"));
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		my $bibinfo = Obalky::BibInfo->new_from_params($this->{bibinfo});
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		my $permalink = $this->{permalink};
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		my $enriched = DB->resultset('Book')->enrich(
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		# jen docasne - zkratime debug vypisy..
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		delete $enriched->{bibinfo} if($enriched); 
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$c->response->content_type("text/javascript;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#	$c->response->content_encoding("UTF-8");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$c->response->body("obalky.callback(".to_json(\@book).");\n");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my $from  = Obalky->dt_from_string($c->req->param('from'));
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my $until = Obalky->dt_from_string($c->req->param('until'));
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$c->response->status(400); # Bad Request
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	    $c->response->body("from/until: Malformed syntax\n");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		my @list = DB->resultset('Cover')->created_in_range($from,$until);	
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	    $c->response->body(join("",map $_->id."\n", @list));
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#    my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#	my $cover = $book->cover if($book and $book->cover);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#	DB->resultset('Queue')->put($bibinfo) unless($cover);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#	$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	# obvykle je tak kolem 10-ti
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#			warn "$$ $last_time -> $last_count\n";
Obalky/Controller/.svn/tmp/tempfile.2.tmp:			if(($time_now - $last_warn < 600) or (($last_warn - $time_now) % 600) == 0) {
Obalky/Controller/.svn/tmp/tempfile.2.tmp:				warn "$$ $last_time -> $last_count thumbnails per second, disabling..\n";
Obalky/Controller/.svn/tmp/tempfile.2.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	# 	 dle ENV{REFERER} dohleda library - kod knihovny v #library
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	#       id = book->cover
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	#    log(args, cache, obrazek->id);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	#    redirect cache."/".obrazek->id."/".(cover nebo thumbnail).".jpg"
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my $format = $c->req->param('format') || '';
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,
Obalky/Controller/.svn/tmp/tempfile.2.tmp:					$library ? $library->code : undef);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my $return = lc($c->req->param('return') || 'img'); # default bude js!!
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my $client_ip = $c->req->address;
Obalky/Controller/.svn/tmp/tempfile.2.tmp:			($patron ? $patron->id : undef) , returning => $return
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#		warn "Unknown library for referer ".$c->req->referer."\n";
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$cover = DB->resultset('Cover')->find_generic(undef,"skeleton");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$cover = DB->resultset('Cover')->retrieve($c->req->param('id'))
Obalky/Controller/.svn/tmp/tempfile.2.tmp:					if($c->req->param('id'));
Obalky/Controller/.svn/tmp/tempfile.2.tmp:###	unless($cover) { # pouzi memcache ( %id -> cover_id )
Obalky/Controller/.svn/tmp/tempfile.2.tmp:###		$cover = Obalky::Tools->cover_cache_get($id);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	    my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo) 
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$cover = $book->cover if($book and $book->cover);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:##		DB->resultset('Queue')->put($bibinfo) unless($cover);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:###		Obalky::Tools->cover_cache_store($id,$cover);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:			$cover = DB->resultset('Cover')->find_generic($library,$format);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$cover = DB->resultset('Cover')->find_generic() or die;
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#	$cover->used_count($cover->used_count+1);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#	$cover->used_last(DateTime->now());
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#	$cover->update;
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my $cache = DB->resultset('Cache')->assign(
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		scalar($c->req->param('cache')),$library,$client_ip,$cover);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$cache->mark_used;
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#	$cache->used_last(DateTime->now());
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#	$cache->used_count($cache->used_count+1);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#	$cache->update unless(int(rand 100));
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$request->{result} = $result;
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$request->{cover} = $cover;
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$request->{cache} = $cache;
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$bibinfo->save_to_hash($request) if($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		DB->resultset('Request')->create($request) if($library);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my $image = $cover->cached_url($cache,$method);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my $backlink = $cover->get_backlink_url if($method ne 'thumbnail');
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$c->response->header("Cache-Control"=>"max-age=600");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		my $default = $c->req->param('default');
Obalky/Controller/.svn/tmp/tempfile.2.tmp:			$c->response->redirect($default);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:			$c->response->redirect($image);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:				"<img src=\\\"$image\\\" alt=\\\"cover ".$cover->id."\\\" ".
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	    $c->response->body($body);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	    $c->response->body($cover->js_callback($cache,
Obalky/Controller/.svn/tmp/tempfile.2.tmp:				$c->req->param('callback'),$c->req->param('callback_arg')));
Obalky/Controller/.svn/tmp/tempfile.2.tmp:			$c->response->content_type("application/xml");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:			my $xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n".
Obalky/Controller/.svn/tmp/tempfile.2.tmp:					"<cover id=\"".$cover->id."\">\n".
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	    	$c->response->body($xml);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#			$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#		    $c->response->body("Requested cover not found or not available\n");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my($library,$session,$patron) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	return $self->file("cover",$c,$patron,$library);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	return $self->file("thumbnail",$c,undef,undef);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:    $c->response->body('Matched Obalky::Controller::Main in Main.');
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#    return 1 if $c->response->status;
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#    return 1 if $c->response->content_type;
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#    return 1 if $c->response->status =~ /^3\d\d$/;
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#    return 1 if $c->response->body;
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#    unless ( $c->response->content_type ) {
Obalky/Controller/.svn/tmp/tempfile.2.tmp:#        $c->response->content_type('text/html; charset=utf-8');
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$info->{login} = $c->user ? $c->user->get('login') : '-';
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$info->{file}  = $c->req->upload('file');
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$info->{$_} = scalar($c->req->param($_)) 
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.2.tmp:	if($info->{url} or $info->{file}) {
Obalky/Controller/.svn/tmp/tempfile.2.tmp:		eval { $batch = DB->resultset('Upload')->upload(
Obalky/Controller/.svn/tmp/tempfile.2.tmp:							$c->response,$bibinfo,$info) };
Obalky/Controller/.svn/tmp/tempfile.2.tmp:    	$c->response->body($@) if($@);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:#use encoding 'latin-2';
Obalky/Controller/.svn/tmp/tempfile.8.tmp:#binmode(STDOUT,":encoding(latin-2)") or die;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:__PACKAGE__->config->{namespace} = '';
Obalky/Controller/.svn/tmp/tempfile.8.tmp:Obalky::Controller::Root - Root Controller for Obalky
Obalky/Controller/.svn/tmp/tempfile.8.tmp:    $c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.8.tmp:    $c->response->content_encoding("UTF-8");
Obalky/Controller/.svn/tmp/tempfile.8.tmp:    foreach my $lib (DB->resultset('Library')->all) {
Obalky/Controller/.svn/tmp/tempfile.8.tmp:        $c->response->write($lib->name."\n");
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my($table,$id,$method) = @{$c->req->arguments};
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		$object = DB->resultset('Cover')->find($id);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		$object = DB->resultset('Toc')->find($id);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my($mime,$content,$ext) = $object->get_file($method) if($object);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		$c->response->status(404);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		$c->response->body("File '$table/$id".($method ? "/$method":"").
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		$c->response->content_type($mime);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		$c->response->headers->header( 'Content-Disposition' => 
Obalky/Controller/.svn/tmp/tempfile.8.tmp:			"attachment;filename=$table-$id-$method.$ext");
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		$c->response->body($content);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my($user,$passwd) = ($c->req->param('email'),$c->req->param('password'));
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my $return = $c->req->param('return');
Obalky/Controller/.svn/tmp/tempfile.8.tmp:#	warn Dumper($c->models,$c->model('Obalky::AuthUser'));
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		if($c->authenticate({ login => $user, password => $passwd })) {
Obalky/Controller/.svn/tmp/tempfile.8.tmp:			$c->res->redirect($return || "/index");
Obalky/Controller/.svn/tmp/tempfile.8.tmp:#			warn "user ".Dumper($c->user->get('login'))." authenticated\n";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:			$c->stash->{error} = 
Obalky/Controller/.svn/tmp/tempfile.8.tmp:				"Byl zadán neexistující e-mail nebo špatné heslo";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:#			$c->res->redirect('signup');
Obalky/Controller/.svn/tmp/tempfile.8.tmp:#		$c->res->redirect('signup'); # login 
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{email} = $user;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{password} = $passwd;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{'return'} = $return;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my $return = $c->req->param('return');
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->logout();
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->res->redirect($return || "/index");
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{menu} = "browse";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my $file = $c->req->upload('file');
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my $url  = $c->req->param('url');
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		login => scalar($c->user->get('login')),
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		unless($c->req->param('free')) {
Obalky/Controller/.svn/tmp/tempfile.8.tmp:			$c->stash->{error} = "Nutno udělit souhlas s použitím.";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:				DB->resultset('Upload')->upload(undef,undef,$info) };
Obalky/Controller/.svn/tmp/tempfile.8.tmp:			return $c->res->redirect("preview?batch=$batch") unless($@);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:			$c->stash->{error} = $@;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{url} = $url ? $url : "http://";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{menu} = "upload";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my $batch = $c->req->param('batch');
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my @images = DB->resultset('Upload')->images($batch);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	for(my $i=1;$i<@images;$i+=2) { $images[$i]->{odd} = 1 }
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{batch} = $batch;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{menu} = "upload";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:#	warn "   thumb[0]: ",$images[0]." - ".$images[0]->thumbfile;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{images} = \@images;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{covers} = DB->resultset('Cover')->count;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{tocs} = DB->resultset('Toc')->count;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{recent} = DB->resultset('Cover')->recent(3,3);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:#	$c->stash->{books} = Obalky::Model::Book->count_all();
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{books} = DB->resultset('Book')->count;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{recent} = DB->resultset('Cover')->recent(3,3);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{menu} = "about";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,undef);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$book = DB->resultset('Book')->find_by_bibinfo($bibinfo) if($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my @books = $book ? ( $book->work ? $book->work->books : $book ) : ();
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my $referer = $c->req->param('referer') || $c->req->referer;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	if($c->req->param('report')) {
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		my $cover = DB->resultset('Cover')->find(
Obalky/Controller/.svn/tmp/tempfile.8.tmp:							$c->req->param("cover"));
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		my $abuse = DB->resultset('Abuse')->
Obalky/Controller/.svn/tmp/tempfile.8.tmp:						abuse($book,$cover,$c->req->address,$referer);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		$c->stash->{error} = "Děkujeme za nahlášení, chybnou obálku se ".
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{books}   = [ @books ];#\@info;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{book}    = $book;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{referer} = $referer;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	if($c->req->param('signup')) {
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		eval { $signed = DB->resultset('User')->signup($c->req->params) };
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{error} = $@ if($@);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{signed} = $signed;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{$_} = $c->req->param($_) 
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{libopac} = $c->req->param('libopac') ?
Obalky/Controller/.svn/tmp/tempfile.8.tmp:								$c->req->param('libopac') : "http://";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my $email = $c->req->param('email');
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		eval { $sent = DB->resultset('User')->sendpassword($email) };
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{error} = $@ if($@);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{email} = $email;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{sent} = $sent;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{warning} = Dumper($c->models);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	return $c->res->redirect("/login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	my $batch = $c->req->param('batch');
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	foreach(keys %{$c->req->params}) {
Obalky/Controller/.svn/tmp/tempfile.8.tmp:		$list->{$2}->{$1} = $c->req->param($_) if(/^(.+)\_(\d+)$/);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	DB->resultset('Upload')->do_import($batch,$list);
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{menu} = "upload";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	#return $c->res->redirect("browse"); # s nejakym argumentem?
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	return $c->res->redirect("index"); # nebo podekovat?
Obalky/Controller/.svn/tmp/tempfile.8.tmp:    return 1 if $c->response->status =~ /^3\d\d$/;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:    return 1 if $c->response->body;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:    unless ( $c->response->content_type ) {
Obalky/Controller/.svn/tmp/tempfile.8.tmp:        $c->response->content_type('text/html; charset=utf-8');
Obalky/Controller/.svn/tmp/tempfile.8.tmp:    if($c->stash->{menu}) {
Obalky/Controller/.svn/tmp/tempfile.8.tmp:        my $menu = "menu_".$c->stash->{menu};
Obalky/Controller/.svn/tmp/tempfile.8.tmp:        $c->stash->{$menu} = "menu_selected";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:#	warn "end() user: ".($c->user ? "ok: ".$c->user->get('login'):"fail")."\n";
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->stash->{user} = $c->user ? $c->user->get('login') : undef;
Obalky/Controller/.svn/tmp/tempfile.8.tmp:	$c->forward('Obalky::View::TT');	
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my($library,$session,$visitor) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my $books = from_json($c->req->param("books"));
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	warn "api/books ".join(" ",(map $_->{permalink}, @huh))."\n";
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		my $bibinfo = Obalky::BibInfo->new_from_params($this->{bibinfo});
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		my $permalink = $this->{permalink};
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		DB->resultset('Book')->enrich($this,$library,$permalink,$bibinfo);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		# jen docasne - zkratime debug vypisy..
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		# delete $this->{bibinfo} if($this); 
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$c->response->content_type("text/javascript;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:#	$c->response->content_encoding("UTF-8");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$c->response->body("obalky.callback(".to_json(\@book).");\n");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my $from  = DateTime::Format::ISO8601->parse_datetime(
Obalky/Controller/.svn/tmp/tempfile.6.tmp:					$c->req->param('from'));
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my $until = DateTime::Format::ISO8601->parse_datetime(
Obalky/Controller/.svn/tmp/tempfile.6.tmp:					$c->req->param('until'));
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		$c->response->status(400); # Bad Request
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	    $c->response->body("from/until: Malformed syntax\n");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		my @list = DB->resultset('Cover')->created_in_range($from,$until);	
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	    $c->response->body(join("",map $_->id."\n", @list));
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	# obvykle je tak kolem 10-ti
Obalky/Controller/.svn/tmp/tempfile.6.tmp:#			warn "$$ $last_time -> $last_count\n";
Obalky/Controller/.svn/tmp/tempfile.6.tmp:			if(($time_now - $last_warn < 600) or (($last_warn - $time_now) % 600) == 0) {
Obalky/Controller/.svn/tmp/tempfile.6.tmp:				warn "$$ $last_time -> $last_count thumbnails per second, disabling..\n";
Obalky/Controller/.svn/tmp/tempfile.6.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my $format = $c->req->param('format') || '';
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,
Obalky/Controller/.svn/tmp/tempfile.6.tmp:					$library ? $library->code : undef);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my $return = lc($c->req->param('return') || 'img'); # default bude js!!
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my $client_ip = $c->req->address;
Obalky/Controller/.svn/tmp/tempfile.6.tmp:			($visitor ? $visitor->id : undef) , returning => $return
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		$cover = DB->resultset('Cover')->retrieve($c->req->param('id'))
Obalky/Controller/.svn/tmp/tempfile.6.tmp:					if($c->req->param('id'));
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	    my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo) 
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		$cover = $book->cover if($book and $book->cover);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$cover->update({ used_count => $cover->used_count+1, 
Obalky/Controller/.svn/tmp/tempfile.6.tmp:					 used_last => DateTime->now() }) if($cover);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$request->{result} = $result;
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$request->{cover} = $cover;
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$bibinfo->save_to_hash($request) if($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	DB->resultset('Request')->create($request) if($library);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my $image = $cover->get_relative_url($method) if($cover);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my $backlink = $cover->get_backlink_url 
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$c->response->header("Cache-Control"=>"max-age=600");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		my $default = $c->req->param('default');
Obalky/Controller/.svn/tmp/tempfile.6.tmp:			$c->response->redirect($default || $Obalky::SPACER_URL);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:			$c->response->redirect($image); # kdyz neni image?
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:				"<img src=\\\"$image\\\" alt=\\\"cover ".$cover->id."\\\" ".
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	    $c->response->body($body);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		    $c->response->body($cover->js_callback(
Obalky/Controller/.svn/tmp/tempfile.6.tmp:				$c->req->param('callback'),$c->req->param('callback_arg')));
Obalky/Controller/.svn/tmp/tempfile.6.tmp:			$c->response->content_type("application/xml");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:			my $xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n".
Obalky/Controller/.svn/tmp/tempfile.6.tmp:					"<cover id=\"".$cover->id."\">\n".
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	    	$c->response->body($xml);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.6.tmp:#			$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:#		    $c->response->body("Requested cover not found or not available\n");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my($library,$session,$visitor) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	return $self->file("cover",$c,$visitor,$library);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	return $self->file("thumbnail",$c,undef,undef);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:    $c->response->body('Matched Obalky::Controller::Main in Main.');
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$info->{login} = $c->user ? $c->user->get('login') : '-';
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$info->{file}  = $c->req->upload('file');
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$info->{$_} = scalar($c->req->param($_)) 
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.6.tmp:	if($info->{url} or $info->{file}) {
Obalky/Controller/.svn/tmp/tempfile.6.tmp:		eval { $batch = DB->resultset('Upload')->upload(
Obalky/Controller/.svn/tmp/tempfile.6.tmp:							$c->response,$bibinfo,$info) };
Obalky/Controller/.svn/tmp/tempfile.6.tmp:    	$c->response->body($@) if($@);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:#use encoding 'latin-2';
Obalky/Controller/.svn/tmp/tempfile.7.tmp:#binmode(STDOUT,":encoding(latin-2)") or die;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:__PACKAGE__->config->{namespace} = '';
Obalky/Controller/.svn/tmp/tempfile.7.tmp:Obalky::Controller::Root - Root Controller for Obalky
Obalky/Controller/.svn/tmp/tempfile.7.tmp:    $c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.7.tmp:    $c->response->content_encoding("UTF-8");
Obalky/Controller/.svn/tmp/tempfile.7.tmp:    foreach my $lib (DB->resultset('Library')->all) {
Obalky/Controller/.svn/tmp/tempfile.7.tmp:        $c->response->write($lib->name."\n");
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my($table,$id,$method) = @{$c->req->arguments};
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		$object = DB->resultset('Cover')->find($id);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		$object = DB->resultset('Toc')->find($id);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my($mime,$content) = $object->get_file($method) if($object);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		$c->response->status(404);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		$c->response->body("File '$table/$id".($method ? "/$method":"").
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		$c->response->content_type($mime);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		$c->response->body($content);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my($user,$passwd) = ($c->req->param('email'),$c->req->param('password'));
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my $return = $c->req->param('return');
Obalky/Controller/.svn/tmp/tempfile.7.tmp:#	warn Dumper($c->models,$c->model('Obalky::AuthUser'));
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		if($c->authenticate({ login => $user, password => $passwd })) {
Obalky/Controller/.svn/tmp/tempfile.7.tmp:			$c->res->redirect($return || "/index");
Obalky/Controller/.svn/tmp/tempfile.7.tmp:#			warn "user ".Dumper($c->user->get('login'))." authenticated\n";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:			$c->stash->{error} = 
Obalky/Controller/.svn/tmp/tempfile.7.tmp:				"Byl zadán neexistující e-mail nebo špatné heslo";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:#			$c->res->redirect('signup');
Obalky/Controller/.svn/tmp/tempfile.7.tmp:#		$c->res->redirect('signup'); # login 
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{email} = $user;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{password} = $passwd;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{'return'} = $return;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my $return = $c->req->param('return');
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->logout();
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->res->redirect($return || "/index");
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{menu} = "browse";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my $file = $c->req->upload('file');
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my $url  = $c->req->param('url');
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		login => scalar($c->user->get('login')),
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		unless($c->req->param('free')) {
Obalky/Controller/.svn/tmp/tempfile.7.tmp:			$c->stash->{error} = "Nutno udělit souhlas s použitím.";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:				DB->resultset('Upload')->upload(undef,undef,$info) };
Obalky/Controller/.svn/tmp/tempfile.7.tmp:			return $c->res->redirect("preview?batch=$batch") unless($@);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:			$c->stash->{error} = $@;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{url} = $url ? $url : "http://";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{menu} = "upload";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my $batch = $c->req->param('batch');
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my @images = DB->resultset('Upload')->images($batch);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	for(my $i=1;$i<@images;$i+=2) { $images[$i]->{odd} = 1 }
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{batch} = $batch;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{menu} = "upload";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:#	warn "   thumb[0]: ",$images[0]." - ".$images[0]->thumbfile;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{images} = \@images;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{covers} = DB->resultset('Cover')->count;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{tocs} = DB->resultset('Toc')->count;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{recent} = DB->resultset('Cover')->recent(3,3);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:#	$c->stash->{books} = Obalky::Model::Book->count_all();
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{books} = DB->resultset('Book')->count;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{recent} = DB->resultset('Cover')->recent(3,3);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{menu} = "about";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,undef);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$book = DB->resultset('Book')->find_by_bibinfo($bibinfo) if($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my @books = $book ? ( $book->work ? $book->work->books : $book ) : ();
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my $referer = $c->req->param('referer') || $c->req->referer;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	if($c->req->param('report')) {
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		my $cover = DB->resultset('Cover')->find(
Obalky/Controller/.svn/tmp/tempfile.7.tmp:							$c->req->param("cover"));
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		my $abuse = DB->resultset('Abuse')->
Obalky/Controller/.svn/tmp/tempfile.7.tmp:						abuse($book,$cover,$c->req->address,$referer);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		$c->stash->{error} = "Děkujeme za nahlášení, chybnou obálku se ".
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{books}   = [ @books ];#\@info;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{book}    = $book;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{referer} = $referer;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	if($c->req->param('signup')) {
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		eval { $signed = DB->resultset('User')->signup($c->req->params) };
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{error} = $@ if($@);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{signed} = $signed;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{$_} = $c->req->param($_) 
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{libopac} = $c->req->param('libopac') ?
Obalky/Controller/.svn/tmp/tempfile.7.tmp:								$c->req->param('libopac') : "http://";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my $email = $c->req->param('email');
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		eval { $sent = DB->resultset('User')->sendpassword($email) };
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{error} = $@ if($@);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{email} = $email;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{sent} = $sent;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{warning} = Dumper($c->models);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	return $c->res->redirect("/login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	my $batch = $c->req->param('batch');
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	foreach(keys %{$c->req->params}) {
Obalky/Controller/.svn/tmp/tempfile.7.tmp:		$list->{$2}->{$1} = $c->req->param($_) if(/^(.+)\_(\d+)$/);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	DB->resultset('Upload')->do_import($batch,$list);
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{menu} = "upload";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	#return $c->res->redirect("browse"); # s nejakym argumentem?
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	return $c->res->redirect("index"); # nebo podekovat?
Obalky/Controller/.svn/tmp/tempfile.7.tmp:    return 1 if $c->response->status =~ /^3\d\d$/;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:    return 1 if $c->response->body;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:    unless ( $c->response->content_type ) {
Obalky/Controller/.svn/tmp/tempfile.7.tmp:        $c->response->content_type('text/html; charset=utf-8');
Obalky/Controller/.svn/tmp/tempfile.7.tmp:    if($c->stash->{menu}) {
Obalky/Controller/.svn/tmp/tempfile.7.tmp:        my $menu = "menu_".$c->stash->{menu};
Obalky/Controller/.svn/tmp/tempfile.7.tmp:        $c->stash->{$menu} = "menu_selected";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:#	warn "end() user: ".($c->user ? "ok: ".$c->user->get('login'):"fail")."\n";
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->stash->{user} = $c->user ? $c->user->get('login') : undef;
Obalky/Controller/.svn/tmp/tempfile.7.tmp:	$c->forward('Obalky::View::TT');	
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my($library,$session,$patron) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$library = DB->resultset('Library')->find('obalky') unless($library);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my $books = from_json($c->req->param("books"));
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		my $bibinfo = Obalky::BibInfo->new_from_params($this->{bibinfo});
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		my $permalink = $this->{permalink};
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		my $enriched = DB->resultset('Book')->enrich(
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		# jen docasne - zkratime debug vypisy..
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		delete $enriched->{bibinfo} if($enriched); 
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$c->response->content_type("text/javascript;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#	$c->response->content_encoding("UTF-8");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$c->response->body("obalky.callback(".to_json(\@book).");\n");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my $from  = Obalky->dt_from_string($c->req->param('from'));
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my $until = Obalky->dt_from_string($c->req->param('until'));
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$c->response->status(400); # Bad Request
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	    $c->response->body("from/until: Malformed syntax\n");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		my @list = DB->resultset('Cover')->created_in_range($from,$until);	
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	    $c->response->body(join("",map $_->id."\n", @list));
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#    my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#	my $cover = $book->cover if($book and $book->cover);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#	DB->resultset('Queue')->put($bibinfo) unless($cover);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#	$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	# obvykle je tak kolem 10-ti
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#			warn "$$ $last_time -> $last_count\n";
Obalky/Controller/.svn/tmp/tempfile.3.tmp:			if(($time_now - $last_warn < 600) or (($last_warn - $time_now) % 600) == 0) {
Obalky/Controller/.svn/tmp/tempfile.3.tmp:				warn "$$ $last_time -> $last_count thumbnails per second, disabling..\n";
Obalky/Controller/.svn/tmp/tempfile.3.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	# 	 dle ENV{REFERER} dohleda library - kod knihovny v #library
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	#       id = book->cover
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	#    log(args, cache, obrazek->id);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	#    redirect cache."/".obrazek->id."/".(cover nebo thumbnail).".jpg"
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my $format = $c->req->param('format') || '';
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,
Obalky/Controller/.svn/tmp/tempfile.3.tmp:					$library ? $library->code : undef);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my $return = lc($c->req->param('return') || 'img'); # default bude js!!
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my $client_ip = $c->req->address;
Obalky/Controller/.svn/tmp/tempfile.3.tmp:			($patron ? $patron->id : undef) , returning => $return
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#		warn "Unknown library for referer ".$c->req->referer."\n";
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$cover = DB->resultset('Cover')->find_generic(undef,"skeleton");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$cover = DB->resultset('Cover')->retrieve($c->req->param('id'))
Obalky/Controller/.svn/tmp/tempfile.3.tmp:					if($c->req->param('id'));
Obalky/Controller/.svn/tmp/tempfile.3.tmp:###	unless($cover) { # pouzi memcache ( %id -> cover_id )
Obalky/Controller/.svn/tmp/tempfile.3.tmp:###		$cover = Obalky::Tools->cover_cache_get($id);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	    my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo) 
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$cover = $book->cover if($book and $book->cover);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:##		DB->resultset('Queue')->put($bibinfo) unless($cover);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:###		Obalky::Tools->cover_cache_store($id,$cover);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:			$cover = DB->resultset('Cover')->find_generic($library,$format);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$cover = DB->resultset('Cover')->find_generic() or die;
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#	$cover->used_count($cover->used_count+1);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#	$cover->used_last(DateTime->now());
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#	$cover->update;
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my $cache = DB->resultset('Cache')->assign(
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		scalar($c->req->param('cache')),$library,$client_ip,$cover);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$cache->mark_used;
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#	$cache->used_last(DateTime->now());
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#	$cache->used_count($cache->used_count+1);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#	$cache->update unless(int(rand 100));
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$request->{result} = $result;
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$request->{cover} = $cover;
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$request->{cache} = $cache;
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$bibinfo->save_to_hash($request) if($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		DB->resultset('Request')->create($request) if($library);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my $image = $cover->cached_url($cache,$method);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my $backlink = $cover->get_backlink_url if($method ne 'thumbnail');
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$c->response->header("Cache-Control"=>"max-age=600");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		my $default = $c->req->param('default');
Obalky/Controller/.svn/tmp/tempfile.3.tmp:			$c->response->redirect($default);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:			$c->response->redirect($image);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:				"<img src=\\\"$image\\\" alt=\\\"cover ".$cover->id."\\\" ".
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	    $c->response->body($body);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	    $c->response->body($cover->js_callback($cache,
Obalky/Controller/.svn/tmp/tempfile.3.tmp:				$c->req->param('callback'),$c->req->param('callback_arg')));
Obalky/Controller/.svn/tmp/tempfile.3.tmp:			$c->response->content_type("application/xml");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:			my $xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n".
Obalky/Controller/.svn/tmp/tempfile.3.tmp:					"<cover id=\"".$cover->id."\">\n".
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	    	$c->response->body($xml);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#			$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#		    $c->response->body("Requested cover not found or not available\n");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my($library,$session,$patron) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	return $self->file("cover",$c,$patron,$library);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	return $self->file("thumbnail",$c,undef,undef);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:    $c->response->body('Matched Obalky::Controller::Main in Main.');
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#    return 1 if $c->response->status;
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#    return 1 if $c->response->content_type;
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#    return 1 if $c->response->status =~ /^3\d\d$/;
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#    return 1 if $c->response->body;
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#    unless ( $c->response->content_type ) {
Obalky/Controller/.svn/tmp/tempfile.3.tmp:#        $c->response->content_type('text/html; charset=utf-8');
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$info->{login} = $c->user ? $c->user->get('login') : '-';
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$info->{file}  = $c->req->upload('file');
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$info->{$_} = scalar($c->req->param($_)) 
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.3.tmp:	if($info->{url} or $info->{file}) {
Obalky/Controller/.svn/tmp/tempfile.3.tmp:		eval { $batch = DB->resultset('Upload')->upload(
Obalky/Controller/.svn/tmp/tempfile.3.tmp:							$c->response,$bibinfo,$info) };
Obalky/Controller/.svn/tmp/tempfile.3.tmp:    	$c->response->body($@) if($@);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$c->response->body("OK...");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my($library,$session,$patron) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$library = DB->resultset('Library')->find('obalky') unless($library);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my $books = from_json($c->req->param("books"));
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		my $bibinfo = Obalky::BibInfo->new_from_params($this->{bibinfo});
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		my $permalink = $this->{permalink};
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		my $enriched = DB->resultset('Book')->enrich(
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		# jen docasne - zkratime debug vypisy..
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		delete $enriched->{bibinfo} if($enriched); 
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$c->response->content_type("text/javascript;charset=UTF-8");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#	$c->response->content_encoding("UTF-8");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$c->response->body("obalky.callback(".to_json(\@book).");\n");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my $from  = Obalky->dt_from_string($c->req->param('from'));
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my $until = Obalky->dt_from_string($c->req->param('until'));
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$c->response->status(400); # Bad Request
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	    $c->response->body("from/until: Malformed syntax\n");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		my @list = DB->resultset('Cover')->created_in_range($from,$until);	
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	    $c->response->body(join("",map $_->id."\n", @list));
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#    my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#	my $cover = $book->cover if($book and $book->cover);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#	DB->resultset('Queue')->put($bibinfo) unless($cover);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#	$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	# obvykle je tak kolem 10-ti
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#			warn "$$ $last_time -> $last_count\n";
Obalky/Controller/.svn/tmp/tempfile.4.tmp:			if(($time_now - $last_warn < 600) or (($last_warn - $time_now) % 600) == 0) {
Obalky/Controller/.svn/tmp/tempfile.4.tmp:				warn "$$ $last_time -> $last_count thumbnails per second, disabling..\n";
Obalky/Controller/.svn/tmp/tempfile.4.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	# 	 dle ENV{REFERER} dohleda library - kod knihovny v #library
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	#       id = book->cover
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	#    log(args, cache, obrazek->id);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	#    redirect cache."/".obrazek->id."/".(cover nebo thumbnail).".jpg"
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my $format = $c->req->param('format') || '';
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,
Obalky/Controller/.svn/tmp/tempfile.4.tmp:					$library ? $library->code : undef);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my $return = lc($c->req->param('return') || 'img'); # default bude js!!
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my $client_ip = $c->req->address;
Obalky/Controller/.svn/tmp/tempfile.4.tmp:			($patron ? $patron->id : undef) , returning => $return
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#		warn "Unknown library for referer ".$c->req->referer."\n";
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$cover = DB->resultset('Cover')->find_generic(undef,"skeleton");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$cover = DB->resultset('Cover')->retrieve($c->req->param('id'))
Obalky/Controller/.svn/tmp/tempfile.4.tmp:					if($c->req->param('id'));
Obalky/Controller/.svn/tmp/tempfile.4.tmp:###	unless($cover) { # pouzi memcache ( %id -> cover_id )
Obalky/Controller/.svn/tmp/tempfile.4.tmp:###		$cover = Obalky::Tools->cover_cache_get($id);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	    my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo) 
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$cover = $book->cover if($book and $book->cover);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:##		DB->resultset('Queue')->put($bibinfo) unless($cover);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:###		Obalky::Tools->cover_cache_store($id,$cover);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:			$cover = DB->resultset('Cover')->find_generic($library,$format);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$cover = DB->resultset('Cover')->find_generic() or die;
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#	$cover->used_count($cover->used_count+1);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#	$cover->used_last(DateTime->now());
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#	$cover->update;
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my $cache = DB->resultset('Cache')->assign(
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		scalar($c->req->param('cache')),$library,$client_ip,$cover);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$cache->mark_used;
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#	$cache->used_last(DateTime->now());
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#	$cache->used_count($cache->used_count+1);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#	$cache->update unless(int(rand 100));
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$request->{result} = $result;
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$request->{cover} = $cover;
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$request->{cache} = $cache;
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$bibinfo->save_to_hash($request) if($bibinfo);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		DB->resultset('Request')->create($request) if($library);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my $image = $cover->cached_url($cache,$method);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my $backlink = $cover->get_backlink_url if($method ne 'thumbnail');
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$c->response->header("Cache-Control"=>"max-age=600");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		my $default = $c->req->param('default');
Obalky/Controller/.svn/tmp/tempfile.4.tmp:			$c->response->redirect($default);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:			$c->response->redirect($image);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:				"<img src=\\\"$image\\\" alt=\\\"cover ".$cover->id."\\\" ".
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	    $c->response->body($body);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	    $c->response->body($cover->js_callback($cache,
Obalky/Controller/.svn/tmp/tempfile.4.tmp:				$c->req->param('callback'),$c->req->param('callback_arg')));
Obalky/Controller/.svn/tmp/tempfile.4.tmp:			$c->response->content_type("application/xml");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:			my $xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n".
Obalky/Controller/.svn/tmp/tempfile.4.tmp:					"<cover id=\"".$cover->id."\">\n".
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	    	$c->response->body($xml);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:			$c->response->status(404); # Not found
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#			$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#		    $c->response->body("Requested cover not found or not available\n");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my($library,$session,$patron) = Obalky->visit($c);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	return $self->file("cover",$c,$patron,$library);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	return $self->file("thumbnail",$c,undef,undef);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:    $c->response->body('Matched Obalky::Controller::Main in Main.');
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#    return 1 if $c->response->status;
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#    return 1 if $c->response->content_type;
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#    return 1 if $c->response->status =~ /^3\d\d$/;
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#    return 1 if $c->response->body;
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#    unless ( $c->response->content_type ) {
Obalky/Controller/.svn/tmp/tempfile.4.tmp:#        $c->response->content_type('text/html; charset=utf-8');
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$info->{login} = $c->user ? $c->user->get('login') : '-';
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$info->{file}  = $c->req->upload('file');
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$info->{$_} = scalar($c->req->param($_)) 
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	$c->response->content_type("text/plain");
Obalky/Controller/.svn/tmp/tempfile.4.tmp:	if($info->{url} or $info->{file}) {
Obalky/Controller/.svn/tmp/tempfile.4.tmp:		eval { $batch = DB->resultset('Upload')->upload(
Obalky/Controller/.svn/tmp/tempfile.4.tmp:							$c->response,$bibinfo,$info) };
Obalky/Controller/.svn/tmp/tempfile.4.tmp:    	$c->response->body($@) if($@);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:#use encoding 'latin-2';
Obalky/Controller/.svn/text-base/Root.pm.svn-base:#binmode(STDOUT,":encoding(latin-2)") or die;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:__PACKAGE__->config->{namespace} = '';
Obalky/Controller/.svn/text-base/Root.pm.svn-base:Obalky::Controller::Root - Root Controller for Obalky
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	if($c->req->param('revive')) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		my $params = $c->req->body_params();
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			my $abuse = DB->resultset('Abuse')->find($id) or next;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			my $book  = $abuse->book;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			my $cover = $abuse->cover;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:				warn "Reverting ".$cover->id." in book ".$book->id."\n";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:				$book->update({ cover => $cover });
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			DB->resultset('Abuse')->search({ id => $id })->delete_all;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{abused} = [ DB->resultset('Abuse')->all ];
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{libraries} = [ DB->resultset('Library')->all ];
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	# echo 'select user,fullname,library.code,library.name from upload,user,library where upload.user = user.id and user.library = library.id;'|mysql|sort|uniq -c
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{covers} = DB->resultset('Cover')->count;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{tocs} = DB->resultset('Toc')->count;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $value = $c->req->param('value');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->serve_static_file($Obalky::Config::WWW_DIR."/img/stars/$img.gif");
Obalky/Controller/.svn/text-base/Root.pm.svn-base:    $c->response->content_type("text/plain");
Obalky/Controller/.svn/text-base/Root.pm.svn-base:    $c->response->content_encoding("UTF-8");
Obalky/Controller/.svn/text-base/Root.pm.svn-base:    foreach my $lib (DB->resultset('Library')->all) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:        $c->response->write($lib->name."\n");
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my($table,$id,$method) = @{$c->req->arguments};
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$object = DB->resultset('Cover')->find($id);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$object = DB->resultset('Toc')->find($id);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my($mime,$content,$ext) = $object->get_file($method) if($object);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$c->response->status(404);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$c->response->body("File '$table/$id".($method ? "/$method":"").
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$c->response->content_type($mime);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$c->response->headers->header( 'Content-Disposition' =>  # ????
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			"attachment;filename=$table-$id-$method.$ext") if($ext eq 'pdf');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$c->response->body($content);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my($user,$passwd) = ($c->req->param('email'),$c->req->param('password'));
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $return = $c->req->param('return');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:#	warn Dumper($c->models,$c->model('Obalky::AuthUser'));
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		if($c->authenticate({ login => $user, password => $passwd })) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			$c->res->redirect($return || "/index");
Obalky/Controller/.svn/text-base/Root.pm.svn-base:#			warn "user ".Dumper($c->user->get('login'))." authenticated\n";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			$c->stash->{error} = 
Obalky/Controller/.svn/text-base/Root.pm.svn-base:				"Byl zadán neexistující e-mail nebo špatné heslo";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:#			$c->res->redirect('signup');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:#		$c->res->redirect('signup'); # login 
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{email} = $user;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{password} = $passwd;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{'return'} = $return;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $return = $c->req->param('return');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->logout();
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->res->redirect($return || "/index");
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "browse";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $file = $c->req->upload('file');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $url  = $c->req->param('url');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		login => scalar($c->user->get('login')),
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		unless($c->req->param('free')) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			$c->stash->{error} = "Nutno udělit souhlas s použitím.";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:				DB->resultset('Upload')->upload(undef,undef,$info) };
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			return $c->res->redirect("preview?batch=$batch") unless($@);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			$c->stash->{error} = $@;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{url} = $url ? $url : "http://";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "upload";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $batch = $c->req->param('batch');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my @images = DB->resultset('Upload')->images($batch);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	for(my $i=1;$i<@images;$i+=2) { $images[$i]->{odd} = 1 }
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{batch} = $batch;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "upload";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:#	warn "   thumb[0]: ",$images[0]." - ".$images[0]->thumbfile;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{images} = \@images;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{covers} = DB->resultset('Cover')->count;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{tocs} = DB->resultset('Toc')->count;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{recent} = DB->resultset('Cover')->recent(3,3);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:#	$c->stash->{books} = Obalky::Model::Book->count_all();
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{books} = DB->resultset('Book')->count;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{recent} = DB->resultset('Cover')->recent(3,3);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "about";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	return $c->res->redirect("login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	if($c->req->param('censor')) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		foreach my $param ($c->req->param()) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			next unless($c->req->param($param)); # ON
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			my $review = DB->resultset('Review')->find($id);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			if($c->req->param("delete_$id")) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:				$review->delete;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:				$review->update({ approved => $c->user->login });
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{deleted} = $deleted;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{approved} = $approved;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $month = $c->req->param('month') || 1;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{month} = $month;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{reviews} = [ DB->resultset('Review')->all_public($month) ];
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "upload";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my($library,$seance,$visitor) = Obalky->visit($c);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $referer = $c->req->param('referer') || $c->req->referer;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	if($c->req->param('report')) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		my $cover = DB->resultset('Cover')->find(
Obalky/Controller/.svn/text-base/Root.pm.svn-base:							$c->req->param("cover"));
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		my $note = $c->req->param('note');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		my $spamQuestion = $c->req->param('spamQuestion');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		my $book = DB->resultset('Book')->find($c->req->param('book'));
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		my $abuse = DB->resultset('Abuse')->
Obalky/Controller/.svn/text-base/Root.pm.svn-base:					abuse($book,$cover,$c->req->address,$referer,$note)
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$c->stash->{error} = "Děkujeme za nahlášení, chybnou obálku se ".
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	if($c->req->param('review_add')) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		my $name    = $c->req->param('review_name');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		my $book_id = $c->req->param('review_book');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		my $text    = $c->req->param('review_text');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		my $rating  = $c->req->param('review_rating');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		my $book = DB->resultset('Book')->find($book_id) if($book_id);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			my @reviews = $book->reviews;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			$book->add_review($library,$visitor,{ 
Obalky/Controller/.svn/text-base/Root.pm.svn-base:				html_text => $html, visitor_ip => $c->req->address,
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,undef);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo) if($bibinfo);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my @books = $book ? ( $book->work ? $book->work->books : $book ) : ();
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		next unless($b1->tips);	
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$b1->{tips_ids} = [];
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		foreach(split(/\s/,$b1->tips)) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			my $b2 = eval { DB->resultset('Book')->find($_) };
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			push @{$b1->{tips_ids}}, $b2 if($b2 and $b2->title);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{books}   = [ @books ];#\@info;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{referer} = $referer;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $ip = $c->req->address; $ip =~ s/\.\d+$/.../;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{visitor_blurred_ip} = $ip;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	if($c->req->param('signup')) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		eval { $signed = DB->resultset('User')->signup($c->req->params) };
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$c->stash->{error} = $@ if($@);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{signed} = $signed;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{$_} = $c->req->param($_) 
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{libopac} = $c->req->param('libopac') ?
Obalky/Controller/.svn/text-base/Root.pm.svn-base:							$c->req->param('libopac') : "http://";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $email = $c->req->param('email');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $reset = $c->req->param('reset');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $pass1 = $c->req->param('pass1');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $pass2 = $c->req->param('pass2');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		eval { $c->stash->{sent} = 
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			DB->resultset('User')->sendpassword($email) };
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		eval { $c->stash->{reseted} = 
Obalky/Controller/.svn/text-base/Root.pm.svn-base:			DB->resultset('User')->resetpassword($reset,$pass1,$pass2) };
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{error} = $@ if($@);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{'reset'} = $reset;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{email} = $email;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $cloud = HTML::TagCloud->new;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	open(LIST,"<utf8","/opt/obalky/doc/tags-655-c.txt") or die;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$cloud->add($text, "http://obalkyknih.cz/tag/$.", $count);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:#	$c->stash->{warning} = Dumper($c->models);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{tagcloud} = $cloud->html_and_css(50);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	return $c->res->redirect("/login?return=".$c->req->uri) unless $c->user;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	my $batch = $c->req->param('batch');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	foreach(keys %{$c->req->params}) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:		$list->{$2}->{$1} = $c->req->param($_) if(/^(.+)\_(\d+)$/);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	DB->resultset('Upload')->do_import($batch,$list);
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{menu} = "upload";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	#return $c->res->redirect("browse"); # s nejakym argumentem?
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	return $c->res->redirect("index"); # nebo podekovat?
Obalky/Controller/.svn/text-base/Root.pm.svn-base:    return 1 if $c->response->status =~ /^3\d\d$/;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:    return 1 if $c->response->body;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:    unless ( $c->response->content_type ) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:        $c->response->content_type('text/html; charset=utf-8');
Obalky/Controller/.svn/text-base/Root.pm.svn-base:    if($c->stash->{menu}) {
Obalky/Controller/.svn/text-base/Root.pm.svn-base:        my $menu = "menu_".$c->stash->{menu};
Obalky/Controller/.svn/text-base/Root.pm.svn-base:        $c->stash->{$menu} = "menu_selected";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:#	warn "end() user: ".($c->user ? "ok: ".$c->user->get('login'):"fail")."\n";
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->stash->{user} = $c->user ? $c->user->get('login') : undef;
Obalky/Controller/.svn/text-base/Root.pm.svn-base:	$c->forward('Obalky::View::TT');	
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:#	$c->stash->{books} = DB::Book->model->count;
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:#	$c->stash->{recent} = DB::Book->model->recent(3,3);
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:	$c->stash->{covers} = DB->resultset('Cover')->count;
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:	$c->stash->{tocs} = DB->resultset('Toc')->count; 
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:	$c->stash->{recent} = DB->resultset('Cover')->recent(3,3);
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:	$c->stash->{menu} = "index";
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:	$c->stash->{menu} = "doc";
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:    return 1 if $c->response->status =~ /^3\d\d$/;
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:    return 1 if $c->response->body;
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:    unless ( $c->response->content_type ) {
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:        $c->response->content_type('text/html; charset=utf-8');
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:    if($c->stash->{menu}) {
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:        my $menu = "menu_".$c->stash->{menu};
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:        $c->stash->{$menu} = "menu_selected";
Obalky/Controller/.svn/text-base/Doc.pm.svn-base:	$c->forward('Obalky::View::TT');	
Obalky/Controller/.svn/text-base/Util.pm.svn-base:    $c->response->body('Matched Obalky::Controller::Main in Main.');
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->content_type("application/xml;charset=UTF-8");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->headers->header('Content-disposition',
Obalky/Controller/.svn/text-base/API.pm.svn-base:					"attachment;filename=toc-".today().".xml");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	binmode(STDOUT,"utf8"); # fakt skaredy hack.. :-(
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->print('<?xml version="1.0" encoding="utf-8" ?>'."\n");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->print("<obalkyknih>\n");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $tocs = DB->resultset('Toc')->search;
Obalky/Controller/.svn/text-base/API.pm.svn-base:	while(my $toc = $tocs->next) {
Obalky/Controller/.svn/text-base/API.pm.svn-base:		$c->response->print($toc->to_xml);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->print("</obalkyknih>\n");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->body("OK...");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->content_type("text/plain;charset=UTF-8");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->body("OK...");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $this = from_json($c->req->param("book"));
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $rating = $c->req->param("rating");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my($library,$session,$visitor) = Obalky->visit($c);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $bibinfo = Obalky::BibInfo->new_from_params($this->{bibinfo});
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $permalink = Obalky::Tools->fix_permalink($this->{permalink});
Obalky/Controller/.svn/text-base/API.pm.svn-base:#		warn "Chybi minimalni udaje, ignoruju (lib=".($library?$library->code:"").")...\n";
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my($book,$record) = DB->resultset('Marc')->get_book_record(
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$book->add_review($library,$visitor,{ 
Obalky/Controller/.svn/text-base/API.pm.svn-base:		visitor_name => $visitor->name, # asi nevyplneno...
Obalky/Controller/.svn/text-base/API.pm.svn-base:		visitor_ip => $c->request->address,
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$book->enrich($this,$library,$permalink,$bibinfo,
Obalky/Controller/.svn/text-base/API.pm.svn-base:							  $c->request->secure);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->content_type("text/javascript;charset=UTF-8");
Obalky/Controller/.svn/text-base/API.pm.svn-base:#	$c->response->content_encoding("UTF-8");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->body("obalky.callback(".to_json([$this]).");\n");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $bibinfo = Obalky::BibInfo->new_from_params($this->{bibinfo});
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $permalink = Obalky::Tools->fix_permalink($this->{permalink});
Obalky/Controller/.svn/text-base/API.pm.svn-base:#		warn "Chybi minimalni udaje, ignoruju (lib=".($library?$library->code:"").",permalink=".($permalink||'').",bibinfo=".($bibinfo||'').")...\n";
Obalky/Controller/.svn/text-base/API.pm.svn-base:    my($book,$record) = DB->resultset('Marc')->get_book_record(
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$book->enrich($this,$library,$permalink,$bibinfo,$c->request->secure);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	# zapis do DB #lastrequests [ visitor_id, session?, $book->id, $record->id ]
Obalky/Controller/.svn/text-base/API.pm.svn-base:		DB->resultset('Lastrequests')->create({ 
Obalky/Controller/.svn/text-base/API.pm.svn-base:			library => $library->id, book => $book->id, 
Obalky/Controller/.svn/text-base/API.pm.svn-base:			visitor => $visitor->id, marc => $record->id, 
Obalky/Controller/.svn/text-base/API.pm.svn-base:	# jen docasne - zkratime debug vypisy..
Obalky/Controller/.svn/text-base/API.pm.svn-base:	# delete $this->{bibinfo} if($this); 
Obalky/Controller/.svn/text-base/API.pm.svn-base:	return ($book->id,$this);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	DB->resultset('Eshop')->sync_eshops();
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my($library,$session,$visitor) = Obalky->visit($c);
Obalky/Controller/.svn/text-base/API.pm.svn-base:		my $key = DB->resultset('Cache')->canonize($this);
Obalky/Controller/.svn/text-base/API.pm.svn-base:		my($bookid,$full) = DB->resultset('Cache')->load($key);
Obalky/Controller/.svn/text-base/API.pm.svn-base:			($bookid,$full) = $self->do_book_request($c,$session,
Obalky/Controller/.svn/text-base/API.pm.svn-base:			DB->resultset('Cache')->store($key,$bookid,$full);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->content_type("text/javascript;charset=UTF-8");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->body("obalky.callback(".to_json(\@book).");\n");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $book = from_json($c->req->param("book"));
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$self->do_books_request($c,[$book],1);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $books = eval { from_json($c->req->param("books")) };
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$self->do_books_request($c,$books,(scalar(@$books) == 1));
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $from  = DateTime::Format::ISO8601->parse_datetime(
Obalky/Controller/.svn/text-base/API.pm.svn-base:					$c->req->param('from'));
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $until = DateTime::Format::ISO8601->parse_datetime(
Obalky/Controller/.svn/text-base/API.pm.svn-base:					$c->req->param('until'));
Obalky/Controller/.svn/text-base/API.pm.svn-base:		$c->response->status(400); # Bad Request
Obalky/Controller/.svn/text-base/API.pm.svn-base:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	    $c->response->body("from/until: Malformed syntax\n");
Obalky/Controller/.svn/text-base/API.pm.svn-base:		my @list = DB->resultset('Cover')->created_in_range($from,$until);	
Obalky/Controller/.svn/text-base/API.pm.svn-base:		$c->response->content_type("text/plain");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	    $c->response->body(join("",map $_->id."\n", @list));
Obalky/Controller/.svn/text-base/API.pm.svn-base:	# obvykle je tak kolem 10-ti
Obalky/Controller/.svn/text-base/API.pm.svn-base:#			warn "$$ $last_time -> $last_count\n";
Obalky/Controller/.svn/text-base/API.pm.svn-base:			if(($time_now - $last_warn < 600) or (($last_warn - $time_now) % 600) == 0) {
Obalky/Controller/.svn/text-base/API.pm.svn-base:				warn "$$ $last_time -> $last_count thumbnails per second, disabling..\n";
Obalky/Controller/.svn/text-base/API.pm.svn-base:			$c->response->status(404); # Not found
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $format = $c->req->param('format') || '';
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params,
Obalky/Controller/.svn/text-base/API.pm.svn-base:					$library ? $library->code : undef);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $return = lc($c->req->param('return') || 'img'); # default bude js!!
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $client_ip = $c->req->address;
Obalky/Controller/.svn/text-base/API.pm.svn-base:			($visitor ? $visitor->id : undef) , returning => $return
Obalky/Controller/.svn/text-base/API.pm.svn-base:		$cover = DB->resultset('Cover')->retrieve($c->req->param('id'))
Obalky/Controller/.svn/text-base/API.pm.svn-base:					if($c->req->param('id'));
Obalky/Controller/.svn/text-base/API.pm.svn-base:	    my $book = DB->resultset('Book')->find_by_bibinfo($bibinfo) 
Obalky/Controller/.svn/text-base/API.pm.svn-base:		$cover = $book->cover if($book and $book->cover);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$cover->update({ used_count => $cover->used_count+1, 
Obalky/Controller/.svn/text-base/API.pm.svn-base:					 used_last => DateTime->now() }) if($cover);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$request->{result} = $result;
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$request->{cover} = $cover;
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$bibinfo->save_to_hash($request) if($bibinfo);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	DB->resultset('Request')->create($request) if($library);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $image = $cover->get_absolute_url( $method eq 'cover' 
Obalky/Controller/.svn/text-base/API.pm.svn-base:		? 'medium' : 'thumbnail',$c->req->secure) if($cover);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $backlink = $bibinfo->get_obalkyknih_url 
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->header("Cache-Control"=>"max-age=600");
Obalky/Controller/.svn/text-base/API.pm.svn-base:		my $default = $c->req->param('default');
Obalky/Controller/.svn/text-base/API.pm.svn-base:			$c->response->redirect($default || $Obalky::Config::SPACER_URL);
Obalky/Controller/.svn/text-base/API.pm.svn-base:			$c->response->redirect($image); # kdyz neni image?
Obalky/Controller/.svn/text-base/API.pm.svn-base:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/text-base/API.pm.svn-base:				"<img src=\\\"$image\\\" alt=\\\"cover ".$cover->id."\\\" ".
Obalky/Controller/.svn/text-base/API.pm.svn-base:	    $c->response->body($body);
Obalky/Controller/.svn/text-base/API.pm.svn-base:		$c->response->content_type("text/javascript");
Obalky/Controller/.svn/text-base/API.pm.svn-base:		    $c->response->body($cover->js_callback(
Obalky/Controller/.svn/text-base/API.pm.svn-base:				$c->req->param('callback'),$c->req->param('callback_arg')));
Obalky/Controller/.svn/text-base/API.pm.svn-base:			$c->response->content_type("application/xml");
Obalky/Controller/.svn/text-base/API.pm.svn-base:			my $xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n".
Obalky/Controller/.svn/text-base/API.pm.svn-base:					"<cover id=\"".$cover->id."\">\n".
Obalky/Controller/.svn/text-base/API.pm.svn-base:	    	$c->response->body($xml);
Obalky/Controller/.svn/text-base/API.pm.svn-base:			$c->response->status(404); # Not found
Obalky/Controller/.svn/text-base/API.pm.svn-base:#			$c->response->content_type("text/plain");
Obalky/Controller/.svn/text-base/API.pm.svn-base:#		    $c->response->body("Requested cover not found or not available\n");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my($library,$session,$visitor) = Obalky->visit($c);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	return $self->file("cover",$c,$visitor,$library);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	return $self->file("thumbnail",$c,undef,undef);
Obalky/Controller/.svn/text-base/API.pm.svn-base:    $c->response->body('Matched Obalky::Controller::Main in Main.');
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$info->{login} = $c->user ? $c->user->get('login') : '-';
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$info->{file}  = $c->req->upload('file');
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$info->{$_} = scalar($c->req->param($_)) 
Obalky/Controller/.svn/text-base/API.pm.svn-base:	my $bibinfo = Obalky::BibInfo->new_from_params($c->req->params);
Obalky/Controller/.svn/text-base/API.pm.svn-base:	$c->response->content_type("text/plain");
Obalky/Controller/.svn/text-base/API.pm.svn-base:	if($info->{url} or $info->{file}) {
Obalky/Controller/.svn/text-base/API.pm.svn-base:		eval { $batch = DB->resultset('Upload')->upload(
Obalky/Controller/.svn/text-base/API.pm.svn-base:							$c->response,$bibinfo,$info) };
Obalky/Controller/.svn/text-base/API.pm.svn-base:    	$c->response->body($@) if($@);
Obalky/Controller/.svn/entries:2011-06-22T19:35:35.405441Z
Obalky/Controller/.svn/entries:svn:special svn:externals svn:needs-lock
Obalky/Controller/.svn/entries:49789afe-7772-4492-8243-1a4b1d9f4dda
Obalky/Controller/.svn/entries:2009-11-16T08:27:10.000000Z
Obalky/Controller/.svn/entries:2009-12-07T13:34:52.769465Z
Obalky/Controller/.svn/entries:2011-10-12T15:58:40.000000Z
Obalky/Controller/.svn/entries:2011-10-12T16:13:50.979293Z
Obalky/Controller/.svn/entries:2009-09-29T06:31:41.000000Z
Obalky/Controller/.svn/entries:2008-09-08T13:41:03.572614Z
Obalky/Controller/.svn/entries:2011-10-27T11:05:14.000000Z
Obalky/Controller/.svn/entries:2011-11-15T11:31:59.829461Z
Obalky/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/.svn/all-wcprops:svn:wc:ra_dav:version-url
Obalky/.svn/tmp/tempfile.tmp:#	$bibinfo->{$_} = $object->get($_) foreach(@keys);
Obalky/.svn/tmp/tempfile.tmp:#	$media->{cover} = $object->ean12;
Obalky/.svn/tmp/tempfile.tmp:#	$media->{toc} = $object->title;
Obalky/.svn/tmp/tempfile.tmp:		#year => $param->{year},
Obalky/.svn/tmp/tempfile.tmp:	map $media->{$_} = $info->{$_}, grep defined $info->{$_}, @keys;
Obalky/.svn/tmp/tempfile.tmp:	# vytvor cover jen pokud je novy/lisi-se
Obalky/.svn/tmp/tempfile.tmp:	my $cover_url = $media->{cover_url};
Obalky/.svn/tmp/tempfile.tmp:		my $tmp = $media->{cover_tmpfile};
Obalky/.svn/tmp/tempfile.tmp:			my $TMP_DIR = "/tmp/.obalky-media"; mkdir $TMP_DIR;
Obalky/.svn/tmp/tempfile.tmp:			$tmp = Obalky::Tools->wget_to_file(
Obalky/.svn/tmp/tempfile.tmp:						$cover_url, "$TMP_DIR/cover-".$product->id);
Obalky/.svn/tmp/tempfile.tmp:		my $book = $product->book;
Obalky/.svn/tmp/tempfile.tmp:		$cover = DB->resultset('Cover')->create_from_file($book,$product,$tmp);
Obalky/.svn/tmp/tempfile.tmp:		$product->update({ cover => $cover });
Obalky/.svn/tmp/tempfile.tmp:	my $toc_text = $media->{toctext};
Obalky/.svn/tmp/tempfile.tmp:	my $toc_url  = $media->{tocpdf_url};
Obalky/.svn/tmp/tempfile.tmp:		$toc = DB->resultset('Toc')->find_or_create(
Obalky/.svn/tmp/tempfile.tmp:			my $tmp = $media->{tocpdf_tmpfile};
Obalky/.svn/tmp/tempfile.tmp:				Obalky::Tools->slurp($tmp) : Obalky::Tools->wget($toc_url);
Obalky/.svn/tmp/tempfile.tmp:			$toc->pdf_file($toc_tmpfile);
Obalky/.svn/tmp/tempfile.tmp:			$toc->pdf_url($toc_url);
Obalky/.svn/tmp/tempfile.tmp:			$toc->full_text($toc_text);
Obalky/.svn/tmp/tempfile.tmp:		$toc->update;
Obalky/.svn/tmp/tempfile.tmp:		$product->update({ toc => $toc });
Obalky/.svn/tmp/tempfile.2.tmp:Obalky::BibInfo - zpracovani (zejmena) identifikatoru knizky
Obalky/.svn/tmp/tempfile.2.tmp:#    my $object = My::Module->new();
Obalky/.svn/tmp/tempfile.2.tmp:#    print $object->as_string;
Obalky/.svn/tmp/tempfile.2.tmp:PREFIX ::= [a-z]+
Obalky/.svn/tmp/tempfile.2.tmp:EAN ::= [0-9]{12}[0-9X] /* pripadne s pomlckami */
Obalky/.svn/tmp/tempfile.2.tmp:ISBN ::= [0-9]{9}[0-9X] /* pripadne s pomlckami */
Obalky/.svn/tmp/tempfile.2.tmp:978-123-4-56789-X
Obalky/.svn/tmp/tempfile.2.tmp:123-4-56789-X
Obalky/.svn/tmp/tempfile.2.tmp:	$bibinfo->{ean13} = $object->ean13 if(defined $object->ean13);
Obalky/.svn/tmp/tempfile.2.tmp:	$bibinfo->{oclc} = $object->oclc   if(defined $object->oclc);
Obalky/.svn/tmp/tempfile.2.tmp:	$bibinfo->{nbn}  = $object->nbn    if(defined $object->nbn);
Obalky/.svn/tmp/tempfile.2.tmp:	$bibinfo->{title} = $object->title if(defined $object->title);
Obalky/.svn/tmp/tempfile.2.tmp:	my $authors = $object->authors;
Obalky/.svn/tmp/tempfile.2.tmp:	$bibinfo->{authors} = [split(/\;/,$authors)] if(defined $authors);
Obalky/.svn/tmp/tempfile.2.tmp:	$bibinfo->{year} = $object->year if(defined $object->year);
Obalky/.svn/tmp/tempfile.2.tmp:		if(defined $new->{$key} and not defined $old->{$key}) {
Obalky/.svn/tmp/tempfile.2.tmp:			$old->{$key} = $new->{$key};
Obalky/.svn/tmp/tempfile.2.tmp:	return $a->ean13 ne $b->ean13 if($a->ean13 and $b->ean13);
Obalky/.svn/tmp/tempfile.2.tmp:	return $a->oclc  ne $b->occl  if($a->oclc  and $b->oclc );
Obalky/.svn/tmp/tempfile.2.tmp:	return $a->nbn   ne $b->nbn   if($a->nbn   and $b->nbn  );
Obalky/.svn/tmp/tempfile.2.tmp:	$id->{nbn} = $value if(defined $value);
Obalky/.svn/tmp/tempfile.2.tmp:	return $id->{nbn};
Obalky/.svn/tmp/tempfile.2.tmp:	$id->{oclc} = $value if(defined $value);
Obalky/.svn/tmp/tempfile.2.tmp:	return $id->{oclc};
Obalky/.svn/tmp/tempfile.2.tmp:	$id->{ean13} = $value if(defined $value);
Obalky/.svn/tmp/tempfile.2.tmp:	return $id->{ean13};
Obalky/.svn/tmp/tempfile.2.tmp:	return $id->ean($isbn);
Obalky/.svn/tmp/tempfile.2.tmp:	return $id->ean($issn);
Obalky/.svn/tmp/tempfile.2.tmp:		$ean =~ s/\-//g; 
Obalky/.svn/tmp/tempfile.2.tmp:        	$isbn_object = Business::ISBN->new($ean."0");
Obalky/.svn/tmp/tempfile.2.tmp:			$isbn_object->fix_checksum;
Obalky/.svn/tmp/tempfile.2.tmp:        	$isbn_object = Business::ISBN->new($ean);
Obalky/.svn/tmp/tempfile.2.tmp:        if($isbn_object and $isbn_object->is_valid) {
Obalky/.svn/tmp/tempfile.2.tmp:        	my $format = $isbn_object->as_string;
Obalky/.svn/tmp/tempfile.2.tmp:        	$id->{ean13} = $id->isbn_to_ean13($format);
Obalky/.svn/tmp/tempfile.2.tmp:	return $id->to_isbn;
Obalky/.svn/tmp/tempfile.2.tmp:	return $pkg->new_from_params({ ean => $ean});
Obalky/.svn/tmp/tempfile.2.tmp:	my $eanvalue = $string; $eanvalue =~ s/\-//g;
Obalky/.svn/tmp/tempfile.2.tmp:				/^(isbn|ean)?\_?(97.)?(\d{8,9}[0-9X])$/i);
Obalky/.svn/tmp/tempfile.2.tmp:			my($key,$value) = ($1,$2) if(/^([a-z]+)[\_\:\=]?(.+)$/);
Obalky/.svn/tmp/tempfile.2.tmp:	return $pkg->new_from_params({ oclc => $oclc, nbn => $nbn, ean => $ean});
Obalky/.svn/tmp/tempfile.2.tmp:	my $ean = $param->{ean} || $param->{isbn};
Obalky/.svn/tmp/tempfile.2.tmp:	$ean13 = $pkg->isbn_to_ean13($ean) if($ean);
Obalky/.svn/tmp/tempfile.2.tmp:	$ean13 = $param->{ean13} if($param->{ean13});
Obalky/.svn/tmp/tempfile.2.tmp:	my $year = ($param->{year} and $param->{year} =~ /(\d{4})/) ? $1 : undef;
Obalky/.svn/tmp/tempfile.2.tmp:	return unless($ean13 or $param->{oclc} or 
Obalky/.svn/tmp/tempfile.2.tmp:				  $param->{nbn} or $param->{title}); 
Obalky/.svn/tmp/tempfile.2.tmp:		oclc => $param->{oclc},
Obalky/.svn/tmp/tempfile.2.tmp:		nbn => $param->{nbn},
Obalky/.svn/tmp/tempfile.2.tmp:		title => $param->{title},
Obalky/.svn/tmp/tempfile.2.tmp:		authors => $param->{authors}, # ujistit se, ze to je pole?
Obalky/.svn/tmp/tempfile.2.tmp:	$object->update($id->save_to_hash());
Obalky/.svn/tmp/tempfile.2.tmp:	map $hash->{$_} = $id->{$_}, grep $id->{$_}, qw/ean13 oclc nbn title year/;
Obalky/.svn/tmp/tempfile.2.tmp:	$hash->{authors} = join(";",@{$id->{authors}}) if($id->{authors});
Obalky/.svn/tmp/tempfile.2.tmp:    $isbn =~ s/\-//g; $isbn =~ s/^\s*//; $isbn =~ s/\s.*//;
Obalky/.svn/tmp/tempfile.2.tmp:    $isbn =~ s/^.*?([0-9]{9,12}[0-9X]).*/$1/;
Obalky/.svn/tmp/tempfile.2.tmp:	my $obj = Business::ISBN->new($isbn);
Obalky/.svn/tmp/tempfile.2.tmp:	return unless($obj and $obj->is_valid);
Obalky/.svn/tmp/tempfile.2.tmp:	my $ean13 = $obj->as_isbn13->as_string;
Obalky/.svn/tmp/tempfile.2.tmp:	$ean13 =~ s/\-//g;
Obalky/.svn/tmp/tempfile.2.tmp:#	warn "$in -> $isbn -> $ean13\n";
Obalky/.svn/tmp/tempfile.2.tmp:	return undef unless($id->{ean13});
Obalky/.svn/tmp/tempfile.2.tmp:    my $isbn = Business::ISBN->new($id->{ean13}) or return;
Obalky/.svn/tmp/tempfile.2.tmp:	return $isbn->as_isbn13->as_string;
Obalky/.svn/tmp/tempfile.2.tmp:		push @out, $_."=".$id->{$_} if($id->{$_});
Obalky/.svn/tmp/tempfile.2.tmp:	return $id->{ean13} ? "isbn=".$id->to_isbn : $id->to_params;
Obalky/.svn/tmp/tempfile.2.tmp:	my $isbn = $id->to_isbn;
Obalky/.svn/tmp/tempfile.2.tmp:	return $id->oclc ? $id->oclc : "NULL";
Obalky/.svn/tmp/tempfile.2.tmp:		$ids{isbn} = $id->to_isbn;
Obalky/.svn/tmp/tempfile.2.tmp:	return $id->{title} if($id->{title});
Obalky/.svn/tmp/tempfile.2.tmp:	return "ISBN ".$id->to_isbn if($id->{ean13});
Obalky/.svn/tmp/tempfile.2.tmp:	return "OCLC ".$id->oclc if($id->oclc);
Obalky/.svn/tmp/tempfile.2.tmp:	return $id->to_some_param; # failback...
Obalky/.svn/tmp/tempfile.2.tmp:		$ids{isbn} = $id->to_isbn;
Obalky/.svn/tmp/tempfile.2.tmp:	my($isbn,$ean) = $id->isbn_forms;
Obalky/.svn/tmp/tempfile.2.tmp:				 oclc => $id->oclc, nbn => $id->nbn };
Obalky/.svn/tmp/tempfile.2.tmp:		my $value = $info->{$key} or next;
Obalky/.svn/tmp/tempfile.2.tmp:		push @ids, "\t\t<$key>".HTML::Tiny->entity_encode($value)."</$key>\n";
Obalky/.svn/tmp/tempfile.2.tmp:	push @ids, {"name"=>"ISBN","value"=>$id->to_isbn} if($id->ean13);
Obalky/.svn/tmp/tempfile.2.tmp:	push @ids, {"name"=>"OCLC Number","value"=>$id->oclc} if($id->oclc);
Obalky/.svn/tmp/tempfile.2.tmp:	push @ids, {"name"=>"NKP-NBN","value"=>$id->nbn} if($id->nbn);
Obalky/.svn/tmp/tempfile.2.tmp:# je tato knizka ceska? undef -- nelze rict
Obalky/.svn/tmp/tempfile.2.tmp:	my $ean13 = $id->ean13 or return;
Obalky/.svn/tmp/tempfile.2.tmp:    eval { $obj13 = Business::ISBN->new($ean13); };
Obalky/.svn/tmp/tempfile.2.tmp:    return $obj13->group_code eq '80' ? 1 : 0;
Obalky/.svn/tmp/tempfile.2.tmp:	my $ean13 = $bibinfo->ean13;
Obalky/.svn/tmp/tempfile.2.tmp:        $obj13 = Business::ISBN->new($ean13);
Obalky/.svn/tmp/tempfile.2.tmp:        $isbn13 = $ean = $obj13->as_string; $isbn13 =~ s/\-//g;
Obalky/.svn/tmp/tempfile.2.tmp:        my $obj10 = $obj13->as_isbn10;
Obalky/.svn/tmp/tempfile.2.tmp:        $isbn10 = $isbn = $obj10->as_string; $isbn10 =~ s/\-//g;
Obalky/.svn/tmp/tempfile.2.tmp:    return Obalky::Config->url($secure)."/view?".$bibinfo->to_some_param;
Obalky/.svn/tmp/tempfile.2.tmp:	return "" unless $bibinfo->{authors};
Obalky/.svn/tmp/tempfile.2.tmp:	my $last = pop @{$bibinfo->{authors}};
Obalky/.svn/tmp/tempfile.2.tmp:	return $last || '' unless($bibinfo->{authors});
Obalky/.svn/tmp/tempfile.2.tmp:	my $first = join(", ",@{$bibinfo->{authors}});
Obalky/.svn/tmp/tempfile.2.tmp:Martin Sarfy - L<mailto:martin@sarfy.cz>
Obalky/.svn/text-base/Config.pm.svn-base:our $DEBUG = -e "$ROOT_DIR/debug" ? 1 : 0;
Obalky/.svn/text-base/BibInfo.pm.svn-base:Obalky::BibInfo - zpracovani (zejmena) identifikatoru knizky
Obalky/.svn/text-base/BibInfo.pm.svn-base:#	my $object = My::Module->new();
Obalky/.svn/text-base/BibInfo.pm.svn-base:#	print $object->as_string;
Obalky/.svn/text-base/BibInfo.pm.svn-base:PREFIX ::= [a-z]+
Obalky/.svn/text-base/BibInfo.pm.svn-base:EAN ::= [0-9]{12}[0-9X] /* pripadne s pomlckami */
Obalky/.svn/text-base/BibInfo.pm.svn-base:ISBN ::= [0-9]{9}[0-9X] /* pripadne s pomlckami */
Obalky/.svn/text-base/BibInfo.pm.svn-base:978-123-4-56789-X
Obalky/.svn/text-base/BibInfo.pm.svn-base:123-4-56789-X
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$bibinfo->{ean13} = $object->ean13 if(defined $object->ean13);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$bibinfo->{oclc} = $object->oclc   if(defined $object->oclc);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$bibinfo->{nbn}  = $object->nbn	if(defined $object->nbn);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$bibinfo->{title} = $object->title if(defined $object->title);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	my $authors = $object->authors;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$bibinfo->{authors} = [split(/\;/,$authors)] if(defined $authors);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$bibinfo->{year} = $object->year if(defined $object->year);
Obalky/.svn/text-base/BibInfo.pm.svn-base:		if(defined $new->{$key} and not defined $old->{$key}) {
Obalky/.svn/text-base/BibInfo.pm.svn-base:			$old->{$key} = $new->{$key};
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $a->ean13 ne $b->ean13 if($a->ean13 and $b->ean13);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $a->oclc  ne $b->occl  if($a->oclc  and $b->oclc );
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $a->nbn   ne $b->nbn   if($a->nbn   and $b->nbn  );
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$id->{nbn} = $value if(defined $value);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $id->{nbn};
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$id->{oclc} = $value if(defined $value);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $id->{oclc};
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$id->{ean13} = $value if(defined $value);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $id->{ean13};
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $id->ean($isbn);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $id->ean($issn);
Obalky/.svn/text-base/BibInfo.pm.svn-base:		$code =~ s/\-//g; 
Obalky/.svn/text-base/BibInfo.pm.svn-base:			my $obj = Business::ISSN->new($code);
Obalky/.svn/text-base/BibInfo.pm.svn-base:			return undef unless($obj and $obj->is_valid);
Obalky/.svn/text-base/BibInfo.pm.svn-base:			$obj = Business::ISBN->new($code);
Obalky/.svn/text-base/BibInfo.pm.svn-base:			return unless($obj and $obj->is_valid);
Obalky/.svn/text-base/BibInfo.pm.svn-base:			my $ean13 = $obj->as_isbn13->as_string;
Obalky/.svn/text-base/BibInfo.pm.svn-base:			$ean13 =~ s/\-//g;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$id->{ean13} = $id->parse_code($code) if($code);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $id->{ean13};
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$isbn =~ s/\-//g; $isbn =~ s/^\s*//; $isbn =~ s/\s.*//;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$isbn =~ s/^.*?([0-9]{9,12}[0-9X]).*/$1/;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $pkg->parse_code($isbn);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $id->ean; # to_isbn, to_issn, to_ean,..?
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $pkg->new_from_params({ ean => $ean});
Obalky/.svn/text-base/BibInfo.pm.svn-base:	my $eanvalue = $string; $eanvalue =~ s/\-//g;
Obalky/.svn/text-base/BibInfo.pm.svn-base:				/^(isbn|issn|ean)?\_?(...)?(\d{7}\d?\d?[0-9X])$/i);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$ean = $pkg->parse_code($ean) if($ean);
Obalky/.svn/text-base/BibInfo.pm.svn-base:			my($key,$value) = ($1,$2) if(/^([a-z]+)[\_\:\=]?(.+)$/);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $pkg->new_from_params({ oclc => $oclc, nbn => $nbn, ean => $ean});
Obalky/.svn/text-base/BibInfo.pm.svn-base:	my $ean = $param->{ean} || $param->{isbn} || $param->{issn};
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$ean13 = $pkg->isbn_to_ean13($ean) if($ean);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$ean13 = $param->{ean13} if($param->{ean13});
Obalky/.svn/text-base/BibInfo.pm.svn-base:	my $year = ($param->{year} and $param->{year} =~ /(\d{4})/) ? $1 : undef;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return unless($ean13 or $param->{oclc} or 
Obalky/.svn/text-base/BibInfo.pm.svn-base:				  $param->{nbn} or $param->{title}); 
Obalky/.svn/text-base/BibInfo.pm.svn-base:		oclc => $param->{oclc},
Obalky/.svn/text-base/BibInfo.pm.svn-base:		nbn => $param->{nbn},
Obalky/.svn/text-base/BibInfo.pm.svn-base:		title => $param->{title},
Obalky/.svn/text-base/BibInfo.pm.svn-base:		authors => $param->{authors}, # ujistit se, ze to je pole?
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$object->update($id->save_to_hash());
Obalky/.svn/text-base/BibInfo.pm.svn-base:	map $hash->{$_} = $id->{$_}, grep $id->{$_}, qw/ean13 oclc nbn title year/;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	$hash->{authors} = join(";",@{$id->{authors}}) if($id->{authors});
Obalky/.svn/text-base/BibInfo.pm.svn-base:		push @out, $_."=".$id->{$_} if($id->{$_});
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $id->{ean13} ? "isbn=".$id->to_isbn : $id->to_params;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	my $isbn = $id->to_isbn;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $id->oclc ? $id->oclc : "NULL";
Obalky/.svn/text-base/BibInfo.pm.svn-base:		$ids{isbn} = $id->to_isbn;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $id->{title} if($id->{title});
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return "ISBN ".$id->to_isbn if($id->{ean13} and $id->{ean13} =~ /^97/);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return "EAN ".$id->to_isbn if($id->{ean13});
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return "OCLC ".$id->oclc if($id->oclc);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $id->to_some_param; # failback...
Obalky/.svn/text-base/BibInfo.pm.svn-base:		$ids{isbn} = $id->to_isbn;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	my($isbn,$ean) = $id->isbn_forms;
Obalky/.svn/text-base/BibInfo.pm.svn-base:				 oclc => $id->oclc, nbn => $id->nbn };
Obalky/.svn/text-base/BibInfo.pm.svn-base:		my $value = $info->{$key} or next;
Obalky/.svn/text-base/BibInfo.pm.svn-base:			HTML::Tiny->entity_encode($value)."</$key>\n";
Obalky/.svn/text-base/BibInfo.pm.svn-base:    if($id->ean13) {
Obalky/.svn/text-base/BibInfo.pm.svn-base:        if($id->ean13 =~ /^97/) {
Obalky/.svn/text-base/BibInfo.pm.svn-base:        	push @ids, {"name"=>"ISBN","value"=>$id->to_isbn} 
Obalky/.svn/text-base/BibInfo.pm.svn-base:        	push @ids, {"name"=>"EAN","value"=>$id->ean13};
Obalky/.svn/text-base/BibInfo.pm.svn-base:	push @ids, {"name"=>"OCLC Number","value"=>$id->oclc} if($id->oclc);
Obalky/.svn/text-base/BibInfo.pm.svn-base:	push @ids, {"name"=>"NKP-CNB","value"=>$id->nbn} if($id->nbn);
Obalky/.svn/text-base/BibInfo.pm.svn-base:# je tato knizka ceska? undef -- nelze rict
Obalky/.svn/text-base/BibInfo.pm.svn-base:	my $ean13 = $id->ean13 or return;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	eval { $obj13 = Business::ISBN->new($ean13); };
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $obj13->group_code eq '80' ? 1 : 0;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	my $ean13 = $bibinfo->ean13;
Obalky/.svn/text-base/BibInfo.pm.svn-base:		$obj13 = Business::ISBN->new($ean13);
Obalky/.svn/text-base/BibInfo.pm.svn-base:		$isbn13 = $ean = $obj13->as_string; $isbn13 =~ s/\-//g;
Obalky/.svn/text-base/BibInfo.pm.svn-base:		my $obj10 = $obj13->as_isbn10;
Obalky/.svn/text-base/BibInfo.pm.svn-base:		$isbn10 = $isbn = $obj10->as_string; $isbn10 =~ s/\-//g;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return Obalky::Config->url($secure)."/view?".$bibinfo->to_some_param;
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return "" unless $bibinfo->{authors};
Obalky/.svn/text-base/BibInfo.pm.svn-base:	my $last = pop @{$bibinfo->{authors}};
Obalky/.svn/text-base/BibInfo.pm.svn-base:	return $last || '' unless($bibinfo->{authors});
Obalky/.svn/text-base/BibInfo.pm.svn-base:	my $first = join(", ",@{$bibinfo->{authors}});
Obalky/.svn/text-base/BibInfo.pm.svn-base:Martin Sarfy - L<mailto:martin@sarfy.cz>
Obalky/.svn/text-base/Tools.pm.svn-base:	my $res = $ua->get($url);
Obalky/.svn/text-base/Tools.pm.svn-base:	die $url.": ".$res->status_line unless($res->is_success);
Obalky/.svn/text-base/Tools.pm.svn-base:	return $res->content if($res->is_success);
Obalky/.svn/text-base/Tools.pm.svn-base:	my $ua = LWP::UserAgent->new;
Obalky/.svn/text-base/Tools.pm.svn-base:	my $res = $ua->mirror($url,$file);
Obalky/.svn/text-base/Tools.pm.svn-base:	return ($res and $res->is_success) ? $file : undef;
Obalky/.svn/text-base/Tools.pm.svn-base:	my $sizecmd = "/usr/bin/identify -format '\%wx\%h' '$file' $DEVNULL";
Obalky/.svn/text-base/Tools.pm.svn-base:#	my $ctx = new MD5; $ctx->reset();
Obalky/.svn/text-base/Tools.pm.svn-base:#	$ctx->addfile(FILE);
Obalky/.svn/text-base/Tools.pm.svn-base:#	return $ctx->hexdigest();
Obalky/.svn/text-base/Tools.pm.svn-base:#	return $mem->get($id->to_string);
Obalky/.svn/text-base/Tools.pm.svn-base:#	$mem->set($id->to_string,$cover->id);
Obalky/.svn/text-base/Media.pm.svn-base:	$media->{price_vat} = $object->price_vat;
Obalky/.svn/text-base/Media.pm.svn-base:	$media->{price_cur} = $object->price_cur;
Obalky/.svn/text-base/Media.pm.svn-base:#	$media->{rating}    = $object->rating;
Obalky/.svn/text-base/Media.pm.svn-base:		#year => $param->{year},
Obalky/.svn/text-base/Media.pm.svn-base:	map $media->{$_} = $info->{$_}, grep defined $info->{$_}, @keys;
Obalky/.svn/text-base/Media.pm.svn-base:	my $book = $product->book;
Obalky/.svn/text-base/Media.pm.svn-base:	# vytvor cover jen pokud je novy/lisi-se
Obalky/.svn/text-base/Media.pm.svn-base:	my $cover_url = $media->{cover_url};
Obalky/.svn/text-base/Media.pm.svn-base:		my $tmp = $media->{cover_tmpfile};
Obalky/.svn/text-base/Media.pm.svn-base:			my $TMP_DIR = "/tmp/.obalky-media"; mkdir $TMP_DIR;
Obalky/.svn/text-base/Media.pm.svn-base:			$tmp = Obalky::Tools->wget_to_file(
Obalky/.svn/text-base/Media.pm.svn-base:						$cover_url, "$TMP_DIR/cover-".$product->id);
Obalky/.svn/text-base/Media.pm.svn-base:		$cover = DB->resultset('Cover')->create_from_file($book,$product,$tmp);
Obalky/.svn/text-base/Media.pm.svn-base:		$cover->update({ orig_url => $cover_url }) if($cover);
Obalky/.svn/text-base/Media.pm.svn-base:		$product->update({ cover => $cover });
Obalky/.svn/text-base/Media.pm.svn-base:	my $toc_text = $media->{toctext};
Obalky/.svn/text-base/Media.pm.svn-base:	my $toc_url  = $media->{tocpdf_url};
Obalky/.svn/text-base/Media.pm.svn-base:		$toc = DB->resultset('Toc')->find_or_create(
Obalky/.svn/text-base/Media.pm.svn-base:			my $tmp = $media->{tocpdf_tmpfile};
Obalky/.svn/text-base/Media.pm.svn-base:				Obalky::Tools->slurp($tmp) : Obalky::Tools->wget($toc_url);
Obalky/.svn/text-base/Media.pm.svn-base:			$toc->set_pdf($toc_url,$content,$tmp);
Obalky/.svn/text-base/Media.pm.svn-base:			$toc->update({ full_text => $toc_text });
Obalky/.svn/text-base/Media.pm.svn-base:		$product->update({ toc => $toc });
Obalky/.svn/text-base/Media.pm.svn-base:		$book->update({ toc => $toc });
Obalky/.svn/text-base/Media.pm.svn-base:	if($media->{review_html} or $media->{review_rating}) {
Obalky/.svn/text-base/Media.pm.svn-base:		die unless(defined $media->{review_impact});
Obalky/.svn/text-base/Media.pm.svn-base:#		$review = DB->resultset('Review')->find_or_create(
Obalky/.svn/text-base/Media.pm.svn-base:		my $review = eval { DB->resultset('Review')->create({ 
Obalky/.svn/text-base/Media.pm.svn-base:			html_text => $media->{review_html},
Obalky/.svn/text-base/Media.pm.svn-base:			rating => $media->{review_rating},
Obalky/.svn/text-base/Media.pm.svn-base:			impact => $media->{review_impact} 
Obalky/.svn/text-base/Media.pm.svn-base:		$book->recalc_rating;
Obalky/.svn/text-base/Media.pm.svn-base:		$book->recalc_review;
Obalky/.svn/text-base/Media.pm.svn-base:	if($media->{price_vat}) {
Obalky/.svn/text-base/Media.pm.svn-base:		die unless($media->{price_cur});
Obalky/.svn/text-base/Media.pm.svn-base:		$product->update({ price_vat => $media->{price_vat},
Obalky/.svn/text-base/Media.pm.svn-base:						   price_cur => $media->{price_cur} });
Obalky/.svn/text-base/Media.pm.svn-base:	my($vat,$cur) = ($media->{price_vat}, $media->{price_cur});
Obalky/.svn/entries:2011-06-22T19:35:35.405441Z
Obalky/.svn/entries:svn:special svn:externals svn:needs-lock
Obalky/.svn/entries:49789afe-7772-4492-8243-1a4b1d9f4dda
Obalky/.svn/entries:2011-02-04T08:12:55.000000Z
Obalky/.svn/entries:2011-06-22T19:35:35.405441Z
Obalky/.svn/entries:2011-07-25T01:20:45.000000Z
Obalky/.svn/entries:2011-10-12T15:53:43.030645Z
Obalky/.svn/entries:has-props
Obalky/.svn/entries:2010-02-04T14:22:53.000000Z
Obalky/.svn/entries:2010-02-21T17:05:10.484266Z
Obalky/.svn/entries:has-props
Obalky/.svn/entries:2011-06-21T11:31:58.000000Z
Obalky/.svn/entries:2011-06-22T19:35:35.405441Z
Obalky/BibInfo.pm:Obalky::BibInfo - zpracovani (zejmena) identifikatoru knizky
Obalky/BibInfo.pm:#	my $object = My::Module->new();
Obalky/BibInfo.pm:#	print $object->as_string;
Obalky/BibInfo.pm:PREFIX ::= [a-z]+
Obalky/BibInfo.pm:EAN ::= [0-9]{12}[0-9X] /* pripadne s pomlckami */
Obalky/BibInfo.pm:ISBN ::= [0-9]{9}[0-9X] /* pripadne s pomlckami */
Obalky/BibInfo.pm:978-123-4-56789-X
Obalky/BibInfo.pm:123-4-56789-X
Obalky/BibInfo.pm:	$bibinfo->{ean13} = $object->ean13 if(defined $object->ean13);
Obalky/BibInfo.pm:	$bibinfo->{oclc} = $object->oclc   if(defined $object->oclc);
Obalky/BibInfo.pm:	$bibinfo->{nbn}  = $object->nbn	if(defined $object->nbn);
Obalky/BibInfo.pm:	$bibinfo->{title} = $object->title if(defined $object->title);
Obalky/BibInfo.pm:	my $authors = $object->authors;
Obalky/BibInfo.pm:	$bibinfo->{authors} = [split(/\;/,$authors)] if(defined $authors);
Obalky/BibInfo.pm:	$bibinfo->{year} = $object->year if(defined $object->year);
Obalky/BibInfo.pm:		if(defined $new->{$key} and not defined $old->{$key}) {
Obalky/BibInfo.pm:			$old->{$key} = $new->{$key};
Obalky/BibInfo.pm:	return $a->ean13 ne $b->ean13 if($a->ean13 and $b->ean13);
Obalky/BibInfo.pm:	return $a->oclc  ne $b->occl  if($a->oclc  and $b->oclc );
Obalky/BibInfo.pm:	return $a->nbn   ne $b->nbn   if($a->nbn   and $b->nbn  );
Obalky/BibInfo.pm:	$id->{nbn} = $value if(defined $value);
Obalky/BibInfo.pm:	return $id->{nbn};
Obalky/BibInfo.pm:	$id->{oclc} = $value if(defined $value);
Obalky/BibInfo.pm:	return $id->{oclc};
Obalky/BibInfo.pm:	$id->{ean13} = $value if(defined $value);
Obalky/BibInfo.pm:	return $id->{ean13};
Obalky/BibInfo.pm:	return $id->ean($isbn);
Obalky/BibInfo.pm:	return $id->ean($issn);
Obalky/BibInfo.pm:		$code =~ s/\-//g; 
Obalky/BibInfo.pm:			my $obj = Business::ISSN->new($code);
Obalky/BibInfo.pm:			return undef unless($obj and $obj->is_valid);
Obalky/BibInfo.pm:			$obj = Business::ISBN->new($code);
Obalky/BibInfo.pm:			return unless($obj and $obj->is_valid);
Obalky/BibInfo.pm:			my $ean13 = $obj->as_isbn13->as_string;
Obalky/BibInfo.pm:			$ean13 =~ s/\-//g;
Obalky/BibInfo.pm:	$id->{ean13} = $id->parse_code($code) if($code);
Obalky/BibInfo.pm:	return $id->{ean13};
Obalky/BibInfo.pm:	$isbn =~ s/\-//g; $isbn =~ s/^\s*//; $isbn =~ s/\s.*//;
Obalky/BibInfo.pm:	$isbn =~ s/^.*?([0-9]{9,12}[0-9X]).*/$1/;
Obalky/BibInfo.pm:	return $pkg->parse_code($isbn);
Obalky/BibInfo.pm:	return $id->ean; # to_isbn, to_issn, to_ean,..?
Obalky/BibInfo.pm:	return $pkg->new_from_params({ ean => $ean});
Obalky/BibInfo.pm:	my $eanvalue = $string; $eanvalue =~ s/\-//g;
Obalky/BibInfo.pm:				/^(isbn|issn|ean)?\_?(...)?(\d{7}\d?\d?[0-9X])$/i);
Obalky/BibInfo.pm:	$ean = $pkg->parse_code($ean) if($ean);
Obalky/BibInfo.pm:			my($key,$value) = ($1,$2) if(/^([a-z]+)[\_\:\=]?(.+)$/);
Obalky/BibInfo.pm:	return $pkg->new_from_params({ oclc => $oclc, nbn => $nbn, ean => $ean});
Obalky/BibInfo.pm:	my $ean = $param->{ean} || $param->{isbn} || $param->{issn};
Obalky/BibInfo.pm:	$ean13 = $pkg->isbn_to_ean13($ean) if($ean);
Obalky/BibInfo.pm:	$ean13 = $param->{ean13} if($param->{ean13});
Obalky/BibInfo.pm:	my $year = ($param->{year} and $param->{year} =~ /(\d{4})/) ? $1 : undef;
Obalky/BibInfo.pm:	return unless($ean13 or $param->{oclc} or 
Obalky/BibInfo.pm:				  $param->{nbn} or $param->{title}); 
Obalky/BibInfo.pm:		oclc => $param->{oclc},
Obalky/BibInfo.pm:		nbn => $param->{nbn},
Obalky/BibInfo.pm:		title => $param->{title},
Obalky/BibInfo.pm:		authors => $param->{authors}, # ujistit se, ze to je pole?
Obalky/BibInfo.pm:	$object->update($id->save_to_hash());
Obalky/BibInfo.pm:	map $hash->{$_} = $id->{$_}, grep $id->{$_}, qw/ean13 oclc nbn title year/;
Obalky/BibInfo.pm:	$hash->{authors} = join(";",@{$id->{authors}}) if($id->{authors});
Obalky/BibInfo.pm:		push @out, $_."=".$id->{$_} if($id->{$_});
Obalky/BibInfo.pm:	return $id->{ean13} ? "isbn=".$id->to_isbn : $id->to_params;
Obalky/BibInfo.pm:	my $isbn = $id->to_isbn;
Obalky/BibInfo.pm:	return $id->oclc ? $id->oclc : "NULL";
Obalky/BibInfo.pm:		$ids{isbn} = $id->to_isbn;
Obalky/BibInfo.pm:	return $id->{title} if($id->{title});
Obalky/BibInfo.pm:	return "ISBN ".$id->to_isbn if($id->{ean13} and $id->{ean13} =~ /^97/);
Obalky/BibInfo.pm:	return "EAN ".$id->to_isbn if($id->{ean13});
Obalky/BibInfo.pm:	return "OCLC ".$id->oclc if($id->oclc);
Obalky/BibInfo.pm:	return $id->to_some_param; # failback...
Obalky/BibInfo.pm:		$ids{isbn} = $id->to_isbn;
Obalky/BibInfo.pm:	my($isbn,$ean) = $id->isbn_forms;
Obalky/BibInfo.pm:				 oclc => $id->oclc, nbn => $id->nbn };
Obalky/BibInfo.pm:		my $value = $info->{$key} or next;
Obalky/BibInfo.pm:			HTML::Tiny->entity_encode($value)."</$key>\n";
Obalky/BibInfo.pm:    if($id->ean13) {
Obalky/BibInfo.pm:        if($id->ean13 =~ /^97/) {
Obalky/BibInfo.pm:        	push @ids, {"name"=>"ISBN","value"=>$id->to_isbn} 
Obalky/BibInfo.pm:        	push @ids, {"name"=>"EAN","value"=>$id->ean13};
Obalky/BibInfo.pm:	push @ids, {"name"=>"OCLC Number","value"=>$id->oclc} if($id->oclc);
Obalky/BibInfo.pm:	push @ids, {"name"=>"NKP-CNB","value"=>$id->nbn} if($id->nbn);
Obalky/BibInfo.pm:# je tato knizka ceska? undef -- nelze rict
Obalky/BibInfo.pm:	my $ean13 = $id->ean13 or return;
Obalky/BibInfo.pm:	eval { $obj13 = Business::ISBN->new($ean13); };
Obalky/BibInfo.pm:	return $obj13->group_code eq '80' ? 1 : 0;
Obalky/BibInfo.pm:	my $ean13 = $bibinfo->ean13;
Obalky/BibInfo.pm:		$obj13 = Business::ISBN->new($ean13);
Obalky/BibInfo.pm:		$isbn13 = $ean = $obj13->as_string; $isbn13 =~ s/\-//g;
Obalky/BibInfo.pm:		my $obj10 = $obj13->as_isbn10;
Obalky/BibInfo.pm:		$isbn10 = $isbn = $obj10->as_string; $isbn10 =~ s/\-//g;
Obalky/BibInfo.pm:	return Obalky::Config->url($secure)."/view?".$bibinfo->to_some_param;
Obalky/BibInfo.pm:	return "" unless $bibinfo->{authors};
Obalky/BibInfo.pm:	my $last = pop @{$bibinfo->{authors}};
Obalky/BibInfo.pm:	return $last || '' unless($bibinfo->{authors});
Obalky/BibInfo.pm:	my $first = join(", ",@{$bibinfo->{authors}});
Obalky/BibInfo.pm:Martin Sarfy - L<mailto:martin@sarfy.cz>
Obalky.pm:our $DEBUG = -e "$ROOT_DIR/debug" ? 1 : 0;
Obalky.pm:#         -Debug: activates the debug mode for very useful log messages
Obalky.pm:#		-Debug
Obalky.pm:__PACKAGE__->config( name => 'Obalky',
Obalky.pm:    root => __PACKAGE__->path_to('www'),
Obalky.pm:        storage => "/tmp/.obalky-session",
Obalky.pm:##__PACKAGE__->deny_access_unless(
Obalky.pm:	my $library = DB->resultset('Library')->find_by_referer($c->req->referer);
Obalky.pm:	my $cookie_visitor = $c->request->cookie('visitor_id');
Obalky.pm:	my $visitor = DB->resultset('Visitor')->get_visitor( $c->request->address,
Obalky.pm:	$c->response->cookies->{'visitor_id'} = {
Obalky.pm:		value => $visitor->id,
Obalky.pm:	my $session_info = $c->request->cookie('session_info');
Obalky.pm:	eval { $session_info = $session_info->value }; # ie/ff?
Obalky.pm:		$session_info = sprintf("%08d_%s_%06d",$visitor->id,
Obalky.pm:					DateTime->now(),int(rand(999999)));
Obalky.pm:		$c->response->cookies->{'session_info'} = {
Obalky.pm:# api/cover - knihovna+visitor, book, obalka, request 
Obalky.pm:# api/books - knihovna+visitor, [ obalka, request ]+
Obalky.pm:__PACKAGE__->setup;
Obalky.pm:Obalky - Catalyst based application
UniMARC.pm:   	$self->{tag} = $element->{Attributes}->{'{}tag'}->{Value}
UniMARC.pm:		if($element->{Name} =~ /^(data|control)field$/i);
UniMARC.pm:#  	$self->{subf} = $element->{Attributes}->{'{}code'}->{Value}
UniMARC.pm:#		if($element->{Name} =~ /^subfield$/i);
UniMARC.pm:	my $code = $element->{Attributes}->{'{}code'};
UniMARC.pm:	$self->{code} = $code->{Value} if($code and $code->{Value});
UniMARC.pm:	$self->{code} = ''; 
UniMARC.pm:	$self->{tag} = '' if($element->{Name} =~ /^(data|control)field$/i);
UniMARC.pm:	$self->{id} .= $chars->{Data} if($self->{tag} eq '001');
UniMARC.pm:	$self->{url} .= $chars->{Data} 
UniMARC.pm:		if($self->{tag} =~ /^X0./i and $self->{code} eq 'o');
UniMARC.pm:	$self->{x00} .= $chars->{Data}." " if($self->{tag} =~ /^X0./i);
UniMARC.pm:	$self->{isbn} .= $chars->{Data} 
UniMARC.pm:		if($self->{tag} eq '010' and $self->{code} eq 'a');
