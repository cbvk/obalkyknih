/// version 18

/// url na backend
var urlMain = "www.obalkyknih.cz"
var urlPart = "/"
var urlMetadata = "api/books"
var urlCoverFile = "file/cover"
var urlCoverApi = "api/cover"
var urlParams = "?books="
var urlTocFile = "file/toc"
var urlTocApiThumbnail = "api/toc/thumbnail"
var urlTocApiPdf = "api/toc/pdf"
var uriPartTocThumbnail = "/thumbnail"
var uriPartTocPdf = "/pdf"
var uriAlive = "runtime/alive"
/// kolekce s metadaty tak jak je pojmenovana v mongodb
var metaCollection = "okcz"
/// url frontendu / spolecne url vsech frontnendu
var urlReplace = "cache.obalkyknih.cz"
/// IP adresa backendu - udsud je mozne prijimat ridici prikazy
var ipBackend = "195.113.145.13"
/// timeout dotazu na backend (ms)
var timeout = 5 * 1000;
/// doba, po ktere se opet zkusime doptat backendu po timeoutu (ms)
var timeOutDuration = 1000 * 1000;
/// doba, po ktere se opet pokusime stahnout nahled, pokud ho backend nemel (ms)
var timeNotfound = 86400 * 1000;
/// adresar s TOC dokumenty
var tocFileDir = "/home/users/okcz/static/toc/"

// =========================================

var request = require('request');
var toEan = require('to-ean').toEan;
var URL = require('url');
var fileSystem = require('fs');
var md5 = require('MD5');
var http = require('http');
var qs = require('querystring');
var mongo = require('mongodb');
var crypto = require('crypto');
var partParser = require('book-part-parser');

var cryptoPasskey = "0kcz,ApIv.3*";
var regexpSigla = new RegExp(/^[A-Z0-9]{6}$/);

var etags = {}; // obsahuje vsechny platne etag pro cache prohlizecu
var etagCoverMatch = {}; // pocet dotazu na obalku kesovanych prohlizecem od spusteni
var etagFileMatch = {}; // pocet dotazu na favicon, obalky-custom.js atd., kesovanych prohlizecem od spusteni
var etagTocPdfMatch = {}; // pocet dotazu na TOC PDF, kesovanych prohlizecem od spusteni
var etagTocThumbMatch = {}; // pocet dotazu na TOC nahled, kesovanych prohlizecem od spusteni
var fileRequests = {}; // pocet dotazu na favicon, obalky-custom.js, atd.
var metaRequests = {}; // pocet dotazu na metadata od spusteni
var metaFetches = {}; // pocet nacteni metadat z backendu od spusteni
var metaRemoves = 0; // pocet smazanych metadat z backendu od spusteni
var coverRequests = {}; // pocet dotazu obalky pres urlCoverFile od spusteni
var coverApiRequests = {}; // pocet dotazu obalky pres urlCoverApi od spusteni
var coverFetches = {}; // pocet nacteni obalky z backendu od spusteni
var coverNotfound = {}; // pocet nenalezenych obalek z backendu od spusteni
var coverRemoves = 0; // pocet smazanych obalek z backendu od spusteni
var tocThumbnailRequests = {}; // pocet dotazu TOC nahledu pres urlTocFile thumbnail (/file/toc/xxxxxx/thumbnail) od spusteni
var tocThumbnailApiRequests = {}; // pocet dotazu TOC nahledu pres urlTocApi thumbnail od spusteni
var tocThumbnailFetches = {}; // pocet nacteni TOC nahledu z backendu od spusteni
var tocThumbnailNotfound = {}; // pocet nenalezenych TOC nahledu z backendu od spusteni
var tocThumbnailRemoves = 0; // pocet smazanych TOC nahledu z backendu od spusteni
var tocPdfRequests = {}; // pocet dotazu na TOC dokumenty pres urlTocFile thumbnail (/file/toc/xxxxxx/thumbnail) od spusteni
var tocPdfApiRequests = {}; // pocet dotazu na TOC dokumenty pres urlTocApiThumbnail od spusteni
var tocPdfNotfound = {}; // pocet nenalezenych na TOC dokumenty z backendu od spusteni
var timeoutCount = {}; // pocet timeout nedostupnosti backendu od spusteni
var dateTimeout = 0; // cas do kdy je platny timeout
var dateStartup = new Date(); // doba startu
var referers = {}; // povolene referer hlavicky
var perms = {}; // povolene ip adresy

var placeholderData = [
  0x47,0x49, 0x46,0x38, 0x39,0x61, 0x01,0x00, 0x01,0x00, 0x80,0x00, 0x00,0xFF, 0xFF,0xFF,
  0xFF,0xFF, 0xFF,0x21, 0xF9,0x04, 0x01,0x0A, 0x00,0x01, 0x00,0x2c, 0x00,0x00, 0x00,0x00,
  0x01,0x00, 0x01,0x00, 0x00,0x02, 0x02,0x4C, 0x01,0x00, 0x3B
];
var placeholder = new Buffer(placeholderData);

// =========================================

var server = function (req, response, db)
{
  var requrl = req.url;
  // console.log('referers: ' + JSON.stringify(referers));
  // console.log('perms: ' + JSON.stringify(perms));
  // console.log(req.connection.remoteAddress);
  // console.log(requrl);
  var query = URL.parse(requrl,true).query;
  // console.log('query: ' + JSON.stringify(query));
  var date = new Date();
  var timestamp = date.toISOString();
  var now = date.getTime();
  // console.log(timestamp);
  // console.log('HEAD: ' + JSON.stringify(req.headers));
  var etag=req.headers['if-none-match']||req.headers['Etag'];
  var referer=req.headers['referer'];
  var remoteIP=req.connection.remoteAddress;
  var encsigla=query.encsigla;
  // console.log(etags);    
  // console.log('index: ' + requrl.indexOf(urlMetadata));

  /**
   * ETAG MATCH
   **/
  if (etags[etag] !== undefined) {
    var sigla=refererValid(referer,remoteIP,encsigla);
    var etagPrefix=etag.substring(0,4);
    if (etagPrefix==='file') {
      etagFileMatch[sigla]++||(etagFileMatch[sigla]=1);
      if (sigla!='admin') etagFileMatch.admin++||(etagFileMatch.admin=1);
    } else if (etagPrefix==='tocp') {
      etagTocPdfMatch[sigla]++||(etagTocPdfMatch[sigla]=1);
      if (sigla!='admin') etagTocPdfMatch.admin++||(etagTocPdfMatch.admin=1);
    } else if (etagPrefix==='toct') {
      etagTocThumbMatch[sigla]++||(etagTocThumbMatch[sigla]=1);
      if (sigla!='admin') etagTocThumbMatch.admin++||(etagTocThumbMatch.admin=1);
    } else {
      etagCoverMatch[sigla]++||(etagCoverMatch[sigla]=1);
      if (sigla!='admin') etagCoverMatch.admin++||(etagCoverMatch.admin=1);
    }
    response.statusCode = 304;
    response.end();
  }
  
  /**
   * STATICKE SOUBORY
   **/
  else if (requrl==='/favicon.ico' || requrl==='/obalky-custom.js' || requrl==='/obalky-functions.js') {
    var sigla=refererValid(referer,remoteIP,encsigla);
    if (!sigla) {
      response.writeHead(404);
      response.end('referer');
      return;
    }
    fileRequests[sigla]++||(fileRequests[sigla]=1);
    if (sigla!='admin') fileRequests.admin++||(fileRequests.admin=1);
    
    if (requrl.substring(requrl.length-4)==='.ico')
      response.writeHead(200, {'Etag':'file-'+md5(requrl), 'Content-Type':'image/x-icon'});
    if (requrl.substring(requrl.length-2)==='.js')
      response.writeHead(200, {'Etag':'file-'+md5(requrl), 'Content-Type':'text/javascript'});
    else
      response.writeHead(200, {'Etag':'file-'+md5(requrl)});
    
    etags['file-'+md5(requrl)]=null;
    var readStream = fileSystem.createReadStream('static'+requrl);
    readStream.pipe(response);
  }
  
  /**
   * FILE COVER
   **/
  else if ((requrl.indexOf(urlCoverFile))>0) {
    var sigla=refererValid(referer,remoteIP,encsigla);
    if (!sigla) {
      response.writeHead(404);
      response.end('referer');
      return;
    }

    /// cover request
    coverRequests[sigla]++||(coverRequests[sigla]=1);
    if (sigla!='admin') coverRequests.admin++||(coverRequests.admin=1);
    cover(requrl.split('?')[0]);
  }
  
  /**
   * FILE TOC (thumbnail + pdf)
   **/
  else if ((requrl.indexOf(urlTocFile))>0) {
    var sigla=refererValid(referer,remoteIP,encsigla);
    if (!sigla) {
      response.writeHead(404);
      response.end('referer');
      return;
    }
    var reqUrl = requrl.split('?')[0];

    if ((reqUrl.indexOf(uriPartTocThumbnail))>0) {
      /// TOC thumbnail request
      tocThumbnailRequests[sigla]++||(tocThumbnailRequests[sigla]=1);
      if (sigla!='admin') tocThumbnailRequests.admin++||(tocThumbnailRequests.admin=1);
      cover(reqUrl);
    } else if ((reqUrl.indexOf(uriPartTocPdf))>0) {
      /// TOC file request
      tocPdfRequests[sigla]++||(tocPdfRequests[sigla]=1);
      if (sigla!='admin') tocPdfRequests.admin++||(tocPdfRequests.admin=1);
      toc(reqUrl);
    }
  }
  
  /**
   * API COVER
   **/
  else if ((requrl.indexOf(urlCoverApi))>0) {
    var sigla=refererValid(referer,remoteIP,encsigla)
    if (!sigla) {
      response.writeHead(404);
      response.end('referer');
      return;
    }
    coverApiRequests[sigla]++||(coverApiRequests[sigla]=1);
    if (sigla!='admin') coverApiRequests.admin++||(coverApiRequests.admin=1);

    if (query.isbn) {
      var isbn=query.isbn.split(' ')[0];
      var value=toEan(isbn);
      // console.log('toEan: ' + value);
      var sel={ean : value};
      var bib={isbn : value};
    }
    else if (query.nbn) {
      var value=query.nbn;
      var sel=bib={nbn : value};
    }
    else if (query.oclc) {
      var value=query.oclc;
      var sel=bib={oclc : value};
    } else if (query.multi) {
      var bib={};
      var sel={$or:[]};
      try {
        var multis=JSON.parse(query.multi);
      } catch (err) {
        response.writeHead(404);
        response.end('check query syntax');
        return;
      }
      if (multis.isbn) { 
        var isbn=multis.isbn.split(' ')[0];
        var value=toEan(isbn);
        sel.$or.push({ean:value});
        bib.isbn=value;
      }
      if (multis.oclc) { sel.$or.push({oclc:multis.oclc}); bib.oclc=multis.oclc; }
      if (multis.nbn) { sel.$or.push({nbn:multis.nbn}); bib.nbn=multis.nbn; }
      
      // parsovani identifikatoru vicesvazkoveho dila a periodika (parse_note se pouziva pokud knihovni system nema data rok/rocnik/cislo/cislo casti/nazev casti oddelene)
      if (multis.part_note) {
        var parts = partParser.parse(multis.part_note);
        if (parts.year)   multis.part_year = parts.year;
        if (parts.volume) multis.part_volume = parts.volume;
        if (parts.part)   multis.part_no = parts.part;
        if (parts.part && !parts.year && !parts.volume) multis.part_name = parts.part;
      }
      // normalizace
      if (multis.part_year)   multis.part_year = partParser.normalizeYear(multis.part_year);
      if (multis.part_volume) multis.part_volume = partParser.normalizeVolume(multis.part_volume);
      if (multis.part_no)     multis.part_no = partParser.normalizePart(multis.part_no);
      if (multis.part_name)   multis.part_name = partParser.normalizePart(multis.part_name);
      
      // dotaz na periodikum
      if (multis.part_no && (multis.part_year || multis.part_volume)) {
        if (multis.part_year) { sel.part_year=multis.part_year; bib.part_year=multis.part_year; }
        if (multis.part_volume) { sel.part_volume=multis.part_volume; bib.part_volume=multis.part_volume; }
        if (multis.part_no) { sel.part_no=multis.part_no; bib.part_no=multis.part_no; }
      }
      // dotaz na vicesvazkovou monografii pomoci part_no (245n) a zaroven part_name (245p)
      else if (multis.part_no && multis.part_name) {
        bib.part_no = multis.part_no;
        bib.part_name = multis.part_name;
        sel.$and=[{"$or":[{"part_no":multis.part_no},{"part_name":multis.part_name}]}];
      }
      // dotaz na vicesvazkovou monografii pouze pomoci part_no (245n)
      else if (multis.part_no) {
        bib.part_no = multis.part_no;
        sel.$and=[{"part_no":multis.part_no}];
      }
      // dotaz na vicesvazkovou monografii pouze pomoci part_name (245p)
      else if (multis.part_name) {
        bib.part_name = multis.part_name;
        sel.$and=[{"part_name":multis.part_name}];
      }
      // dotaz na monografii, nebo souborny zaznam
      else {
        sel.$and=[{"$or":[{"part_no":null,"part_name":null},{"part_most_recent":1.0}]}];
      }
      
      if (sel.$or.length>0) var value=true; // povolime pokracovat; udelat dotaz na metadata do DB
    } else {
      console.log("identifier "+requrl);
      response.writeHead(200, {'Content-Type': 'image/gif'});
      response.end(placeholder);
      return;
    }

    if (!value) {
      response.writeHead(200, {'Content-Type': 'image/gif'});
      response.end(placeholder);
      return;
    }

    db.collection(metaCollection).find(sel).toArray(function (err, items) {
      if (!items) {
        response.end('wrong request');
        return;
      }
      if (!items.length) {
        // obalka neni v DB a je potrebne nacist z back-end API metadata
        // funkce metadata() rovnou posle klientovi obalku
        metadata([{bibinfo:bib,permalink:"a"}],[],true,false,false);
        return;
      }
      else {
        if (items.length==1) {
          // byl nalezen jediny zaznam, nemusime delat slozitosti jako v nasledujicim "else"
          var item=items[0];
          if (item.ean!=bib.isbn && item.oclc!=bib.oclc && item.nbn!=bib.nbn) {
            item=null;
          }
          if (item && Object.keys(bib).length>1) {
            // pokud se ptame na vice identifikatoru a nalezeny zaznam neobsahuje obrazek
            // jeste furt je sance, ze obrazek nalezneme na BE, pokud se zeptame na zbyle identifikatory bez shody v nalezenem zaznamu
            var itemImgExists=(item.cover_medium_url || item.cover_thumbnail_url || item.cover_icon_url);
            if (!itemImgExists) {
              if (item.ean==bib.isbn) delete bib.isbn;
              if (item.oclc==bib.oclc) delete bib.oclc;
              if (item.nbn==bib.nbn) delete bib.nbn;
              if (Object.keys(bib).length>0) {
                metadata([{bibinfo:bib,permalink:"a"}],[],true,false,false);
                return;
              }
            }
          }
        }
        else {
          // v pripade dotazu pomoci multi identifikatoru muzeme dostat vice zaznamu
          // nutne rozhodnout podle priority, kterou obalku zobrazit
          for (var i=0; i<3; i++) {
            for (var j=0; j<items.length; j++) {
              var itemTmp=items[j];
              var itemImgExists=(itemTmp.cover_medium_url || itemTmp.cover_thumbnail_url || itemTmp.cover_icon_url);
              if (!itemImgExists) continue; // pokud metazaznam neobsahuje obrazek, nepokracuj
              
              if (i==0) { // ISBN
                if ((itemTmp.ean==bib.isbn && itemTmp.part_most_recent=='1') || (itemTmp.ean==bib.isbn && itemTmp.part_year==bib.part_year && itemTmp.part_no==bib.part_no) || (itemTmp.ean==bib.isbn && itemTmp.part_volume==bib.part_volume && itemTmp.part_no==bib.part_no) || (itemTmp.ean==bib.isbn && !bib.part_year && !bib.part_volume && itemTmp.part_no==bib.part_no)) var item=itemTmp;
              } else if (i==1) { // OCLC
                if ((itemTmp.oclc==bib.oclc && itemTmp.part_most_recent=='1') || (itemTmp.oclc==bib.oclc && itemTmp.part_year==bib.part_year && itemTmp.part_no==bib.part_no) || (itemTmp.oclc==bib.oclc && itemTmp.part_volume==bib.part_volume && itemTmp.part_no==bib.part_no) || (itemTmp.oclc==bib.oclc && !bib.part_year && !bib.part_volume && itemTmp.part_no==bib.part_no)) var item=itemTmp;
              } else if (i==2) { // NBN
                if ((itemTmp.nbn==bib.nbn && itemTmp.part_most_recent=='1') || (itemTmp.nbn==bib.nbn && itemTmp.part_year==bib.part_year && itemTmp.part_no==bib.part_no) || (itemTmp.nbn==bib.nbn && itemTmp.part_volume==bib.part_volume && itemTmp.part_no==bib.part_no) || (itemTmp.nbn==bib.nbn && !bib.part_year && !bib.part_volume && itemTmp.part_no==bib.part_no)) var item=itemTmp;
              }
              if (item) break; // prvni nalezeny zaznam podle priorit je ten pravy
            }
            if (item) break; // prvni nalezeny zaznam podle priorit je ten pravy
          }
        }

        // pokud se metazaznam V DB najde, ale neobsahuje obrazek, nebo nebyla nalezena zhoda, nepokracuj
        if (!item) {
          response.writeHead(200, {'Content-Type': 'image/gif'});
          response.end(placeholder);
          return;
        }
        
        var coverUrl = getUrlByType(item, query.type);
        if (!coverUrl) {
          response.writeHead(200, {'Content-Type': 'image/gif'});
          response.end(placeholder);
          return;
        }
        
        cover(coverUrl,true,false);
      }
    })
  }
  
  /**
   * API TOC THUMBNAIL
   **/
  else if ((requrl.indexOf(urlTocApiThumbnail))>0) {
    var sigla=refererValid(referer,remoteIP,encsigla)
    if (!sigla) {
      response.writeHead(404);
      response.end('referer');
      return;
    }
    tocThumbnailApiRequests[sigla]++||(tocThumbnailApiRequests[sigla]=1);
    if (sigla!='admin') tocThumbnailApiRequests.admin++||(tocThumbnailApiRequests.admin=1);

    if (query.isbn) {
      var isbn=query.isbn.split(' ')[0];
      var value=toEan(isbn);
      var sel={ean : value};
      var bib={isbn : value};
    }
    else if (query.nbn) {
      var value=query.nbn;
      var sel=bib={nbn : value};
    }
    else if (query.oclc) {
      var value=query.oclc;
      var sel=bib={oclc : value};
    } else if (query.multi) {
      var bib={};
      var sel={$or:[]};
      try {
        var multis=JSON.parse(query.multi);
      } catch (err) {
        response.writeHead(404);
        response.end('check query syntax');
        return;
      }
      if (multis.isbn) { 
        var isbn=multis.isbn.split(' ')[0];
        var value=toEan(isbn);
        sel.$or.push({ean:value});
        bib.isbn=value;
      }
      if (multis.oclc) { sel.$or.push({oclc:multis.oclc}); bib.oclc=multis.oclc; }
      if (multis.nbn) { sel.$or.push({nbn:multis.nbn}); bib.nbn=multis.nbn; }
      
      // parsovani identifikatoru vicesvazkoveho dila a periodika (parse_note se pouziva pokud knihovni system nema data rok/rocnik/cislo/cislo casti/nazev casti oddelene)
      if (multis.part_note) {
        var parts = partParser.parse(multis.part_note);
        if (parts.year)   multis.part_year = parts.year;
        if (parts.volume) multis.part_volume = parts.volume;
        if (parts.part)   multis.part_no = parts.part;
        if (parts.part && !parts.year && !parts.volume) multis.part_name = parts.part;
      }
      // normalizace
      if (multis.part_year)   multis.part_year = partParser.normalizeYear(multis.part_year);
      if (multis.part_volume) multis.part_volume = partParser.normalizeVolume(multis.part_volume);
      if (multis.part_no)     multis.part_no = partParser.normalizePart(multis.part_no);
      if (multis.part_name)   multis.part_name = partParser.normalizePart(multis.part_name);
      
      // dotaz na periodikum
      if (multis.part_no && (multis.part_year || multis.part_volume)) {
        if (multis.part_year) { sel.part_year=multis.part_year; bib.part_year=multis.part_year; }
        if (multis.part_volume) { sel.part_volume=multis.part_volume; bib.part_volume=multis.part_volume; }
        if (multis.part_no) { sel.part_no=multis.part_no; bib.part_no=multis.part_no; }
      }
      // dotaz na vicesvazkovou monografii pomoci part_no (245n) a zaroven part_name (245p)
      else if (multis.part_no && multis.part_name) {
        bib.part_no = multis.part_no;
        bib.part_name = multis.part_name;
        sel.$and=[{"$or":[{"part_no":multis.part_no},{"part_name":multis.part_name}]}];
      }
      // dotaz na vicesvazkovou monografii pouze pomoci part_no (245n)
      else if (multis.part_no) {
        bib.part_no = multis.part_no;
        sel.$and=[{"part_no":multis.part_no}];
      }
      // dotaz na vicesvazkovou monografii pouze pomoci part_name (245p)
      else if (multis.part_name) {
        bib.part_name = multis.part_name;
        sel.$and=[{"part_name":multis.part_name}];
      }
      // dotaz na monografii, nebo souborny zaznam
      else {
        sel.$and=[{"$or":[{"part_no":null,"part_name":null},{"part_most_recent":1.0}]}];
      }
      
      if (sel.$or.length>0) var value=true; // povolime pokracovat; udelat dotaz na metadata do DB
    } else {
      response.writeHead(404);
      response.end('identifier');
      return;
    }

    if (!value) {
      response.writeHead(200, {'Content-Type': 'image/gif'});
      response.end(placeholder);
      return;
    }

    db.collection(metaCollection).find(sel).toArray(function (err, items) {
      if (!items) {
        response.end('wrong request');
        return;
      }
      if (!items.length) {
        // nahled TOC neni v DB a je potrebne nacist z back-end API metadata
        // funkce metadata() rovnou posle klientovi nahled TOC
        metadata([{bibinfo:bib,permalink:"a"}],[],false,true,false);
        return;
      }
      else {
        if (items.length==1) {
          // byl nalezen jediny zaznam, nemusime delat slozitosti jako v nasledujicim "else"
          var item=items[0];
          if (item.ean!=bib.isbn && item.oclc!=bib.oclc && item.nbn!=bib.nbn) {
            item=null;
          }
          if (item && Object.keys(bib).length>1) {
            // pokud se ptame na vice identifikatoru a nalezeny zaznam neobsahuje obsazek
            // jeste furt je sance, ze obsazek nalezneme na BE, pokud se zeptame na zbyle identifikatory bez shody v nalezenem zaznamu
            var itemImgExists=item.toc_thumbnail_url;
            if (!itemImgExists) {
              if (item.ean==bib.isbn) delete bib.isbn;
              if (item.oclc==bib.oclc) delete bib.oclc;
              if (item.nbn==bib.nbn) delete bib.nbn;
              if (Object.keys(bib).length>0) {
                metadata([{bibinfo:bib,permalink:"a"}],[],false,true,false);
                return;
              }
            }
          }
        }
        else {
          // v pripade dotazu pomoci multi identifikatoru muzeme dostat vice zaznamu
          // nutne rozhodnout podle priority, kterou obalku zobrazit
          for (var i=0; i<3; i++) {
            for (var j=0; j<items.length; j++) {
              var itemTmp=items[j];
              var itemImgExists=itemTmp.toc_thumbnail_url;
              if (!itemImgExists) continue; // pokud metazaznam neobsahuje obrazek, nepokracuj
              
              if (i==0) { // ISBN
                if ((itemTmp.ean==bib.isbn && itemTmp.part_most_recent=='1') || (itemTmp.ean==bib.isbn && itemTmp.part_year==bib.part_year && itemTmp.part_no==bib.part_no) || (itemTmp.ean==bib.isbn && itemTmp.part_volume==bib.part_volume && itemTmp.part_no==bib.part_no) || (itemTmp.ean==bib.isbn && !bib.part_year && !bib.part_volume && itemTmp.part_no==bib.part_no)) var item=itemTmp;
              } else if (i==1) { // OCLC
                if ((itemTmp.oclc==bib.oclc && itemTmp.part_most_recent=='1') || (itemTmp.oclc==bib.oclc && itemTmp.part_year==bib.part_year && itemTmp.part_no==bib.part_no) || (itemTmp.oclc==bib.oclc && itemTmp.part_volume==bib.part_volume && itemTmp.part_no==bib.part_no) || (itemTmp.oclc==bib.oclc && !bib.part_year && !bib.part_volume && itemTmp.part_no==bib.part_no)) var item=itemTmp;
              } else if (i==2) { // NBN
                if ((itemTmp.nbn==bib.nbn && itemTmp.part_most_recent=='1') || (itemTmp.nbn==bib.nbn && itemTmp.part_year==bib.part_year && itemTmp.part_no==bib.part_no) || (itemTmp.nbn==bib.nbn && itemTmp.part_volume==bib.part_volume && itemTmp.part_no==bib.part_no) || (itemTmp.nbn==bib.nbn && !bib.part_year && !bib.part_volume && itemTmp.part_no==bib.part_no)) var item=itemTmp;
              }
              if (item) break; // prvni nalezeny zaznam podle priorit je ten pravy
            }
            if (item) break; // prvni nalezeny zaznam podle priorit je ten pravy
          }
        }
        
        // pokud se metazaznam V DB najde, ale neobsahuje obrazek, nebo nebyla nalezena zhoda, nepokracuj
        if (!item) {
          response.writeHead(200, {'Content-Type': 'image/gif'});
          response.end(placeholder);
          return;
        }
        
        var tocThumbnailUrl = getUrlByType(item, 'toc_thumbnail');
        if (!tocThumbnailUrl) {
          response.writeHead(200, {'Content-Type': 'image/gif'});
          response.end(placeholder);
          return;
        }
        //console.log(tocThumbnailUrl);
        cover(tocThumbnailUrl,false, true);
      }
    });
  }
  
  /**
   * API TOC PDF
   **/
  else if ((requrl.indexOf(urlTocApiPdf))>0) {
    var sigla=refererValid(referer,remoteIP,encsigla)
    if (!sigla) {
      response.writeHead(404);
      response.end('referer');
      return;
    }
    tocPdfApiRequests[sigla]++||(tocPdfApiRequests[sigla]=1);
    if (sigla!='admin') tocPdfApiRequests.admin++||(tocPdfApiRequests.admin=1);

    if (query.isbn) {
      var isbn=query.isbn.split(' ')[0];
      var value=toEan(isbn);
      var sel={ean : value};
      var bib={isbn : value};
    }
    else if (query.nbn) {
      var value=query.nbn;
      var sel=bib={nbn : value};
    }
    else if (query.oclc) {
      var value=query.oclc;
      var sel=bib={oclc : value};
    } 
    else if (query.multi) {
      var bib={};
      var sel={$or:[]};
      try {
        var multis=JSON.parse(query.multi);
      } catch (err) {
        response.writeHead(404);
        response.end('check query syntax');
        return;
      }
      if (multis.isbn) { 
        var isbn=multis.isbn.split(' ')[0];
        var value=toEan(isbn);
        sel.$or.push({ean:value});
        bib.isbn=value;
      }
      if (multis.oclc) { sel.$or.push({oclc:multis.oclc}); bib.oclc=multis.oclc; }
      if (multis.nbn) { sel.$or.push({nbn:multis.nbn}); bib.nbn=multis.nbn; }
      
      // parsovani identifikatoru vicesvazkoveho dila a periodika (parse_note se pouziva pokud knihovni system nema data rok/rocnik/cislo/cislo casti/nazev casti oddelene)
      if (multis.part_note) {
        var parts = partParser.parse(multis.part_note);
        if (parts.year)   multis.part_year = parts.year;
        if (parts.volume) multis.part_volume = parts.volume;
        if (parts.part)   multis.part_no = parts.part;
        if (parts.part && !parts.year && !parts.volume) multis.part_name = parts.part;
      }
      // normalizace
      if (multis.part_year)   multis.part_year = partParser.normalizeYear(multis.part_year);
      if (multis.part_volume) multis.part_volume = partParser.normalizeVolume(multis.part_volume);
      if (multis.part_no)     multis.part_no = partParser.normalizePart(multis.part_no);
      if (multis.part_name)   multis.part_name = partParser.normalizePart(multis.part_name);
      
      // dotaz na periodikum
      if (multis.part_no && (multis.part_year || multis.part_volume)) {
        if (multis.part_year) { sel.part_year=multis.part_year; bib.part_year=multis.part_year; }
        if (multis.part_volume) { sel.part_volume=multis.part_volume; bib.part_volume=multis.part_volume; }
        if (multis.part_no) { sel.part_no=multis.part_no; bib.part_no=multis.part_no; }
      }
      // dotaz na vicesvazkovou monografii pomoci part_no (245n) a zaroven part_name (245p)
      else if (multis.part_no && multis.part_name) {
        bib.part_no = multis.part_no;
        bib.part_name = multis.part_name;
        sel.$and=[{"$or":[{"part_no":multis.part_no},{"part_name":multis.part_name}]}];
      }
      // dotaz na vicesvazkovou monografii pouze pomoci part_no (245n)
      else if (multis.part_no) {
        bib.part_no = multis.part_no;
        sel.$and=[{"part_no":multis.part_no}];
      }
      // dotaz na vicesvazkovou monografii pouze pomoci part_name (245p)
      else if (multis.part_name) {
        bib.part_name = multis.part_name;
        sel.$and=[{"part_name":multis.part_name}];
      }
      // dotaz na monografii, nebo souborny zaznam
      else {
        sel.$and=[{"$or":[{"part_no":null,"part_name":null},{"part_most_recent":1.0}]}];
      }
      
      if (sel.$or.length>0) var value=true; // povolime pokracovat; udelat dotaz na metadata do DB
    }
    else {
      response.writeHead(404);
      response.end('identifier');
      return;
    }

    if (!value) {
      response.writeHead(200, {'Content-Type': 'image/gif'});
      response.end(placeholder);
      return;
    }

    db.collection(metaCollection).find(sel).toArray(function (err, items) {
      if (!items) {
        response.end('wrong request');
        return;
      }
      if (!items.length) {
        // obalka neni v DB a je potrebne nacist z back-end API metadata
        // funkce metadata() rovnou posle klientovi obalky
        metadata([{bibinfo:bib,permalink:"a"}],[],false,false,true);
        return;
      }
      else {
        if (items.length==1) {
          // byl nalezen jediny zaznam, nemusime delat slozitosti jako v nasledujicim "else"
          var item=items[0];
          if (item.ean!=bib.isbn && item.oclc!=bib.oclc && item.nbn!=bib.nbn) {
            item=null;
          }
          if (item && Object.keys(bib).length>1) {
            // pokud se ptame na vice identifikatoru a nalezeny zaznam neobsahuje obsazek
            // jeste furt je sance, ze obsazek nalezneme na BE, pokud se zeptame na zbyle identifikatory bez shody v nalezenem zaznamu
            if (!item.toc_pdf_url) {
              if (item.ean==bib.isbn) delete bib.isbn;
              if (item.oclc==bib.oclc) delete bib.oclc;
              if (item.nbn==bib.nbn) delete bib.nbn;
              if (Object.keys(bib).length>0) {
                metadata([{bibinfo:bib,permalink:"a"}],[],false,false,true);
                return;
              }
            }
          }
        }
        else {
          // v pripade dotazu pomoci multi identifikatoru muzeme dostat vice zaznamu
          // nutne rozhodnout podle priority, kterou obalku zobrazit
          for (var i=0; i<3; i++) {
            for (var j=0; j<items.length; j++) {
              var itemTmp=items[j];
              if (!itemTmp.toc_pdf_url) continue; // pokud metazaznam neobsahuje obrazek, nepokracuj
              
              if (i==0) { // ISBN
                if ((itemTmp.ean==bib.isbn && itemTmp.part_most_recent=='1') || (itemTmp.ean==bib.isbn && itemTmp.part_year==bib.part_year && itemTmp.part_no==bib.part_no) || (itemTmp.ean==bib.isbn && itemTmp.part_volume==bib.part_volume && itemTmp.part_no==bib.part_no) || (itemTmp.ean==bib.isbn && !bib.part_year && !bib.part_volume && itemTmp.part_no==bib.part_no)) var item=itemTmp;
              } else if (i==1) { // OCLC
                if ((itemTmp.oclc==bib.oclc && itemTmp.part_most_recent=='1') || (itemTmp.oclc==bib.oclc && itemTmp.part_year==bib.part_year && itemTmp.part_no==bib.part_no) || (itemTmp.oclc==bib.oclc && itemTmp.part_volume==bib.part_volume && itemTmp.part_no==bib.part_no) || (itemTmp.oclc==bib.oclc && !bib.part_year && !bib.part_volume && itemTmp.part_no==bib.part_no)) var item=itemTmp;
              } else if (i==2) { // NBN
                if ((itemTmp.nbn==bib.nbn && itemTmp.part_most_recent=='1') || (itemTmp.nbn==bib.nbn && itemTmp.part_year==bib.part_year && itemTmp.part_no==bib.part_no) || (itemTmp.nbn==bib.nbn && itemTmp.part_volume==bib.part_volume && itemTmp.part_no==bib.part_no) || (itemTmp.nbn==bib.nbn && !bib.part_year && !bib.part_volume && itemTmp.part_no==bib.part_no)) var item=itemTmp;
              }
              if (item) break; // prvni nalezeny zaznam podle priorit je ten pravy
            }
            if (item) break; // prvni nalezeny zaznam podle priorit je ten pravy
          }
        }
      
        if (!item) {
          response.writeHead(404);
          response.end();
          return;
        } else if (!item.toc_pdf_url) {
          response.writeHead(404);
          response.end();
          return;
        } else {
          toc(item.toc_pdf_url);
        }
      }
    });
  }
  
  /**
   * METADATA
   **/
  else if ((requrl.indexOf(urlMetadata))>0) {
    var sigla=ipValid(remoteIP,query.sigla);
    var fetcha=[]; // pole objektu s parametry {isbn:xxx},{isbn:yyy,nbn:zzz}

    if (!sigla) {
      console.log('access denied');
      response.writeHead(404);
      response.end();
      return;
    }

    metaRequests[sigla]++||(metaRequests[sigla]=1);
    if (sigla!='admin') metaRequests.admin++||(metaRequests.admin=1);

    var ean = '';
    var isbns = []; // temporary
    var isbna = []; // pole s ISBN identifikatory
    var nbns = []; // temporary
    var nbna = []; // pole s NBN identifikatory
    var oclcs = []; // temporary
    var oclca = []; // pole s OCLC identifikatory
    var multis = []; // temporary

    for (queryKey in query) {
      if (queryKey=='isbn') {
        var isbns = query.isbn.split(',');
        for (var i=0;i<isbns.length;i++) {
          var isbn=isbns[i];
          if (!isbn) continue;
          isbn=isbn.split(' ')[0];
          ean=toEan(isbn);
          if (ean===null) continue;
          isbna.push(ean);
          fetcha.push({isbn:isbn}); // pole objektu s dotazy
        }
      }
      
      else if (queryKey=='nbn') {
        var nbns = query.nbn.split(',');
        for (var i=0;i<nbns.length;i++) {              
          var nbn=nbns[i];
          if (!nbn) continue;
          nbna.push(nbn);
          fetcha.push({nbn:nbn}); // pole objektu s dotazy
        }
      }

      else if (queryKey=='oclc') {
        var oclcs = query.oclc.split(',');
        for (var i=0;i<oclcs.length;i++) {
          var oclc=oclcs[i];
          if (!oclc) continue;
          oclca.push(oclc);
          fetcha.push({oclc:oclc}); // pole objektu s dotazy
        }
      }
      
      else if (queryKey=='multi') {
        try {
          var multis=JSON.parse(query.multi);
        } catch (err) {
          response.writeHead(404);
          response.end('check query syntax');
          return;
        }
        for (var i=0;i<multis.length;i++) {
          var multi=multis[i];
          var fetchMulti = {} // temporary
          
          // parsovani identifikatoru vicesvazkoveho dila a periodika (parse_note se pouziva pokud knihovni system nema data rok/rocnik/cislo/cislo casti/nazev casti oddelene)
          if (multi.part_note) {
            var parts = partParser.parse(multi.part_note);
            if (parts.year)   multi.part_year = parts.year;
            if (parts.volume) multi.part_volume = parts.volume;
            if (parts.part)   multi.part_no = parts.part;
            if (parts.part && !parts.year && !parts.volume) multi.part_name = parts.part;
          }
          // normalizace
          if (multi.part_year)   multi.part_year = partParser.normalizeYear(multi.part_year);
          if (multi.part_volume) multi.part_volume = partParser.normalizeVolume(multi.part_volume);
          if (multi.part_no)     multi.part_no = partParser.normalizePart(multi.part_no);
          if (multi.part_name)   multi.part_name = partParser.normalizePart(multi.part_name);
          
          for (key in multi) {
            if (key=='isbn') {
              isbn=multi.isbn.split(' ')[0];
              ean=toEan(isbn);
              if (ean!==null) {
                isbna.push(ean);
                fetchMulti.isbn=isbn;
              }
            }
            if (key=='oclc') {
              oclca.push(multi.oclc);
              fetchMulti.oclc=multi.oclc;
            }
            if (key=='nbn') {
              nbna.push(multi.nbn);
              fetchMulti.nbn=multi.nbn;
            }
            // U /api/book se dotazujeme na vic zaznamu, proto pozadavek pouze zaznamename, ale do DB se dotazujeme
            // pomoci isbn, nbn, oclc. Pozadavek bude naparovany na ziskane zaznamy z MongoDB.
            if (key=='part_year') { fetchMulti.part_year=multi.part_year; }
            if (key=='part_volume') { fetchMulti.part_volume=multi.part_volume; }
            if (key=='part_no') { fetchMulti.part_no=multi.part_no; }
            if (key=='part_name') { fetchMulti.part_name=multi.part_name; }
          }
          fetcha.push(fetchMulti); // pole objektu s dotazy
        }
      }
    }
    
    response.writeHead(200, {'Content-Type': 'text/plain'});
    var json=[];

    db.collection(metaCollection).find({$or:[{ean:{$in:isbna}},{nbn:{$in:nbna}},{oclc:{$in:oclca}}]}).toArray(function (err, items) {
      
    /* Projdi doposud ziskane vysledky z DB
     * prirad jednotlivym dotazum odpovedi z DB (jeden zaznam muze byt odpoved na vic dotazu)
     * dotazy, na ktere se nedohledaji zaznamy budou pouzite jako novy dotaz na API BE serveru */
    if (items)
      for (var i=0; i<items.length; i++) {
        var item=items[i];
        var ean=item.ean;
        var nbn=item.nbn;
        var oclc=item.oclc;
        var part_year=item.part_year;
        var part_volume=item.part_volume;
        var part_no=item.part_no;
        var part_name=item.part_name;
        var part_most_recent=item.part_most_recent || '0';
            
        /* Spolecne chovani BE a FE pri rozhodovani nad dotazy s vice parametry:
         * Uplatnuje se priorita parametru v tomto poradi ISBN, OCLC, NBN.
         * Pokud mame 2 zaznamy, kde ISBN=1, OCLC=2, NBN=3 a ISBN=1, OCLC=2, NBN=4 a
         * zeptame se na ISNB=1 dostaneme 1.zaznam, pokud se zeptame na OCLC=2 dostaneme
         * taky 1.zaznam, pokud se zeptame na NBN=4 dostaneme 2.zaznam.
         * Ale pokud se zeptame na kombinaci ISBN=1 + NBN=4 dostaneme 1.zaznam, protoze
         * prioritni je ISBN a zhoda se nasla uz pri prvnim zaznamu, dale se nepokracuje. 
         
         * FE operuje s 2 zdroji: lokalni MongoDB a BE API
         * Rozdil ve vysledku mezi odpovedi BE a FE muze nastat prave pri duplikovanych
         * zaznamu z prikladu v predchozim odstavci. Pokud zaznam c.1 jeste nebude dotazen
         * na FE a zeptame se na kombinaci ISBN=1 + NBN=4 dostaneme jako vysledek 2. zaznam.*/
        
        if (item !== null) {
          // uplatneni priority parametru
          // 0=ISBN, 1=OCLC, 2=NBN
          for (var j=0;j<3;j++) {
        
            // projdi dotazy (naparuje dotazy na ziskanou polozku z DB a posklada odpoved metadata API)
            for (k in fetcha) {
              var bibinfo=fetcha[k];
              
              if (j==0 && bibinfo.isbn) {
                // ISBN
                var isbnBib=bibinfo.isbn.split(' ')[0];
                var isbnBib=toEan(isbnBib);
                if ((isbnBib==ean && part_most_recent=='1' && !bibinfo.part_no && !bibinfo.part_name) || 
                    (isbnBib==ean && part_year==bibinfo.part_year && part_no==bibinfo.part_no) || 
                    (isbnBib==ean && part_volume==bibinfo.part_volume && part_no==bibinfo.part_no) || 
                    (isbnBib==ean && !bibinfo.part_year && !bibinfo.part_volume && (bibinfo.part_no || bibinfo.part_name) && (part_no==bibinfo.part_no || part_name==bibinfo.part_name)))
                {
                  item.bibinfo=bibinfo;
                  json[k]=replaceUrl(item);
                  delete fetcha[k];
                }
              } else if (j==1 && bibinfo.oclc) {
                // OCLC
                if ((bibinfo.oclc==oclc && part_most_recent=='1' && !bibinfo.part_no && !bibinfo.part_name) || 
                    (bibinfo.oclc==oclc && part_year==bibinfo.part_year && part_no==bibinfo.part_no) || 
                    (bibinfo.oclc==oclc && part_volume==bibinfo.part_volume && part_no==bibinfo.part_no) || 
                    (bibinfo.oclc==oclc && !bibinfo.part_year && !bibinfo.part_volume && (bibinfo.part_no || bibinfo.part_name) && (part_no==bibinfo.part_no || part_name==bibinfo.part_name)))
                {
                  item.bibinfo=bibinfo;
                  json[k]=replaceUrl(item);
                  delete fetcha[k];
                }
              } else if (j==2 && bibinfo.nbn) {
                // NBN
                if ((bibinfo.nbn==nbn && part_most_recent=='1' && !bibinfo.part_no && !bibinfo.part_name) || 
                    (bibinfo.nbn==nbn && part_year==bibinfo.part_year && part_no==bibinfo.part_no) || 
                    (bibinfo.nbn==nbn && part_volume==bibinfo.part_volume && part_no==bibinfo.part_no) || 
                    (bibinfo.nbn==nbn && !bibinfo.part_year && !bibinfo.part_volume && (bibinfo.part_no || bibinfo.part_name) && (part_no==bibinfo.part_no || part_name==bibinfo.part_name)))
                {
                  item.bibinfo=bibinfo;
                  json[k]=replaceUrl(item);
                  delete fetcha[k];
                }
              }
            }
          }
        }
      }
      
      var fetchaBE = [];
      for (i in fetcha) {
        var bibinfo=fetcha[i];
        if (metaCollection=='okcz') {
          fetchaBE[i] = {bibinfo:bibinfo,permalink:'a'};
        } else if (bibinfo.isbn) {
          fetchaBE[i] = {bibinfo:{isbn:bibinfo.isbn},permalink:'a'};
        }
      }

      metadata(fetchaBE,json);
    });
  }
  
  /**
   * STATISTIKY
   **/
  else if (query.stats==='true') {
    var sigla=ipValid(remoteIP,query.sigla);
    if (!sigla && remoteIP==='127.0.0.1') sigla='admin';

    if (sigla) {
      var stats = {};
      stats.uptime=uptime();
      stats.etag_match=etagCoverMatch[sigla]||0;
      stats.etag_toc_pdf_match=etagTocPdfMatch[sigla]||0;
      stats.etag_toc_thumbnail_match=etagTocThumbMatch[sigla]||0;
      stats.etag_file_match=etagFileMatch[sigla]||0;
      stats.file_requests=fileRequests[sigla]||0;
      stats.timeout_count=timeoutCount[sigla]||0;
      stats.meta_requests=metaRequests[sigla]||0;
      stats.meta_fetches=metaFetches[sigla]||0;
      stats.cover_requests=coverRequests[sigla]||0;
      stats.cover_api_requests=coverApiRequests[sigla]||0;
      stats.cover_fetches=coverFetches[sigla]||0;
      stats.cover_notfound=coverNotfound[sigla]||0;
      stats.toc_thumbnail_requests=tocThumbnailRequests[sigla]||0;
      stats.toc_thumbnail_api_requests=tocThumbnailApiRequests[sigla]||0;
      stats.toc_thumbnail_fetches=tocThumbnailFetches[sigla]||0;
      stats.toc_thumbnail_notfound=tocThumbnailNotfound[sigla]||0;
      stats.toc_pdf_requests=tocPdfRequests[sigla]||0;
      stats.toc_pdf_api_requests=tocPdfApiRequests[sigla]||0;
      stats.toc_pdf_notfound=tocPdfNotfound[sigla]||0;
      stats.meta_removes=metaRemoves;
      stats.cover_removes=coverRemoves;
      stats.toc_thumbnail_removes=tocThumbnailRemoves;

      db.collection(metaCollection).count(function(err, metaCount) {
        db.collection('cover').count(function(err, coverCount) {
          db.collection('logs').count(function(err, logsCount) {
            stats.meta_count=metaCount;
            stats.cover_count=coverCount;
            stats.logs_count=logsCount;

            if (query.save==='true') {
              stats.timeout_count=timeoutCount;
              stats.meta_requests=metaRequests;
              stats.meta_fetches=metaFetches;
              stats.cover_requests=coverRequests;
              stats.cover_api_requests=coverApiRequests;
              stats.cover_fetches=coverFetches;
              stats.cover_notfound=coverNotfound;
              stats.toc_thumbnail_requests=tocThumbnailRequests;
              stats.toc_thumbnail_api_requests=tocThumbnailApiRequests;
              stats.toc_thumbnail_fetches=tocThumbnailFetches;
              stats.toc_thumbnail_notfound=tocThumbnailNotfound;
              stats.toc_pdf_requests=tocPdfRequests;
              stats.toc_pdf_api_requests=tocPdfApiRequests;
              stats.toc_pdf_notfound=tocPdfNotfound;
              stats.ip=remoteIP;
              stats.timestamp=timestamp;
              db.collection('stat').insert(stats, {w:0});
            }
            
            response.writeHead(200);
            response.end(JSON.stringify(stats,null,' '));
          });
        });
      });        
    } else {        
      response.writeHead(404);
      response.end('access denied ' + remoteIP);        
    }
  }
  
  /**
   * RELOAD OPRAVNENI
   **/
  else if (query.permreload==='true') {
    getPerms(db);
    response.writeHead(200);
    if (perms[remoteIP] || remoteIP==='127.0.0.1') {
      if (query.vymaz==='true') {
        /// for tests and debug only, not public url parameter
        perms = {};
        referers = {};
        etags = {};
        timeoutCount = {};
        etagCoverMatch = {};
        etagTocPdfMatch = {};
        etagTocThumbMatch = {};
        etagFileMatch = {};
        fileRequests = {};
        metaRequests = {};
        metaFetches = {};
        metaRemoves = 0;
        coverRequests = {};
        coverApiRequests = {};
        coverFetches = {};
        coverNotfound = {};
        coverRemoves = 0;
        tocThumbnailRequests = {};
        tocThumbnailApiRequests = {};
        tocThumbnailFetches = {};
        tocThumbnailNotfound = {};
        tocThumbnailRemoves = 0;
        tocPdfRequests = {};
        tocPdfApiRequests = {};
        tocPdfNotfound = {};
        // getPerms(db);
      }
      response.write(JSON.stringify(perms,null,' ')+'\n\n');
      response.write(JSON.stringify(referers,null,' ')+'\n\n');
    }
    response.end('ok');
  }
  
  /**
   * PRIDANI NOVEHO OPRAVNENI
   **/
  else if (query.permcreate==='true' && query.sigla) {
    response.writeHead(200);
    var newPerm = {};
    if (remoteIP===ipBackend || remoteIP==='127.0.0.1') {
      if (query.ref)
        newPerm = {ref:query.ref, sigla:query.sigla};
      else if (query.ip)
        newPerm = {ip:query.ip, sigla:query.sigla};
      // add permission if not exists
      db.collection('perms').find(newPerm).count(function(err, permCount) {
        if (permCount==0) db.collection('perms').insert(newPerm, {w:0}, function(err, result) {
          getPerms(db);
        });
      });
      response.write(JSON.stringify(perms,null,' ')+'\n\n');
      response.write(JSON.stringify(referers,null,' ')+'\n\n');
    }
    response.end('ok');
  }
  
  /**
   * ODSTRANENI METADAT (vcetne obrazku)
   **/
  else if (query.remove==='true') {
    if (perms[remoteIP]) {
      var sel={$or:[]};
      if (query.isbn) {
        var isbn=query.isbn.split(' ')[0];
        var ean=toEan(isbn);
        sel.$or.push({ean : ean});
      } 
      if (query.nbn) {
        sel.$or.push({nbn : query.nbn});
      } 
      if (query.oclc) {
        sel.$or.push({oclc : query.oclc});
      }
      if (sel.$or.length == 0) {
        response.writeHead(404);
        response.end('no identifier');
        return;
      }
      response.writeHead(200);

      db.collection(metaCollection).find(sel).toArray(function (err, items) {      
        if (!items) {
          response.end('wrong request');
          return;
        }
        if (!items.length) {
          response.end('not found');
          return;
        }
        // muze existovat vic metadatovych zaznamu s identifikatory, ktere chceme promazat
        for (var i=0; i<items.length; i++) {
          var item = items[i];
        
          // console.dir(item);
          var subSel={$or:[{url:getUrlByType(item)},{url:getUrlByType(item,'icon')},{url:getUrlByType(item,'thumbnail')},{url:getUrlByType(item,'toc_thumbnail')}]}
          var toc=item.toc_thumbnail_url
          var tocPdf=item.toc_pdf_url
          // vymaz i TOC nahled, pokud nejaky je
          if (toc) {
            subSel.$or.push({toc_thumbnail_url:toc.slice(toc.indexOf('/',8))});
            delete etags['toct-'+md5(toc)];
          }
          // vymaz pouze TOC PDF etag; samotny TOC PDF je na disku
          if (tocPdf) {
            delete etags['tocp-'+md5(item.toc_pdf_url)];
          }

          /// asynchronous
          db.collection('cover').find(subSel).toArray(function (err, items) {
            if (!items) return;
            
            for (var j=0; j<items.length; j++) {
              var cid=items[j]._id;
              var item_type=(items[j].url.indexOf(urlTocFile)>0)?'toc_thumbnail':'cover';
              (function(cid, item_type, item_url) {
                db.collection('cover').remove({_id:cid},{single:true}, function(err, removed){
                  if (err) console.log('failed to remove ' + item_type + ' _id: ' + cid);
                  else {
                    if (item_type=='toc_thumbnail') {
                      tocThumbnailRemoves++;
                      delete etags['toct-'+md5(item_url)];
                    } else {
                      coverRemoves++;
                      delete etags[cid];
                    }
                    console.log('removed ' + item_type + ' etag: ' + (item_type=='toc_thumbnail' ? 'toct-'+md5(item_url) : cid));
                  }
                });
              })(cid, item_type, items[j].url);
            }
          });
          metaRemoves++;
        }
        
        /// smaz vsechna pozadovana metadata
        db.collection(metaCollection).remove(sel, function(err, removed){
          if (err) response.end('failed to remove _id: '+item._id);
          else {
            response.end('ok');
          }
        });
      });        
    } else {
      response.writeHead(404);
      response.end('access denied');
    }
  }
  
  /**
   * PRIDANI A EDITACE HODNOCENI
   **/
  else if (query.add_review==='true') {
    if (req.method=='POST') {
      var sigla=ipValid(remoteIP,query.sigla);
      if (!sigla || !query.book_id) {
        console.log('add review denied '+remoteIP);
        response.writeHead(404);
        response.end('add review denied' + (!query.book_id ? ' (book_id missing)' : ''));
        return;
      }
      
      var post_data = '';
      req.on('data', function (chunk) {
        post_data += chunk;
      });
      req.on('end', function () {
        post_data = qs.parse(post_data);
        
        if (!post_data.rating_value && !post_data.review_text) {
          response.writeHead(404);
          response.end('param rating_value or review_text is mandatory');
          return;
        }
        
        // normalizace ciselneho hodnoceni
        if (post_data.rating_value==='like') {
          var rating=100;
        } else if (post_data.rating_value==='dislike') {
          var rating=0;
        } else if (post_data.rating_value) {
          var rating=parseInt(post_data.rating_value)*10 || 0; // na BE je stupnice 0-100
          if (rating>100) rating/=10; // pro pripad ze klient zasila cisla v rozmezi 0-100
          if (rating>100) rating=100; // pro pripad preteceni maxima jednoho hodnoceni
        }
        
        // zarazeni synchronizacni udalosti do fronty (kolekce be_sync)
        var post_data_db = {};
        if (rating>0) post_data_db.rating = rating;
        if (post_data.review_text) post_data_db.html_text = post_data.review_text;
        var get_data_db = { book_id:query.book_id, sigla:sigla };
        if (query.id) get_data_db.id = query.id;
        db.collection('be_sync').insert({timestamp:timestamp, flag_synced:0, retry_count:0, retry_date:timestamp, get_data:get_data_db, post_data:post_data_db, uri:'api/add_review'}, {w:1}, function(err, result) {
          response.writeHead(200);
          response.end('ok');
        });
      });
    } else {
      response.writeHead(404);
      response.end('no review post data to insert/edit');
    }
  }
  
  /**
   * SMAZANI HODNOCENI
   **/
  else if (query.del_review==='true') {
    var sigla=ipValid(remoteIP,query.sigla);
    if (!sigla || !query.id) {
      console.log('del review denied '+remoteIP);
      response.writeHead(404);
      response.end('del review denied' + (!query.id ? ' (id missing)' : ''));
      return;
    }
    
    // zarazeni synchronizacni udalosti do fronty (kolekce be_sync)
    var get_data_db = { id:query.id, sigla:sigla };
    db.collection('be_sync').insert({timestamp:timestamp, flag_synced:0, retry_count:0, retry_date:timestamp, get_data:get_data_db, uri:'api/del_review'}, {w:1}, function(err, result) {
      response.writeHead(200);
      response.end('ok');
    });
  }
  
  /**
   * ZNOVUNACTENI KOMENTARU A HODNOCENI
   **/
  else if (query.reviewupdate==='true') {
    if (req.method == 'POST') {
      var body = '';
      req.on('data', function (chunk) {
        body += chunk;
      });
      req.on('end', function () {
        var book_id = parseInt(query.book_id);
        if (book_id > 0) {
          try {
            var post_json = JSON.parse(body);
          } catch (err) {
            response.writeHead(404);
            response.end('check query syntax');
            return;
          }
          var review_count = post_json.review.length;
          if (review_count != parseInt(query.review_count)) {
            response.writeHead(404);
            response.end('review count missed match');
            return;
          }

          db.collection(metaCollection).update({book_id:query.book_id},{$set:{ rating_count:query.rating_count, rating_sum:query.rating_sum, rating_avg100:query.rating_avg100, rating_url:query.rating_url, rating_avg5:query.rating_avg5, reviews:post_json.review }}, {w:1}, function(err, result) {
            if (err) { console.dir(err); }
            response.writeHead(200);
            response.end('ok');
          });
        } else {
          response.writeHead(404);
          response.end('no metadata id specified');
        }
      });
    } else {
      response.writeHead(404);
      response.end('no review data to update');
    }
  }
  
  /**
   * ZNOVUNACTENI KOMENTARU A HODNOCENI
   **/
  else if ((requrl.indexOf(uriAlive))>0) {
    response.writeHead(200);
    response.end('ALIVE');
  }
  
  else {
    console.log("wrong query");
    response.writeHead(404);
    response.end();
  }

  /// nacteni metadat podle identifikatoru
  function metadata(fetcha, json, coverApi, tocThumbApi, tocPdfApi) {
    if ((fetcha.length>0) && (now>dateTimeout)) {
      // poskladani URL dotazu na BE
      var fetch = metaCollection=='okcz' ? JSON.stringify(fetcha) : fetcha.join(',');
      fetch=encodeURIComponent(fetch);
      urlSwitches='&amp;review=1&amp;toc_full_text=1';
      var url='http://' + urlMain + urlPart + urlMetadata + urlParams + fetch + urlSwitches
      // console.log('request: ' + url);
      
      // pole objektu fetcha prevedeno na pole retezcu; bude se parovat na odpoved bibinfo z BE
      var fetchaStr = [];
      if (metaCollection=='okcz') {
        for (var i=0;i<fetcha.length;i++) {
          if (fetcha[i]) {
            fetchaStr[i]=getSortedBibinfo(fetcha[i].bibinfo);
          }
        }
      }

      metaFetches[sigla]++||(metaFetches[sigla]=1);
      if (sigla!='admin') metaFetches.admin++||(metaFetches.admin=1);

      request({url:url,timeout:timeout}, function(error, res, body) {
        if (!error) {
          // console.log(body);
          try {
            if (metaCollection=='okcz') {
              var jsonf = JSON.parse(body.substring(16,body.length-3));
            } else {
              var jsonf = JSON.parse(body);
            }
          } catch (err) {
            response.writeHead(404);
            response.end('JSON syntax error');
            return;
          }
          // console.log(jsonf);
          
          // projdi ziskane vysledky z BE serveru + uloz do DB unikatni kolekce
          var fetchedAllready = [];
          for (var i=0;i<jsonf.length;i++) {
            item=jsonf[i];
            var recId=(item.ean||'#')+'-'+(item.oclc||'#')+'-'+(item.nbn||'#');
            delete item.permalink;
            
            // Pridej do metadata kolekci pokud tam jeste neni.
            // Kontroluje se protoze v jednem back-end dotazu se muze vyskytnout stejny zaznam vic krat
            // pokud se ptame napr. na parametr ISBN a podruhe na OCLC stejneho zaznamu.
            if (!fetchedAllready[recId]) {
              var id = new mongo.ObjectID();
              id=id.toHexString();
              fetchedAllready[recId]=id;
              item._id=id;
              db.collection(metaCollection).insert(item, {w:1}, function(err, result) {
                if (err) { console.dir(err); }
              });
            } else {
              item._id=fetchedAllready[recId];
            }

            if (!item.bibinfo || !fetchaStr.length) {
              json.push(replaceUrl(item));
            } else {
              var pos=fetchaStr.indexOf(getSortedBibinfo(item.bibinfo));
              if (pos>=0) {
                json[pos]=replaceUrl(item);
                delete fetchaStr[pos];
              } else
                json.push(replaceUrl(item));
            }
          }
        } else {
          console.log(error);
          if (error.code==='ETIMEDOUT') { // error.code==='ENOTFOUND'
            dateTimeout=now+timeOutDuration;
            timeoutCount[sigla]++||(timeoutCount[sigla]=1);
            if (sigla!='admin') timeoutCount.admin++||(timeoutCount.admin=1);
            console.log('timeout : ' + dateTimeout);
          }
        }
        
        if (coverApi) {
          var item=json[0];
          var coverUrl = getUrlByType(item, query.type);
          if (!coverUrl) {
            response.writeHead(200, {'Content-Type': 'image/gif'});
            response.end(placeholder);
            return;
          }
          cover(coverUrl,coverApi,tocThumbApi);
        } else if (tocThumbApi) {
          var item=json[0];
          var tocThumbnailUrl = getUrlByType(item, 'toc_thumbnail');
          if (!tocThumbnailUrl) {
            response.writeHead(200, {'Content-Type': 'image/gif'});
            response.end(placeholder);
            return;
          }
          //console.log(tocThumbnailUrl);
          cover(coverUrl||tocThumbnailUrl,coverApi,tocThumbApi);
        } else if (tocPdfApi) {
          var item=json[0];
          var tocPdfUrl = item.toc_pdf_url;
          if (!tocPdfUrl) {
            response.writeHead(200, {'Content-Type': 'image/gif'});
            response.end(placeholder);
            return;
          }
          toc(tocPdfUrl);
        } else {
          var restmp=JSON.stringify(json,null,query.pretty?' ':'');
          response.end(restmp);
        }
      });        
    } else {
      if (coverApi) {
        coverNotfound[sigla]++||(coverNotfound[sigla]=1);
        if (sigla!='admin') coverNotfound.admin++||(coverNotfound.admin=1);              
        response.writeHead(200, {'Content-Type': 'image/gif'});
        response.end(placeholder);
      } else if (tocThumbApi) {
        tocThumbnailNotfound[sigla]++||(tocThumbnailNotfound[sigla]=1);
        if (sigla!='admin') tocThumbnailNotfound.admin++||(tocThumbnailNotfound.admin=1);              
        response.writeHead(200, {'Content-Type': 'image/gif'});
        response.end(placeholder);
      } else if (tocPdfApi) {
        tocPdfNotfound[sigla]++||(tocPdfNotfound[sigla]=1);
        if (sigla!='admin') tocPdfNotfound.admin++||(tocPdfNotfound.admin=1);              
        response.writeHead(200, {'Content-Type': 'image/gif'});
        response.end(placeholder);
      } else {
        var restmp=JSON.stringify(json,null,query.pretty?' ':'');
        response.end(restmp);
      }
    }
  }

  /// ziskani / stazeni obalky podle url souborove cesty
  function cover(coverUrl, coverApi, tocThumbApi) {
    // var coverUrl=requrl.split('?')[0];
    if (query.keywords) {
      var keywords=query.keywords.trim().replace(/\s+|\t+/g,' ').split(' ');
    } else {
      var keywords=[];
    }
    
    db.collection('cover').findOne({url:coverUrl}, function (err, item) {
      // typ dokumentu, ktery nacitame (cover, nebo toc nahled)
      var coverType = 'cover';
      if (tocThumbApi || (coverUrl.indexOf(urlTocFile))>0) coverType = 'toc';

      if ((item !== null) && (!item.notfound)) {
        // nastav etag
        if (coverType=='cover') {
          response.setHeader('Etag', item._id);
          etags[item._id]=null;
        } else if (coverType=='toc') {
          response.setHeader('Etag', 'toct-'+md5(coverUrl));
          etags['toct-'+md5(coverUrl)]=null;
        }
        
        response.writeHead(200, {'Content-Type': 'image/jpeg'});
        response.end(item.x.buffer);
        db.collection('logs').insert({sigla:sigla, ip:remoteIP, referer:referer, op:coverUrl, state:'local', keywords:keywords, timestamp:timestamp}, {w:0});
      }
      else if (item && (item.notfound>now)) {
        if (coverApi || tocThumbApi) {
          response.writeHead(200, {'Content-Type': 'image/gif'});
          response.end(placeholder);
        } else {
          response.writeHead(404);
          response.end()
        }
      }
      else if (now>dateTimeout) {
        var options = {
          hostname: urlMain,
          path: coverUrl
        };
      
        var request = http.request(options, function(res) {
          if (!item) {
            var id = new mongo.ObjectID();
          } else {
            var id = item._id;
          }
          
          // zaznac do statistik zadost o stazeni obalkyl; bez ohledu na to, jestli se povede
          if (coverType=='cover') {
            coverFetches[sigla]++||(coverFetches[sigla]=1);
            if (sigla!='admin') coverFetches.admin++||(coverFetches.admin=1);
            etag=id.toHexString();
          } else if (coverType=='toc') {
            tocThumbnailFetches[sigla]++||(tocThumbnailFetches[sigla]=1);
            if (sigla!='admin') tocThumbnailFetches.admin++||(tocThumbnailFetches.admin=1);
            etag='toct-'+md5(coverUrl);
          }         
          
          etags[etag]=null;
          //console.log('etag set: ' + etag);            
          response.setHeader('Etag', etag);

          if (res.statusCode !== 200) {
            // obalka nebyla stazena; poznac do statistik
            if (coverType=='cover') {
              coverNotfound[sigla]++||(coverNotfound[sigla]=1);
              if (sigla!='admin') coverNotfound.admin++||(coverNotfound.admin=1);              
            } else if (coverType=='toc') {
              tocThumbnailNotfound[sigla]++||(tocThumbnailNotfound[sigla]=1);
              if (sigla!='admin') tocThumbnailNotfound.admin++||(tocThumbnailNotfound.admin=1);              
            }
            // console.log('not found');
            if (!item) {
              db.collection('cover').insert({notfound:now+timeNotfound, _id:id, url:coverUrl}, {w:1}, function(err, result) {
                if (err) { console.dir(err); }
              });
            } else {
              db.collection('cover').update({_id:id},{notfound:now+timeNotfound, url:coverUrl}, {w:1}, function(err, result) {
                if (err) { console.dir(err); }
              });
            }
            
            if (coverApi || tocThumbApi) {
              response.writeHead(200, {'Content-Type': 'image/gif'});
              response.end(placeholder);
            } else {
              response.writeHead(404);
              response.end()
            }              

            return;
          }
          response.writeHead(200, {'Content-Type': 'image/jpeg'});
          
          //var cover='';
          var data=[];
          res.on('error', function (e) {
            console.log(e);
          });
          
          
          res.on('data', function (chunk) {
            // console.log('chunk');
            // console.log(chunk);              
            //cover=cover + chunk
            data.push(chunk);
            response.write(chunk);
          }); //.pipe(response);
          
          res.on('end', function () {
            response.end();
            // console.log('end');
            var cover=new Buffer(data.reduce(function(prev, current) {
              return prev.concat(Array.prototype.slice.call(current));
            }, []));
            // console.log(cover);
            //response.end(cover);
            // console.log(cover.length);
            var binary = new mongo.Binary(cover);
            // console.log(binary.length());
            
            db.collection('cover').insert({x:binary, _id:id, url:coverUrl}, {w:1}, function(err, result) {
              if (err) { console.dir(err); }
            });              
            db.collection('logs').insert({sigla:sigla, ip:remoteIP, referer:referer, op:coverUrl, state:'fetch', keywords:keywords, timestamp:timestamp}, {w:0});
          });
          
        });
        
        request.setTimeout(timeout, function() {
          dateTimeout=new Date().getTime()+timeOutDuration;
          timeoutCount[sigla]++||(timeoutCount[sigla]=1);
          if (sigla!='admin') timeoutCount.admin++||(timeoutCount.admin=1);            
          console.log('timeout : ' + dateTimeout);
          request.abort();
          response.end()
        });
        
        request.on('error', function(err) {
          if (err.code === "ECONNRESET") {
            console.log("Timeout occurs");              
          }
        });

        request.end()
      }
      else {
        // console.log('cover404');
        if (coverApi || tocThumbApi) {
          response.writeHead(200, {'Content-Type': 'image/gif'});
          response.end(placeholder);
        } else {
          response.writeHead(404);
          response.end()
        }
      }
    });
  }
  
  /// poskytnuti souboru s TOC
  function toc(reqUrl) {
    reqUrl = reqUrl.replace('http://'+urlMain,'');
    var tocPdfUrlSegments = reqUrl.split('/');
    var tocFileName = tocPdfUrlSegments[tocPdfUrlSegments.length-2];
    var tocExtension = tocPdfUrlSegments[tocPdfUrlSegments.length-1];
    if (!tocFileName) {
      response.writeHead(404);
      response.end()
    }
  
    var mimeType = 'application/' + (tocExtension||'pdf');
    var tocFileEncapDir = Math.ceil((parseInt(tocFileName)+1)/10000)*10000;
    var tocFilePath = tocFileDir + tocFileEncapDir + '/' + tocFileName + '.' + (tocExtension||'pdf');
    fileSystem.exists(tocFilePath, function(exists){
      if (exists) {
        var tocFileStat = fileSystem.statSync(tocFilePath);
        console.log('toc ' + tocExtension + ': ' + tocFilePath);
        response.writeHead(200, {
          'Content-Type': mimeType,
          'Content-Length': tocFileStat.size,
          'Etag': 'tocp-'+md5(tocFilePath)
        });
        etags['tocp-'+md5(tocFilePath)]=null;
        var readStream = fileSystem.createReadStream(tocFilePath);
        readStream.pipe(response);
        db.collection('logs').insert({sigla:sigla, ip:remoteIP, referer:referer, op:urlTocFile+'/'+tocFileName+uriPartTocPdf, state:'local', keywords:[], timestamp:timestamp}, {w:0});
      } else {
        tocPdfNotfound[sigla]++||(tocPdfNotfound[sigla]=1);
        if (sigla!='admin') tocPdfNotfound.admin++||(tocPdfNotfound.admin=1);
        response.writeHead(404);
        response.end();
      }
    });
  }
}
 
var getPerms = function getPerms(db, clear) {
  if (clear===true) {
    perms = {}; referers = {};
  }
  perms['127.0.0.1']="admin";

  db.collection('perms').find().toArray(function (err, items) {
    for (var i=0; i<items.length; i++) {
      var item=items[i];
      if (item.ref) {
        console.log('referer: ' + item.ref);
        referers[item.ref]=item.sigla;
      }
      if (item.ip) {
        console.log('ip: ' + item.ip);
        perms[item.ip]=item.sigla;
      }
    }
  });
}


function replaceUrl(meta, bibinfo) {
  if (meta.cover_thumbnail_url) {
    meta.cover_thumbnail_url=meta.cover_thumbnail_url.replace(urlMain,urlReplace);
  }
  if (meta.cover_medium_url) {
    meta.cover_medium_url=meta.cover_medium_url.replace(urlMain,urlReplace);
  }
  if (meta.cover_icon_url) {
    meta.cover_icon_url=meta.cover_icon_url.replace(urlMain,urlReplace);
  }
  if (meta.toc_text_url) {
    delete meta.toc_text_url;
  }
  if (meta.toc_thumbnail_url) {
    meta.toc_thumbnail_url=meta.toc_thumbnail_url.replace(urlMain,urlReplace);
  }
  if (meta.toc_pdf_url) {
    meta.toc_pdf_url=meta.toc_pdf_url.replace(urlMain,urlReplace);
  }
  if (bibinfo) {
    meta.bibinfo=bibinfo;
  }
  return meta;
}

function refererValid(referer, ip, encsigla) {
  // console.log('revererValid:' + referer);
  
  if (encsigla) {
    console.log(encsigla);
    var sigla = decrypt(encsigla);
    if (regexpSigla.test(sigla)) return sigla;
  }
  
  if (perms[ip]) return perms[ip];
  if (!referer) return false;
  
  var refererOrig = referer;
  referer=referer.split('?')[0];
  var index = referer.indexOf('/',8);
  if (index>0) referer=referer.slice(0,index);
  
  if (referers[referer]) { // 1. segment URL
    return referers[referer];
  }
  if (referers[referer + '/']) {
    return referers[referer + '/'];
  }
  
  var index2nd = refererOrig.indexOf('/',index+1);
  if (index2nd>0) referer=refererOrig.slice(0,index2nd);
  
  if (referers[referer]) { // 1.+2. segment URL
    return referers[referer];
  }
  if (referers[referer + '/']) {
    return referers[referer + '/'];
  }
  
  console.log('referer ' + referer + ' is not valid (' + refererOrig + ')');
  return false;
}

function ipValid(ip, sigla) {
  // console.log('ipValid:' + ip);
  var tmp=perms[ip];

  if (!tmp) return false;
  if (tmp==='sigla') {
    return sigla;
  } else {
    return tmp;
  }
}

function uptime() {
  var now = new Date();
  var uptime = Math.floor((now.getTime()-dateStartup.getTime())/1000);
  
  var sec = uptime % 60;
  uptime-=sec;
  uptime/=60;
  var min = uptime % 60;
  uptime-=min;
  uptime/=60;
  var hour = uptime % 24;
  uptime-=hour;
  uptime/=24;
  
  now.setHours(hour,min,sec);
  var time = now.toString().split(' ')[4];

  // 00:02:51 up 0 days, 2013-12-06T08:35:21.962Z
  return time+' up '+uptime+' days, '+dateStartup.toISOString()
}

function getUrlByType(metadata, type) {
  if (!metadata) return null;
  var url = null;
  
  switch(type) {
    case 'thumbnail':
      url = metadata.cover_thumbnail_url;
      break;
    case 'icon':
      url = metadata.cover_icon_url;
      break;
    case 'toc_thumbnail':
      url = metadata.toc_thumbnail_url;
      if (!url) return null; // toc_thumbnail nesmi v pripade neexistence vratit cover_medium_url
      break;
    default:
      url = metadata.cover_medium_url;
  }

  url = url || metadata.cover_medium_url;
  if (!url) return null;
  url = url.slice(url.indexOf('/',8));
  console.log((type=='toc_thumbnail'?'toc thumbnail':'cover') + ' url: ' + url);
  
  return url;
}

/**
 * Normalizace objektu bibinfo.
 * Seradi polozky v objektu bibinfo do zadaneho poradi; isbn, oclc, nbn
 * Pouziva se zejmena pro spravne parovani odpovedi BE na /api/books/?multi dotaz FE, kdy poradi polozek v dotazu a odpovedi neni stejny.
 *
 * param bibinfo Objekt bibinfo
 * prarm asObject true=vrati serazeny objekt, false=serializuje na string
 */
function getSortedBibinfo(bibIn, asObject) {
  var bibOut = {}
  if (bibIn.isbn) bibOut.isbn = bibIn.isbn;
  if (bibIn.oclc) bibOut.oclc = bibIn.oclc;
  if (bibIn.nbn) bibOut.nbn = bibIn.nbn;
  return asObject===true ? bibOut : JSON.stringify(bibOut);
}

function encrypt(plain) {
  var key = crypto.createHash('sha256').update(cryptoPasskey).digest('base64');
  var cipher = crypto.createCipher('aes-256-cbc', key);
  var encypted = cipher.update(plain, 'utf8', 'base64');
  encypted += cipher.final('base64');
  return encypted;
}

function decrypt(encrypted) {
  var key = crypto.createHash('sha256').update(cryptoPasskey).digest('base64');
  var decipher = crypto.createDecipher('aes-256-cbc', key);
  var plain = decipher.update(encrypted, 'base64', 'utf8');
  plain += decipher.final('utf8');
  return plain;
}


module.exports = {
  server: server,
  getPerms: getPerms
}