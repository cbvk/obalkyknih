// ====================== CONFIG.TS ===================
// url na backend
//var urlMain: string = "www.obalkyknih.cz"
var urlMain = "10.89.56.102";
// url frontendu / spolecne url vsech frontnendu
//var urlReplace: string = "cache.obalkyknih.cz"
var urlReplace = "10.89.56.102";
// IP adresa backendu - udsud je mozne prijimat ridici prikazy
//var ipBackend: string = "195.113.145.13"
var ipBackend = "10.89.56.102";
var urlPart = "/";
var urlMetadata = "api/books";
var urlCoverFile = "file/cover";
var urlCoverApi = "api/cover";
var urlMasterFile = "file/master";
var urlParams = "?books=";
var urlTocFile = "file/toc";
var urlTocApiThumbnail = "api/toc/thumbnail";
var urlTocApiPdf = "api/toc/pdf";
var uriPartTocThumbnail = "/thumbnail";
var uriPartTocPdf = "/pdf";
var uriAlive = "runtime/alive";
// kolekcia s nastavenimi push API
var push_collection = "settings_push";
// kolekce s metadaty tak jak je pojmenovana v mongodb
var metaCollection = "okcz";
var metaAuthCollection = "okcz_auth";
// timeout dotazu na backend (ms)
var timeout = 5 * 1000;
// doba, po ktere se opet zkusime doptat backendu po timeoutu (ms)
var timeOutDuration = 1000 * 1000;
// doba, po ktere se opet pokusime stahnout nahled, pokud ho backend nemel (ms)
var timeNotfound = 86400 * 1000;
// adresar s TOC dokumenty
var tocFileDir = "/home/users/okcz/static/toc/";
// autority
var urlAuthMeta = "api/auth/meta";
var urlAuthMetaBE = "api/auth";
var urlAuthParams = "?auth=";
var urlAuthCover = "api/auth/cover";
// =========================================
var request = require('request');
var toEan = require('to-ean').toEan;
var URL_lib = require('url');
var fileSystem = require('fs');
var md5 = require('MD5');
var http = require('http');
var qs = require('querystring');
var mongo = require('mongodb');
var crypto = require('crypto');
var partParser = require('book-part-parser');
var cryptoPasskey = "";
var regexpSigla = new RegExp(/^[A-Z0-9]{6}$/);
var etags = {}; // obsahuje vsechny platne etag pro cache prohlizec
var Statistics = (function () {
    function Statistics() {
    }
    Statistics.addEtagFileMatch = function (sigla) {
        this.etagFileMatch[sigla]++ || (this.etagFileMatch[sigla] = 1);
        if (sigla != 'admin')
            this.etagFileMatch.admin++ || (this.etagFileMatch.admin = 1);
    };
    Statistics.addEtagTocPdfMatch = function (sigla) {
        this.etagTocPdfMatch[sigla]++ || (this.etagTocPdfMatch[sigla] = 1);
        if (sigla != 'admin')
            this.etagTocPdfMatch.admin++ || (this.etagTocPdfMatch.admin = 1);
    };
    Statistics.addEtagTocThumbMatch = function (sigla) {
        this.etagTocThumbMatch[sigla]++ || (this.etagTocThumbMatch[sigla] = 1);
        if (sigla != 'admin')
            this.etagTocThumbMatch.admin++ || (this.etagTocThumbMatch.admin = 1);
    };
    Statistics.addEtagCoverMatch = function (sigla) {
        this.etagCoverMatch[sigla]++ || (this.etagCoverMatch[sigla] = 1);
        if (sigla != 'admin')
            this.etagCoverMatch.admin++ || (this.etagCoverMatch.admin = 1);
    };
    Statistics.addFileRequests = function (sigla) {
        this.fileRequests[sigla]++ || (this.fileRequests[sigla] = 1);
        if (sigla != 'admin')
            this.fileRequests.admin++ || (this.fileRequests.admin = 1);
    };
    Statistics.addFileMasterRequests = function (sigla) {
        this.fileMasterRequests[sigla]++ || (this.fileMasterRequests[sigla] = 1);
        if (sigla != 'admin')
            this.fileMasterRequests.admin++ || (this.fileMasterRequests.admin = 1);
    };
    Statistics.addCoverRequests = function (sigla) {
        this.coverRequests[sigla]++ || (this.coverRequests[sigla] = 1);
        if (sigla != 'admin')
            this.coverRequests.admin++ || (this.coverRequests.admin = 1);
    };
    Statistics.addTocThumbnailRequests = function (sigla) {
        this.tocThumbnailRequests[sigla]++ || (this.tocThumbnailRequests[sigla] = 1);
        if (sigla != 'admin')
            this.tocThumbnailRequests.admin++ || (this.tocThumbnailRequests.admin = 1);
    };
    Statistics.addTocPdfRequests = function (sigla) {
        this.tocPdfRequests[sigla]++ || (this.tocPdfRequests[sigla] = 1);
        if (sigla != 'admin')
            this.tocPdfRequests.admin++ || (this.tocPdfRequests.admin = 1);
    };
    Statistics.addCoverApiRequests = function (sigla) {
        this.coverApiRequests[sigla]++ || (this.coverApiRequests[sigla] = 1);
        if (sigla != 'admin')
            this.coverApiRequests.admin++ || (this.coverApiRequests.admin = 1);
    };
    Statistics.addTocThumbnailApiRequests = function (sigla) {
        this.tocThumbnailApiRequests[sigla]++ || (this.tocThumbnailApiRequests[sigla] = 1);
        if (sigla != 'admin')
            this.tocThumbnailApiRequests.admin++ || (this.tocThumbnailApiRequests.admin = 1);
    };
    Statistics.addTocPdfApiRequests = function (sigla) {
        this.tocPdfApiRequests[sigla]++ || (this.tocPdfApiRequests[sigla] = 1);
        if (sigla != 'admin')
            this.tocPdfApiRequests.admin++ || (this.tocPdfApiRequests.admin = 1);
    };
    Statistics.addMetaRequests = function (sigla) {
        this.metaRequests[sigla]++ || (this.metaRequests[sigla] = 1);
        if (sigla != 'admin')
            this.metaRequests.admin++ || (this.metaRequests.admin = 1);
    };
    Statistics.addMetaAuthRequests = function (sigla) {
        this.metaAuthRequests[sigla]++ || (this.metaAuthRequests[sigla] = 1);
        if (sigla != 'admin')
            this.metaAuthRequests.admin++ || (this.metaAuthRequests.admin = 1);
    };
    Statistics.addTocThumbnailRemoves = function () {
        this.tocThumbnailRemoves++;
    };
    Statistics.addCoverRemoves = function () {
        this.coverRemoves++;
    };
    Statistics.addMetaRemoves = function () {
        this.metaRemoves++;
    };
    Statistics.addMetaAuthRemoves = function () {
        this.metaAuthRemoves++;
    };
    Statistics.addMetaFetches = function (sigla) {
        this.metaFetches[sigla]++ || (this.metaFetches[sigla] = 1);
        if (sigla != 'admin')
            this.metaFetches.admin++ || (this.metaFetches.admin = 1);
    };
    Statistics.addMetaAuthFetches = function (sigla) {
        this.metaAuthFetches[sigla]++ || (this.metaAuthFetches[sigla] = 1);
        if (sigla != 'admin')
            this.metaAuthFetches.admin++ || (this.metaAuthFetches.admin = 1);
    };
    Statistics.addTimeoutCount = function (sigla) {
        this.timeoutCount[sigla]++ || (this.timeoutCount[sigla] = 1);
        if (sigla != 'admin')
            this.timeoutCount.admin++ || (this.timeoutCount.admin = 1);
    };
    Statistics.addCoverNotfound = function (sigla) {
        this.coverNotfound[sigla]++ || (this.coverNotfound[sigla] = 1);
        if (sigla != 'admin')
            this.coverNotfound.admin++ || (this.coverNotfound.admin = 1);
    };
    Statistics.addTocThumbnailNotfound = function (sigla) {
        this.tocThumbnailNotfound[sigla]++ || (this.tocThumbnailNotfound[sigla] = 1);
        if (sigla != 'admin')
            this.tocThumbnailNotfound.admin++ || (this.tocThumbnailNotfound.admin = 1);
    };
    Statistics.addTocPdfNotfound = function (sigla) {
        this.tocPdfNotfound[sigla]++ || (this.tocPdfNotfound[sigla] = 1);
        if (sigla != 'admin')
            this.tocPdfNotfound.admin++ || (this.tocPdfNotfound.admin = 1);
    };
    Statistics.addCoverFetches = function (sigla) {
        this.coverFetches[sigla]++ || (this.coverFetches[sigla] = 1);
        if (sigla != 'admin')
            this.coverFetches.admin++ || (this.coverFetches.admin = 1);
    };
    Statistics.addTocThumbnailFetches = function (sigla) {
        this.tocThumbnailFetches[sigla]++ || (this.tocThumbnailFetches[sigla] = 1);
        if (sigla != 'admin')
            this.tocThumbnailFetches.admin++ || (this.tocThumbnailFetches.admin = 1);
    };
    //specialne
    Statistics.addEtagStatisticByEtagPrefix = function (etagPrefix, sigla) {
        if (etagPrefix === 'file') {
            this.addEtagFileMatch(sigla);
        }
        else if (etagPrefix === 'tocp') {
            this.addEtagTocPdfMatch(sigla);
        }
        else if (etagPrefix === 'toct') {
            this.addEtagTocThumbMatch(sigla);
        }
        else {
            this.addEtagCoverMatch(sigla);
        }
    };
    Statistics.getStatisticsBySigla = function (s, sigla) {
        var stats = {};
        stats.uptime = this.uptime();
        stats.etag_match = this.etagCoverMatch[sigla] || 0;
        stats.etag_toc_pdf_match = this.etagTocPdfMatch[sigla] || 0;
        stats.etag_toc_thumbnail_match = this.etagTocThumbMatch[sigla] || 0;
        stats.etag_file_match = this.etagFileMatch[sigla] || 0;
        stats.file_requests = this.fileRequests[sigla] || 0;
        stats.file_master_requests = this.fileMasterRequests[sigla] || 0;
        stats.timeout_count = this.timeoutCount[sigla] || 0;
        stats.meta_requests = this.metaRequests[sigla] || 0;
        stats.meta_fetches = this.metaFetches[sigla] || 0;
        stats.meta_auth_requests = this.metaAuthRequests[sigla] || 0;
        stats.meta_auth_fetches = this.metaAuthFetches[sigla] || 0;
        stats.cover_requests = this.coverRequests[sigla] || 0;
        stats.cover_api_requests = this.coverApiRequests[sigla] || 0;
        stats.cover_fetches = this.coverFetches[sigla] || 0;
        stats.cover_notfound = this.coverNotfound[sigla] || 0;
        stats.toc_thumbnail_requests = this.tocThumbnailRequests[sigla] || 0;
        stats.toc_thumbnail_api_requests = this.tocThumbnailApiRequests[sigla] || 0;
        stats.toc_thumbnail_fetches = this.tocThumbnailFetches[sigla] || 0;
        stats.toc_thumbnail_notfound = this.tocThumbnailNotfound[sigla] || 0;
        stats.toc_pdf_requests = this.tocPdfRequests[sigla] || 0;
        stats.toc_pdf_api_requests = this.tocPdfApiRequests[sigla] || 0;
        stats.toc_pdf_notfound = this.tocPdfNotfound[sigla] || 0;
        stats.meta_removes = this.metaRemoves;
        stats.cover_removes = this.coverRemoves;
        stats.toc_thumbnail_removes = this.tocThumbnailRemoves;
        s.db.collection(metaCollection).count(function (err, metaCount) {
            s.db.collection(metaAuthCollection).count(function (err, metaAuthCount) {
                s.db.collection('cover').count(function (err, coverCount) {
                    s.db.collection('logs').count(function (err, logsCount) {
                        stats.meta_count = metaCount;
                        stats.meta_auth_count = metaAuthCount;
                        stats.cover_count = coverCount;
                        stats.logs_count = logsCount;
                        if (s.query.save === 'true') {
                            stats.timeout_count = this.timeoutCount;
                            stats.meta_requests = this.metaRequests;
                            stats.meta_fetches = this.metaFetches;
                            stats.meta_auth_requests = this.metaAuthRequests;
                            stats.meta_auth_fetches = this.metaAuthFetches;
                            stats.cover_requests = this.coverRequests;
                            stats.cover_api_requests = this.coverApiRequests;
                            stats.cover_fetches = this.coverFetches;
                            stats.cover_notfound = this.coverNotfound;
                            stats.toc_thumbnail_requests = this.tocThumbnailRequests;
                            stats.toc_thumbnail_api_requests = this.tocThumbnailApiRequests;
                            stats.toc_thumbnail_fetches = this.tocThumbnailFetches;
                            stats.toc_thumbnail_notfound = this.tocThumbnailNotfound;
                            stats.toc_pdf_requests = this.tocPdfRequests;
                            stats.toc_pdf_api_requests = this.tocPdfApiRequests;
                            stats.toc_pdf_notfound = this.tocPdfNotfound;
                            stats.file_master_requests = this.fileMasterRequests;
                            stats.ip = s.remoteIP;
                            stats.timestamp = s.timestamp;
                            s.db.collection('stat').insert(stats, { w: 0 });
                        }
                        s.response.writeHead(200);
                        s.response.end(JSON.stringify(stats, null, ' '));
                    });
                });
            });
        });
    };
    Statistics.clearData = function () {
        this.timeoutCount = {};
        this.etagCoverMatch = {};
        this.etagTocPdfMatch = {};
        this.etagTocThumbMatch = {};
        this.etagFileMatch = {};
        this.fileRequests = {};
        this.fileOrigRequests = {};
        this.metaRequests = {};
        this.metaFetches = {};
        this.metaRemoves = 0;
        this.metaAuthRequests = {};
        this.metaAuthFetches = {};
        this.metaAuthRemoves = 0;
        this.coverRequests = {};
        this.coverApiRequests = {};
        this.coverFetches = {};
        this.coverNotfound = {};
        this.coverRemoves = 0;
        this.tocThumbnailRequests = {};
        this.tocThumbnailApiRequests = {};
        this.tocThumbnailFetches = {};
        this.tocThumbnailNotfound = {};
        this.tocThumbnailRemoves = 0;
        this.tocPdfRequests = {};
        this.tocPdfApiRequests = {};
        this.tocPdfNotfound = {};
    };
    Statistics.uptime = function () {
        var now = new Date();
        var uptime = Math.floor((now.getTime() - this.dateStartup.getTime()) / 1000);
        var sec = uptime % 60;
        uptime -= sec;
        uptime /= 60;
        var min = uptime % 60;
        uptime -= min;
        uptime /= 60;
        var hour = uptime % 24;
        uptime -= hour;
        uptime /= 24;
        now.setHours(hour, min, sec);
        var time = now.toString().split(' ')[4];
        // 00:02:51 up 0 days, 2013-12-06T08:35:21.962Z
        return time + ' up ' + uptime + ' days, ' + this.dateStartup.toISOString();
    };
    Statistics.etagCoverMatch = {}; // pocet dotazu na obalku kesovanych prohlizecem od spusteni
    Statistics.etagFileMatch = {}; // pocet dotazu na favicon, obalky-custom.js atd., kesovanych prohlizecem od spusteni
    Statistics.etagTocPdfMatch = {}; // pocet dotazu na TOC PDF, kesovanych prohlizecem od spusteni
    Statistics.etagTocThumbMatch = {}; // pocet dotazu na TOC nahled, kesovanych prohlizecem od spusteni
    Statistics.fileRequests = {}; // pocet dotazu na favicon, obalky-custom.js, atd.
    Statistics.fileMasterRequests = {}; // pocet dotazu na favicon, obalky-custom.js, atd.
    Statistics.metaRequests = {}; // pocet dotazu na metadata od spusteni
    Statistics.metaFetches = {}; // pocet nacteni metadat z backendu od spusteni
    Statistics.metaRemoves = 0; // pocet smazanych metadat z backendu od spusteni
    Statistics.metaAuthRequests = {}; // pocet dotazu na metadata od spusteni
    Statistics.metaAuthFetches = {}; // pocet nacteni metadat z backendu od spusteni
    Statistics.metaAuthRemoves = 0; // pocet smazanych metadat z backendu od spusteni
    Statistics.coverRequests = {}; // pocet dotazu obalky pres urlCoverFile od spusteni
    Statistics.coverApiRequests = {}; // pocet dotazu obalky pres urlCoverApi od spusteni
    Statistics.coverFetches = {}; // pocet nacteni obalky z backendu od spusteni
    Statistics.coverNotfound = {}; // pocet nenalezenych obalek z backendu od spusteni
    Statistics.coverRemoves = 0; // pocet smazanych obalek z backendu od spusteni
    Statistics.tocThumbnailRequests = {}; // pocet dotazu TOC nahledu pres urlTocFile thumbnail (/file/toc/xxxxxx/thumbnail) od spusteni
    Statistics.tocThumbnailApiRequests = {}; // pocet dotazu TOC nahledu pres urlTocApi thumbnail od spusteni
    Statistics.tocThumbnailFetches = {}; // pocet nacteni TOC nahledu z backendu od spusteni
    Statistics.tocThumbnailNotfound = {}; // pocet nenalezenych TOC nahledu z backendu od spusteni
    Statistics.tocThumbnailRemoves = 0; // pocet smazanych TOC nahledu z backendu od spusteni
    Statistics.tocPdfRequests = {}; // pocet dotazu na TOC dokumenty pres urlTocFile thumbnail (/file/toc/xxxxxx/thumbnail) od spusteni
    Statistics.tocPdfApiRequests = {}; // pocet dotazu na TOC dokumenty pres urlTocApiThumbnail od spusteni
    Statistics.tocPdfNotfound = {}; // pocet nenalezenych na TOC dokumenty z backendu od spusteni
    Statistics.timeoutCount = {}; // pocet timeout nedostupnosti backendu od spusteni
    Statistics.authMetaRequests = {}; // pocet dotazu na auth metadata od spusteni
    Statistics.authMetaFetches = {}; // pocet nacteni auth metadat z backendu od spusteni
    Statistics.authCoverApiRequests = {}; // pocet dotazu obalky pres urlAuthCover od spusteni    
    Statistics.dateTimeout = 0; // cas do kdy je platny timeout
    Statistics.dateStartup = new Date(); // doba startu
    return Statistics;
}());
// ====================== PERMISSIONS.TS ===================
var Permissions = (function () {
    function Permissions() {
    }
    Permissions.addPerm = function (s) {
        s.response.writeHead(200);
        var newPerm = {};
        if (s.remoteIP === ipBackend || s.remoteIP === '127.0.0.1' || s.remoteIP === '::1' || s.remoteIP === '::ffff:127.0.0.1') {
            //testLog
            if (s.query.ref)
                newPerm = { ref: s.query.ref, sigla: s.query.sigla };
            else if (s.query.ip)
                newPerm = { ip: s.query.ip, sigla: s.query.sigla };
            // add permission if not exists
            s.db.collection('perms').find(newPerm).count(function (err, permCount) {
                if (permCount == 0)
                    s.db.collection('perms').insert(newPerm, { w: 0 }, function (err, result) {
                        Permissions.getPerms(s.db);
                    });
            });
            s.response.write(JSON.stringify(Permissions.perms, null, ' ') + '\n\n');
            s.response.write(JSON.stringify(Permissions.referers, null, ' ') + '\n\n');
        }
        s.response.end('ok');
    };
    Permissions.getPerms = function (db, clear) {
        if (clear === void 0) { clear = false; }
        if (clear === true) {
            Permissions.perms = {};
            Permissions.referers = {};
        }
        Permissions.perms['127.0.0.1'] = 'admin';
        Permissions.perms['::1'] = 'admin';
        Permissions.perms['::ffff:127.0.0.1'] = 'admin';
        db.collection('perms').find().toArray(function (err, items) {
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                if (item.ref) {
                    console.log('referer: ' + item.ref);
                    Permissions.referers[item.ref] = item.sigla;
                }
                if (item.ip) {
                    console.log('ip: ' + item.ip);
                    Permissions.setSiglaForIp('::ffff:' + item.ip, item.sigla);
                }
            }
        });
    };
    Permissions.reloadPerms = function (s) {
        Permissions.getPerms(s.db);
        s.response.writeHead(200);
        if (Permissions.perms[s.remoteIP] || s.remoteIP === '127.0.0.1' || s.remoteIP === '::1' || s.remoteIP === '::ffff:127.0.0.1') {
            if (s.query.vymaz === 'true') {
                // for tests and debug only, not public url parameter
                Permissions.perms = {};
                Permissions.referers = {};
                etags = {};
                Statistics.clearData();
            }
            s.response.write(JSON.stringify(Permissions.perms, null, ' ') + '\n\n');
            s.response.write(JSON.stringify(Permissions.referers, null, ' ') + '\n\n');
        }
        s.response.end('ok');
    };
    Permissions.getSiglaForIp = function (ip) {
        return Permissions.perms[ip];
    };
    Permissions.setSiglaForIp = function (ip, sigla) {
        Permissions.perms[ip] = sigla;
    };
    Permissions.refererValid = function (referer, ip, encsigla) {
        // console.log('revererValid:' + referer);
        if (encsigla) {
            console.log(encsigla);
            var sigla = Helpers.decrypt(encsigla);
            if (regexpSigla.test(sigla))
                return sigla;
        }
        if (Permissions.getSiglaForIp(ip))
            return Permissions.getSiglaForIp(ip);
        if (!referer)
            return false;
        var refererOrig = referer;
        referer = referer.split('?')[0];
        var index = referer.indexOf('/', 8);
        if (index > 0)
            referer = referer.slice(0, index);
        if (Permissions.referers[referer]) {
            return Permissions.referers[referer];
        }
        if (Permissions.referers[referer + '/']) {
            return Permissions.referers[referer + '/'];
        }
        var index2nd = refererOrig.indexOf('/', index + 1);
        if (index2nd > 0)
            referer = refererOrig.slice(0, index2nd);
        if (Permissions.referers[referer]) {
            return Permissions.referers[referer];
        }
        if (Permissions.referers[referer + '/']) {
            return Permissions.referers[referer + '/'];
        }
        if (Permissions.referers[refererOrig]) {
            return Permissions.referers[refererOrig];
        }
        console.log('referer ' + referer + ' is not valid (' + refererOrig + ')');
        return false;
    };
    Permissions.ipValid = function (ip, sigla) {
        //console.log('ipValid:' + ip);
        var tmp = Permissions.getSiglaForIp(ip);
        if (!tmp)
            return false;
        if (tmp === 'sigla') {
            return sigla;
        }
        else {
            return tmp;
        }
    };
    Permissions.referers = {}; // povolene referer hlavicky
    Permissions.perms = {}; // povolene ip adresy
    return Permissions;
}());
// ====================== HELPER.TS ===================
var Helpers = (function () {
    function Helpers() {
    }
    Helpers.replaceUrl = function (meta, bibinfo) {
        if (meta.cover_thumbnail_url) {
            meta.cover_thumbnail_url = meta.cover_thumbnail_url.replace(urlMain, urlReplace);
        }
        if (meta.cover_medium_url) {
            meta.cover_medium_url = meta.cover_medium_url.replace(urlMain, urlReplace);
        }
        if (meta.cover_preview510_url) {
            meta.cover_preview510_url = meta.cover_preview510_url.replace(urlMain, urlReplace);
        }
        if (meta.cover_icon_url) {
            meta.cover_icon_url = meta.cover_icon_url.replace(urlMain, urlReplace);
        }
        if (meta.toc_text_url) {
            delete meta.toc_text_url;
        }
        if (meta.toc_thumbnail_url) {
            meta.toc_thumbnail_url = meta.toc_thumbnail_url.replace(urlMain, urlReplace);
        }
        if (meta.toc_pdf_url && meta.toc_pdf_url.indexOf('/view') === -1) {
            meta.toc_pdf_url = meta.toc_pdf_url.replace(urlMain, urlReplace);
        }
        if (bibinfo) {
            meta.bibinfo = bibinfo;
        }
        if (meta.part_ean_standalone != null) {
            delete meta.part_ean_standalone;
            delete meta.part_nbn_standalone;
            delete meta.part_oclc_standalone;
        }
        return meta;
    };
    Helpers.getUrlByType = function (metadata, type) {
        if (!metadata)
            return null;
        var url = null;
        switch (type) {
            case 'thumbnail':
                url = metadata.cover_thumbnail_url;
                break;
            case 'icon':
                url = metadata.cover_icon_url;
                break;
            case 'preview510':
                url = metadata.cover_preview510_url;
                break;
            case 'toc_thumbnail':
                url = metadata.toc_thumbnail_url;
                if (!url)
                    return null; // toc_thumbnail nesmi v pripade neexistence vratit cover_medium_url
                break;
            default:
                url = metadata.cover_medium_url;
        }
        url = url || metadata.cover_medium_url;
        if (!url)
            return null;
        url = url.slice(url.indexOf('/', 8));
        console.log((type == 'toc_thumbnail' ? 'toc thumbnail' : 'cover') + ' url: ' + url);
        return url;
    };
    /**
     * Normalizace objektu bibinfo.
     * Seradi polozky v objektu bibinfo do zadaneho poradi; isbn, oclc, nbn
     * Pouziva se zejmena pro spravne parovani odpovedi BE na /api/books/?multi dotaz FE, kdy poradi polozek v dotazu a odpovedi neni stejny.
     *
     * param bibinfo Objekt bibinfo
     * prarm asObject true=vrati serazeny objekt, false=serializuje na string
     */
    Helpers.getSortedBibinfo = function (bibIn, asObject) {
        var bibOut = {};
        var bibIn = bibIn || {};
        if (bibIn.isbn)
            bibOut.isbn = bibIn.isbn;
        if (bibIn.oclc)
            bibOut.oclc = bibIn.oclc;
        if (bibIn.nbn)
            bibOut.nbn = bibIn.nbn;
        return asObject === true ? bibOut : JSON.stringify(bibOut);
    };
    Helpers.encrypt = function (plain) {
        var key = crypto.createHash('sha256').update(cryptoPasskey).digest('base64');
        var cipher = crypto.createCipher('aes-256-cbc', key);
        var encypted = cipher.update(plain, 'utf8', 'base64');
        encypted += cipher.final('base64');
        return encypted;
    };
    Helpers.decrypt = function (encrypted) {
        var key = crypto.createHash('sha256').update(cryptoPasskey).digest('base64');
        var decipher = crypto.createDecipher('aes-256-cbc', key);
        var plain = decipher.update(encrypted, 'base64', 'utf8');
        plain += decipher.final('utf8');
        return plain;
    };
    /**
     * Proveruje identifikatory part_*
     */
    Helpers.partValidation = function (p) {
        if (!((p.part_year && p.part_no) || (p.part_volume && p.part_no) ||
            (!p.part_year && !p.part_volume && (p.part_no || p.part_name)) ||
            ((p.part_year || p.part_volume) && !p.part_no) ||
            (!p.part_year && !p.part_volume && !p.part_no && !p.part_name))) {
            console.log('part params combination not valid');
            return false;
        }
        if (p.length !== undefined) {
            console.log('object expected, array found');
            return false;
        }
        for (var prop in p) {
            if (p[prop].match(/<(.*)>/)) {
                console.log('param "' + prop + '":"' + p[prop] + '" contains illegal characters');
                return false;
            }
        }
        return true;
    };
    return Helpers;
}());
// ==========================================================
var PushSettingsRecord = (function () {
    function PushSettingsRecord(settings) {
        this.sigla = settings.sigla;
        this.url = settings.url;
        this.port = settings.port;
        this.email = settings.email;
        this.full_container = settings.full_container == 1;
        this.frequency = settings.frequency;
        this.item_count = settings.item_count;
        this.synced_last_time = null;
    }
    PushSettingsRecord.prototype.getDbString = function () {
        return { sigla: this.sigla, url: this.url, port: this.port, email: this.email, full_container: this.full_container, frequency: this.frequency, item_count: this.item_count, synced_last_time: this.synced_last_time };
    };
    return PushSettingsRecord;
}());
var PushSettings = (function () {
    function PushSettings() {
    }
    PushSettings.removeSettings = function (server, sigla, collection) {
        if (PushSettings.settings[sigla]) {
            delete PushSettings.settings[sigla];
            collection.remove({ sigla: sigla }, function () {
                server.response.writeHead(200);
                server.response.end('ok');
            });
        }
    };
    PushSettings.modifySettings = function (server, settings, collection) {
        var s = PushSettings.settings[settings.sigla];
        if (settings.frequency) {
            s.frequency = settings.frequency;
        }
        if (settings.item_count) {
            s.item_count = settings.item_count;
        }
        if (settings.full_container) {
            s.full_container = settings.full_container == "true";
        }
        if (settings.url) {
            s.url = settings.url;
        }
        if (settings.port) {
            s.port = settings.port;
        }
        if (settings.email) {
            s.email = settings.email;
        }
        collection.update({ sigla: s.sigla }, s.getDbString(), function () {
            server.response.writeHead(200);
            server.response.end('ok');
        });
    };
    PushSettings.addSettings = function (server, settings, collection) {
        var s = new PushSettingsRecord(settings);
        PushSettings.settings[settings.sigla] = s;
        collection.insert(s.getDbString(), function () {
            server.response.writeHead(200);
            server.response.end('ok');
        });
    };
    PushSettings.getPushSettings = function (clear, settings, db) {
        if (clear === void 0) { clear = false; }
        if (clear === true) {
            PushSettings.settings = [];
        }
        for (var s in settings) {
            PushSettings.settings[settings[s].sigla] = new PushSettingsRecord(settings[s]);
        }
        if (db) {
            db.collection('settings_push').find().toArray(function (err, items) {
                if (!err) {
                    for (var i in items) {
                        PushSettings.settings[items[i].sigla] = new PushSettingsRecord(items[i]);
                    }
                }
            });
        }
    };
    PushSettings.getSettings = function () {
        return PushSettings.settings;
    };
    PushSettings.getSettingsForSigla = function (sigla) {
        console.log(PushSettings.settings[sigla]);
        return PushSettings.settings[sigla];
    };
    PushSettings.settings = [];
    return PushSettings;
}());
// ====================== VERSION 19 ===================
var server = function (req, response, db) {
    var a = new Server(req, response, db);
    a.go(a);
};
var Server = (function () {
    function Server(req, response, db) {
        this.requrl = req.url;
        testLog("43", "verzia 43");
        testLog("92", "Request url:" + this.requrl);
        // console.log(req.connection.remoteAddress);
        // console.log(requrl);
        this.query = URL_lib.parse(this.requrl, true).query;
        // console.log('query: ' + JSON.stringify(query));
        this.date = new Date();
        this.timestamp = this.date.toISOString();
        this.now = this.date.getTime();
        // console.log(timestamp);
        // console.log('HEAD: ' + JSON.stringify(req.headers));
        this.etag = req.headers['if-none-match'] || req.headers['Etag'];
        this.referer = req.headers['referer'];
        this.xreferer = req.headers['x-referer'];
        this.remoteIP = req.connection.remoteAddress;
        this.encsigla = this.query.encsigla;
        if (!this.referer && this.xreferer)
            this.referer = this.xreferer;
        // console.log(etags);
        // console.log('index: ' + requrl.indexOf(urlMetadata));
        this.req = req;
        this.response = response;
        this.db = db;
        this.sigla = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
    }
    Server.prototype.go = function (s) {
        /**
         * ETAG MATCH
         **/
        if (etags[this.etag] !== undefined) {
            testLog("43", "[ETAG MATCH]");
            var sigla = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            var etagPrefix = this.etag.substring(0, 4);
            Statistics.addEtagStatisticByEtagPrefix(etagPrefix, sigla);
            this.response.statusCode = 304;
            this.response.end();
        }
        else if (this.requrl === '/favicon.ico' || this.requrl === '/obalky-custom.js' || this.requrl === '/obalky-functions.js') {
            var sigla = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            testLog("41", "[STATICKE SUBORY] Sigla:" + sigla);
            if (!this.isRequestValid(sigla, true)) {
                return;
            }
            Statistics.addFileRequests(sigla);
            testLog("41", "-> fileRequests[sigla]:" + Statistics.fileRequests[sigla]);
            if (this.requrl.substring(this.requrl.length - 4) === '.ico')
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl), 'Content-Type': 'image/x-icon' });
            if (this.requrl.substring(this.requrl.length - 2) === '.js')
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl), 'Content-Type': 'text/javascript' });
            else
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl) });
            etags['file-' + md5(this.requrl)] = null;
            var readStream = fileSystem.createReadStream('static' + this.requrl);
            readStream.pipe(this.response);
        }
        else if ((this.requrl.indexOf(urlCoverFile)) > 0) {
            var sigla = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            testLog("41", "[FILE COVER] Sigla:" + sigla);
            if (!this.isRequestValid(sigla, true)) {
                return;
            }
            // cover request
            Statistics.addCoverRequests(sigla);
            testLog("44", "-> requrl.split('?')[0]:" + this.requrl.split('?')[0]);
            this.cover(this, this.requrl.split('?')[0]);
        }
        else if ((this.requrl.indexOf(urlMasterFile)) > 0) {
            var sigla = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            if (!this.isRequestValid(sigla, true)) {
                return;
            }
            Statistics.addFileMasterRequests(sigla);
            // master request
            var tmpUri = this.requrl.split('?')[0];
            var uriSegments = tmpUri.split('/');
            if (isNaN(uriSegments[3])) {
                s.send404IfNotValue(false, 'Wrong request');
                return;
            }
            tmpUri = '/file/cover/' + uriSegments[3] + '/master';
            testLog("41", "-> FILE MASTER request:" + urlMain + '/' + tmpUri);
            var options = {
                hostname: urlMain,
                path: tmpUri
            };
            var reqMasterData = http.request(options, function (res) {
                testLog("41", "-> fileOrigRequests[sigla]:" + Statistics.fileMasterRequests[sigla]);
                if (res.statusCode !== 200) {
                    s.send404IfNotValue(false);
                    return;
                }
                var data = [];
                res.on('error', function (e) {
                    console.log(e);
                });
                res.on('data', function (chunk) {
                    s.response.write(chunk);
                }); //.pipe(response);
                res.on('end', function () {
                    s.response.end();
                });
            });
            reqMasterData.setTimeout(timeout, function () {
                s.req.abort();
                s.response.end();
            });
            reqMasterData.on('error', function (err) {
                if (err.code === "ECONNRESET") {
                    console.log('file master timeout occurs');
                }
            });
            reqMasterData.end();
        }
        else if ((this.requrl.indexOf(urlTocFile)) > 0) {
            var sigla = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            testLog("41", "[FILE TOC] Sigla:" + sigla);
            if (!this.isRequestValid(sigla, true)) {
                return;
            }
            var reqUrl = this.requrl.split('?')[0];
            testLog("41", "-> reqUrl:" + reqUrl);
            if ((reqUrl.indexOf(uriPartTocThumbnail)) > 0) {
                // TOC thumbnail request
                testLog("44", "->-> TOC thumbnail request");
                Statistics.addTocThumbnailRequests(sigla);
                this.cover(this, reqUrl);
            }
            else if ((reqUrl.indexOf(uriPartTocPdf)) > 0) {
                // TOC file request
                testLog("44", "->-> TOC pdf file request");
                Statistics.addTocPdfRequests(sigla);
                this.toc(this, reqUrl);
            }
        }
        else if ((this.requrl.indexOf(urlCoverApi)) > 0) {
            var sigla = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            testLog("41", "[API COVER] Sigla:" + sigla);
            if (!this.isRequestValid(sigla, true, true)) {
                return;
            }
            Statistics.addCoverApiRequests(sigla);
            var result = this.getResult();
            console.dir(result);
            if (this.sendPlaceholderIfNotValue(result)) {
                return;
            }
            testLog("34", "-> db.collection(metaCollection).find(sel) : db.collection(" + metaCollection + ").find(" + result.sel + ")");
            console.dir(result.sel);
            this.db.collection(metaCollection).find(result.sel).toArray(function (err, items_raw) {
                if (!items_raw.length) {
                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], true, false, false);
                    return;
                }
                // Projdi doposud ziskane vysledky z DB
                if (items_raw) {
                    var items = s.getSortedItemsFromItemsRaw(items_raw);
                    delete items_raw;
                    var bibinfo = result.bib;
                    var found = false; // prvni shoda a dost
                    for (var i = 0; i < items.length; i++) {
                        var itemInfo = s.getItemInfoFromItem(items[i]);
                        /* Spolecne chovani BE a FE pri rozhodovani nad dotazy s vice parametry:
                         * Uplatnuje se priorita parametru v tomto poradi ISBN, OCLC, NBN.
                         * Pokud mame 2 zaznamy, kde ISBN=1, OCLC=2, NBN=3 a ISBN=1, OCLC=2, NBN=4 a
                         * zeptame se na ISNB=1 dostaneme 1.zaznam, pokud se zeptame na OCLC=2 dostaneme
                         * taky 1.zaznam, pokud se zeptame na NBN=4 dostaneme 2.zaznam.
                         * Ale pokud se zeptame na kombinaci ISBN=1 + NBN=4 dostaneme 1.zaznam, protoze
                         * prioritni je ISBN a zhoda se nasla uz pri prvnim zaznamu, dale se nepokracuje.
         
                         * FE operuje s 2 zdroji: lokalni MongoDB a BE API
                         * Rozdil ve vysledku mezi odpovedi BE a FE muze nastat prave pri duplikovanych
                         * zaznamu z prikladu v predchozim odstavci. Pokud zaznam c.1 jeste nebude dotazen
                         * na FE a zeptame se na kombinaci ISBN=1 + NBN=4 dostaneme jako vysledek 2. zaznam.*/
                        if (itemInfo.item !== null && s.isGoodItemInfoForBibInfo(itemInfo, bibinfo)) {
                            // uplatneni priority parametru
                            // 0=ISBN, 1=OCLC, 2=NBN
                            for (var j = 0; j < 3; j++) {
                                var found = s.itemFound(itemInfo, bibinfo, j);
                                if (found) {
                                    var coverUrl = Helpers.getUrlByType(itemInfo.item, s.query.type);
                                    if (s.sendPlaceholderIfNotValue(coverUrl)) {
                                        return;
                                    }
                                    else {
                                        s.cover(s, coverUrl, true, false);
                                        return;
                                    }
                                }
                            }
                        }
                    } // for items
                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], true, false, false);
                    return;
                } // if items
            });
        }
        else if ((this.requrl.indexOf(urlTocApiThumbnail)) > 0) {
            var sigla = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            if (!this.isRequestValid(sigla, true, true)) {
                return;
            }
            Statistics.addTocThumbnailApiRequests(sigla);
            var result = this.getResult();
            if (this.sendPlaceholderIfNotValue(result)) {
                return;
            }
            this.db.collection(metaCollection).find(result.sel).toArray(function (err, items_raw) {
                if (!items_raw.length) {
                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], false, true, false);
                    return;
                }
                // Projdi doposud ziskane vysledky z DB
                if (items_raw) {
                    var items = s.getSortedItemsFromItemsRaw(items_raw);
                    delete items_raw;
                    var bibinfo = result.bib;
                    var found = false; // prvni shoda a dost
                    for (var i = 0; i < items.length; i++) {
                        var itemInfo = s.getItemInfoFromItem(items[i]);
                        /* Blizsie info u API COVER */
                        if (itemInfo.item !== null && s.isGoodItemInfoForBibInfo(itemInfo, bibinfo)) {
                            // uplatneni priority parametru
                            // 0=ISBN, 1=OCLC, 2=NBN
                            for (var j = 0; j < 3; j++) {
                                var found = s.itemFound(itemInfo, bibinfo, j);
                                if (found) {
                                    var tocThumbnailUrl = Helpers.getUrlByType(itemInfo.item, 'toc_thumbnail');
                                    if (s.sendPlaceholderIfNotValue(tocThumbnailUrl)) {
                                        return;
                                    }
                                    //console.log(tocThumbnailUrl);
                                    s.cover(s, tocThumbnailUrl, false, true);
                                    return;
                                }
                            }
                        }
                    } // for items
                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], false, true, false);
                    return;
                } // if items
            });
        }
        else if ((this.requrl.indexOf(urlTocApiPdf)) > 0) {
            var sigla = Permissions.refererValid(this.referer, this.remoteIP, this.encsigla);
            if (!this.isRequestValid(sigla, true, true)) {
                return;
            }
            Statistics.addTocPdfApiRequests(sigla);
            var result = this.getResult();
            if (this.send404IfNotValue(result, 'Unknown referer. You need to sign up at http://www.obalkyknih.cz and provide your catalog URL')) {
                return;
            }
            this.db.collection(metaCollection).find(result.sel).toArray(function (err, items_raw) {
                if (!items_raw.length) {
                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], false, false, true);
                    return;
                }
                // Projdi doposud ziskane vysledky z DB
                if (items_raw) {
                    var items = s.getSortedItemsFromItemsRaw(items_raw);
                    delete items_raw;
                    var bibinfo = result.bib;
                    var found = false; // prvni shoda a dost
                    for (var i = 0; i < items.length; i++) {
                        var itemInfo = s.getItemInfoFromItem(items[i]);
                        /* Blizsie info u API COVER */
                        if (itemInfo.item !== null && s.isGoodItemInfoForBibInfo(itemInfo, bibinfo)) {
                            // uplatneni priority parametru
                            // 0=ISBN, 1=OCLC, 2=NBN
                            for (var j = 0; j < 3; j++) {
                                var found = s.itemFound(itemInfo, bibinfo, j);
                                if (found) {
                                    if (!itemInfo.item.toc_pdf_url) {
                                        s.send404IfNotValue(false);
                                        return;
                                    }
                                    else {
                                        s.toc(s, itemInfo.item.toc_pdf_url);
                                        return;
                                    }
                                }
                            }
                        }
                    } // for items
                    // obalka neni v DB a je potrebne nacist z back-end API metadata
                    // funkce metadata() rovnou posle klientovi obalku
                    s.metadata(s, [{ bibinfo: result.bib, permalink: "a" }], [], false, false, true);
                    return;
                } // if items
            });
        }
        else if ((this.requrl.indexOf(urlMetadata)) > 0) {
            var sigla = Permissions.ipValid(this.remoteIP, this.query.sigla);
            var fetcha = []; // pole objektu s parametry {isbn:xxx},{isbn:yyy,nbn:zzz}
            if (!this.isRequestValid(sigla, true, true)) {
                return;
            }
            Statistics.addMetaRequests(sigla);
            var ean = '';
            var isbns = []; // temporary
            var isbna = []; // pole s ISBN identifikatory
            var nbns = []; // temporary
            var nbna = []; // pole s NBN identifikatory
            var oclcs = []; // temporary
            var oclca = []; // pole s OCLC identifikatory
            var uuida = []; // pole s UUID identifikatory (Kramerius)
            var multis = []; // temporary
            for (var queryKey in this.query) {
                if (queryKey == 'isbn') {
                    var isbns = this.query.isbn.split(',');
                    for (var i = 0; i < isbns.length; i++) {
                        var isbn = isbns[i];
                        if (!isbn)
                            continue;
                        isbn = isbn.split(' ')[0];
                        ean = toEan(isbn);
                        if (ean === null)
                            continue;
                        isbna.push(ean);
                        fetcha.push({ isbn: isbn }); // pole objektu s dotazy
                    }
                }
                else if (queryKey == 'nbn') {
                    var nbns = this.query.nbn.split(',');
                    for (var i = 0; i < nbns.length; i++) {
                        var nbn = nbns[i];
                        if (!nbn)
                            continue;
                        nbna.push(nbn);
                        fetcha.push({ nbn: nbn }); // pole objektu s dotazy
                    }
                }
                else if (queryKey == 'oclc') {
                    var oclcs = this.query.oclc.split(',');
                    for (var i = 0; i < oclcs.length; i++) {
                        var oclc = oclcs[i];
                        if (!oclc)
                            continue;
                        oclca.push(oclc);
                        fetcha.push({ oclc: oclc }); // pole objektu s dotazy
                    }
                }
                else if (queryKey == 'multi') {
                    try {
                        var multis = JSON.parse(decodeURIComponent(this.query.multi));
                    }
                    catch (err) {
                        this.send404IfNotValue(false, 'Check query syntax');
                        return;
                    }
                    for (var i = 0; i < multis.length; i++) {
                        var multi = multis[i];
                        var fetchMulti = {}; // temporary
                        // odlozeni originalniho pozadavku bibinfo (bude vracen tak jak je v odpovedi)
                        fetchMulti.bibinfo = {};
                        for (var property in multi) {
                            if (multi.hasOwnProperty(property) && property != 'bibinfo') {
                                fetchMulti.bibinfo[property] = multi[property];
                            }
                        }
                        // parsovani identifikatoru vicesvazkoveho dila a periodika (parse_note se pouziva pokud knihovni system nema data rok/rocnik/cislo/cislo casti/nazev casti oddelene)
                        if (multi.part_note) {
                            var parts = partParser.parse(multi.part_note);
                            if (parts.year)
                                multi.part_year = parts.year;
                            if (parts.volume)
                                multi.part_volume = parts.volume;
                            if (parts.part)
                                multi.part_no = parts.part;
                            if (parts.part && !parts.year && !parts.volume)
                                multi.part_name = parts.part;
                        }
                        // validation
                        if (!Helpers.partValidation(multi)) {
                            // jedna z casti obsahuje zakazane znaky, nebo kombinace casti neni validni
                            delete multi.part_year;
                            delete multi.part_volume;
                            delete multi.part_no;
                            delete multi.part_name;
                        }
                        // normalizace
                        if (multi.part_year)
                            multi.part_year = partParser.normalizeYear(multi.part_year);
                        if (multi.part_volume)
                            multi.part_volume = partParser.normalizeVolume(multi.part_volume);
                        if (multi.part_no)
                            multi.part_no = partParser.normalizePart(multi.part_no);
                        if (multi.part_name)
                            multi.part_name = partParser.normalizePart(multi.part_name);
                        // normalizace spatne zduplikovaneho roku, rocniku, nebo cisla v pozadavku
                        if (multi.part_year && multi.part_volume && multi.part_year == multi.part_volume) {
                            if (multi.part_year.length == 4)
                                delete multi.part_volume;
                            else
                                delete multi.part_year;
                        }
                        if (multi.part_year && multi.part_no && multi.part_year == multi.part_no) {
                            if (multi.part_year.length == 4)
                                delete multi.part_no;
                        }
                        for (var key in multi) {
                            if (key == 'isbn') {
                                isbn = multi.isbn.split(' ')[0];
                                ean = toEan(isbn);
                                if (ean !== null) {
                                    isbna.push(ean);
                                    fetchMulti.isbn = isbn;
                                }
                            }
                            if (key == 'oclc') {
                                oclca.push(multi.oclc);
                                fetchMulti.oclc = multi.oclc;
                            }
                            if (key == 'nbn') {
                                nbna.push(multi.nbn);
                                fetchMulti.nbn = multi.nbn;
                            }
                            if (key == 'uuid') {
                                uuida.push(multi.uuid);
                                fetchMulti.uuid = multi.uuid;
                            }
                            // U /api/book se dotazujeme na vic zaznamu, proto pozadavek pouze zaznamename, ale do DB se dotazujeme
                            // pomoci isbn, nbn, oclc. Pozadavek bude naparovany na ziskane zaznamy z MongoDB.
                            if (key == 'part_year') {
                                fetchMulti.part_year = multi.part_year;
                            }
                            if (key == 'part_volume') {
                                fetchMulti.part_volume = multi.part_volume;
                            }
                            if (key == 'part_no') {
                                fetchMulti.part_no = multi.part_no;
                            }
                            if (key == 'part_name') {
                                fetchMulti.part_name = multi.part_name;
                            }
                        }
                        fetcha.push(fetchMulti); // pole objektu s dotazy
                    }
                }
            }
            this.response.writeHead(200, { 'Content-Type': 'text/plain' });
            var json = [];
            // pole objektu fetcha prevedeno na pole retezcu; bude se parovat na odpoved bibinfo z BE
            var fetchaStr = [];
            for (var i = 0; i < fetcha.length; i++) {
                if (fetcha[i]) {
                    fetchaStr[i] = Helpers.getSortedBibinfo(fetcha[i].bibinfo);
                }
            }
            this.db.collection(metaCollection).find({ $or: [{ ean: { $in: isbna } }, { nbn: { $in: nbna } }, { oclc: { $in: oclca } }, { uuid: { $in: uuida } }] }).toArray(function (err, items_raw) {
                /* Projdi doposud ziskane vysledky z DB
                 * prirad jednotlivym dotazum odpovedi z DB (jeden zaznam muze byt odpoved na vic dotazu)
                 * dotazy, na ktere se nedohledaji zaznamy budou pouzite jako novy dotaz na API BE serveru */
                if (items_raw) {
                    var items = s.getSortedItemsFromItemsRaw(items_raw);
                    delete items_raw;
                    for (var i = 0; i < items.length; i++) {
                        var itemInfo = s.getItemInfoFromItem(items[i]);
                        /* Blizsie info u API COVER */
                        if (itemInfo.item !== null) {
                            // uplatneni priority parametru
                            // 0=ISBN, 1=OCLC, 2=NBN, 3=UUID
                            for (var j = 0; j <= 3; j++) {
                                // projdi dotazy (naparuje dotazy na ziskanou polozku z DB a posklada odpoved metadata API)
                                for (var k in fetcha) {
                                    var bibinfo = fetcha[k];
                                    var found = false;
                                    if (!s.isGoodItemInfoForBibInfo(itemInfo, bibinfo)) {
                                        continue;
                                    }
                                    var found = s.itemFound(itemInfo, bibinfo, j);
                                    if (found) {
                                        itemInfo.item.bibinfo = bibinfo.bibinfo;
                                        var pos = fetchaStr.indexOf(Helpers.getSortedBibinfo(itemInfo.item.bibinfo));
                                        if (pos >= 0) {
                                            json[pos] = Helpers.replaceUrl(itemInfo.item);
                                            delete fetchaStr[pos];
                                        }
                                        else {
                                            json.push(Helpers.replaceUrl(itemInfo.item));
                                        }
                                        delete fetcha[k];
                                    }
                                }
                            }
                            if (!fetcha.length)
                                break;
                        }
                    } // for items
                } // if items
                var fetchaBE = [];
                for (i in fetcha) {
                    var bibinfo = fetcha[i];
                    if (metaCollection == 'okcz') {
                        fetchaBE[i] = { bibinfo: bibinfo, permalink: 'a' };
                    }
                    else if (bibinfo.isbn) {
                        fetchaBE[i] = { bibinfo: { isbn: bibinfo.isbn }, permalink: 'a' };
                    }
                }
                s.metadata(s, fetchaBE, json);
            });
        }
        else if ((this.requrl.indexOf(urlAuthMeta)) > 0) {
            var sigla = Permissions.ipValid(this.remoteIP, this.query.sigla);
            var fetcha = []; // pole objektu s parametry {id:xxx},{id:yyy}
            if (!this.isRequestValid(sigla, true, true)) {
                return;
            }
            if (!this.query.auth_id) {
                response.end('[]');
                return;
            }
            Statistics.addMetaAuthRequests(sigla);
            var ida = []; // pole s ID identifikatory
            for (queryKey in this.query) {
                if (queryKey == 'auth_id') {
                    var ids = this.query.auth_id.split(',');
                    for (var i = 0; i < ids.length; i++) {
                        var id = ids[i];
                        if (id)
                            ida.push(id);
                        fetcha.push({ auth_id: id }); // pole objektu s dotazy
                    }
                }
            }
            this.response.writeHead(200, { 'Content-Type': 'text/plain' });
            var json = [];
            // pole objektu fetcha prevedeno na pole retezcu; bude se parovat na odpoved authinfo z BE
            var fetchaStr = [];
            for (var i = 0; i < fetcha.length; i++) {
                if (fetcha[i]) {
                    json.push(null);
                    if (fetcha[i].auth_id != '')
                        fetchaStr[i] = JSON.stringify({ auth_id: fetcha[i].auth_id });
                }
            }
            this.db.collection(metaAuthCollection).find({ auth_id: { $in: ida } }).toArray(function (err, items) {
                /* Projdi doposud ziskane vysledky z DB
                 * prirad jednotlivym dotazum odpovedi z DB (jeden zaznam muze byt odpoved na vic dotazu)
                 * dotazy, na ktere se nedohledaji zaznamy budou pouzite jako novy dotaz na API BE serveru */
                if (items) {
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        var id = item.auth_id;
                        if (item !== null) {
                            // projdi dotazy (naparuje dotazy na ziskanou polozku z DB a posklada odpoved metadata API)
                            for (var k in fetcha) {
                                var authinfo = fetcha[k];
                                var found = false;
                                // ID authority
                                if (authinfo.auth_id) {
                                    if (authinfo.auth_id != id)
                                        continue;
                                    found = true;
                                }
                                if (found) {
                                    item.authinfo = authinfo;
                                    var pos = fetchaStr.indexOf(JSON.stringify(item.authinfo));
                                    if (pos >= 0) {
                                        json[pos] = Helpers.replaceUrl(item);
                                        delete fetchaStr[pos];
                                    }
                                    else {
                                        json.push(replaceUrl(item));
                                    }
                                    delete fetcha[k];
                                }
                            }
                            if (!fetcha.length)
                                break;
                        }
                    } // for items
                } // if items
                var fetchaBE = [];
                for (var i in fetcha) {
                    var authinfo = fetcha[i];
                    fetchaBE[i] = { authinfo: authinfo };
                }
                s.metadataAuth(s, fetchaBE, json);
            });
        }
        else if (this.query.stats === 'true') {
            var sigla = Permissions.ipValid(this.remoteIP, this.query.sigla);
            if (!sigla && (this.remoteIP === '127.0.0.1' || this.remoteIP === '::1' || this.remoteIP === '::ffff:127.0.0.1'))
                sigla = 'admin';
            console.log(sigla);
            if (sigla) {
                Statistics.getStatisticsBySigla(this, sigla);
            }
            else {
                this.send404IfNotValue(false, 'Access denied ' + this.remoteIP);
            }
        }
        else if (this.query.permreload === 'true') {
            Permissions.reloadPerms(this);
        }
        else if (this.query.permcreate === 'true' && this.query.sigla) {
            Permissions.addPerm(this);
        }
        else if (this.query.settings_push_create === 'true' && this.query.sigla) {
            PushSettings.addSettings(this, this.query, this.db.collection(push_collection));
        }
        else if (this.query.settings_push_modify === 'true' && this.query.sigla) {
            PushSettings.modifySettings(this, this.query, this.db.collection(push_collection));
        }
        else if (this.query.settings_push_remove === 'true' && this.query.sigla) {
            PushSettings.removeSettings(this, this.query.sigla, this.db.collection(push_collection));
        }
        else if (this.query.remove === 'true') {
            var push_collection_1 = this.db.collection('okcz_push');
            var is_post = this.req.method == 'POST';
            if (is_post) {
                var post_data = '';
                this.req.on('data', function (chunk) {
                    post_data += chunk;
                });
                this.req.on('end', function () {
                    s.syncPushApi(push_collection_1, post_data, null);
                });
            }
            var sel = { $or: [] };
            if (this.query.isbn) {
                var isbn = this.query.isbn.split(' ')[0];
                var ean = toEan(isbn);
                sel.$or.push({ ean: ean });
            }
            if (this.query.nbn) {
                sel.$or.push({ nbn: this.query.nbn });
            }
            if (this.query.oclc) {
                sel.$or.push({ oclc: this.query.oclc });
            }
            if (this.query.book_id) {
                console.log(JSON.stringify(this.query.book_id));
                sel.$or.push({ book_id: this.query.book_id });
                sel.$or.push({ book_id_parent: this.query.book_id });
            }
            if (sel.$or.length == 0) {
                this.send404IfNotValue(false, 'No identifier');
                return;
            }
            else {
                var ids = JSON.stringify(sel.$or);
                s.syncPushApi(push_collection_1, (is_post ? null : ids), ids);
            }
            this.response.writeHead(200);
            testLog('42', JSON.stringify(sel, ' ')); //debug
            this.db.collection(metaCollection).find(sel).toArray(function (err, items) {
                if (!items) {
                    s.response.end('Wrong request');
                    return;
                }
                if (!items.length) {
                    s.response.end('Not found');
                    return;
                }
                // muze existovat vic metadatovych zaznamu s identifikatory, ktere chceme promazat
                for (var i = 0; i < items.length; i++) {
                    var item = items[i];
                    // dotaz do kolekce cover; hledame obalky a nahledy obsahu na smazani
                    var subSel = item.cover_medium_url ? { $or: [{ url: Helpers.getUrlByType(item) }, { url: Helpers.getUrlByType(item, 'icon') }, { url: Helpers.getUrlByType(item, 'thumbnail') }, { url: Helpers.getUrlByType(item, 'toc_thumbnail') }] } : { $or: [] };
                    if (item.toc_thumbnail_url)
                        subSel.$or.push({ url: Helpers.getUrlByType(item, 'toc_thumbnail') });
                    var toc = item.toc_thumbnail_url;
                    var tocPdf = item.toc_pdf_url;
                    // vymaz i TOC nahled, pokud nejaky je
                    if (toc) {
                        //subSel.$or.push({ toc_thumbnail_url: toc.slice(toc.indexOf('/', 8)) });
                        delete etags['toct-' + md5(toc)];
                    }
                    // vymaz pouze TOC PDF etag; samotny TOC PDF je na disku
                    if (tocPdf) {
                        delete etags['tocp-' + md5(item.toc_pdf_url)];
                    }
                    // asynchronous
                    console.dir(subSel);
                    s.db.collection('cover').find(subSel).toArray(function (err, items) {
                        console.dir();
                        if (!items)
                            return;
                        for (var j = 0; j < items.length; j++) {
                            var cid = items[j]._id;
                            var item_type = (items[j].url.indexOf(urlTocFile) > 0) ? 'toc_thumbnail' : 'cover';
                            (function (cid, item_type, item_url) {
                                s.db.collection('cover').remove({ _id: cid }, { single: true }, function (err, removed) {
                                    if (err)
                                        console.log('failed to remove ' + item_type + ' _id: ' + cid);
                                    else {
                                        if (item_type == 'toc_thumbnail') {
                                            Statistics.addTocThumbnailRemoves();
                                            delete etags['toct-' + md5(item_url)];
                                        }
                                        else {
                                            Statistics.addCoverRemoves();
                                            delete etags[cid];
                                        }
                                        console.log('removed ' + item_type + ' etag: ' + (item_type == 'toc_thumbnail' ? 'toct-' + md5(item_url) : cid));
                                    }
                                });
                            })(cid, item_type, items[j].url);
                        }
                    });
                    Statistics.addMetaRemoves();
                }
                // smaz vsechna pozadovana metadata
                s.db.collection(metaCollection).remove(sel, function (err, removed) {
                    if (err)
                        s.response.end('Failed to remove _id: ' + item._id);
                    else {
                        s.response.end('ok');
                    }
                });
            });
        }
        else if (this.query.add_review === 'true') {
            if (this.req.method == 'POST') {
                var sigla = Permissions.ipValid(this.remoteIP, this.query.sigla);
                if (!this.isRequestValid(sigla, false, false, true)) {
                    return;
                }
                var post_data = '';
                this.req.on('data', function (chunk) {
                    post_data += chunk;
                });
                this.req.on('end', function () {
                    post_data = qs.parse(post_data);
                    if (!post_data.rating_value && !post_data.review_text) {
                        this.send404IfNotValue(false, 'Param rating_value or review_text is mandatory');
                        return;
                    }
                    // normalizace ciselneho hodnoceni
                    if (post_data.rating_value === 'like') {
                        var rating = 100;
                    }
                    else if (post_data.rating_value === 'dislike') {
                        var rating = 0;
                    }
                    else if (post_data.rating_value) {
                        var rating = parseInt(post_data.rating_value) * 10 || 0; // na BE je stupnice 0-100
                        if (rating > 100)
                            rating /= 10; // pro pripad ze klient zasila cisla v rozmezi 0-100
                        if (rating > 100)
                            rating = 100; // pro pripad preteceni maxima jednoho hodnoceni
                    }
                    // zarazeni synchronizacni udalosti do fronty (kolekce be_sync)
                    var post_data_db = {};
                    if (rating > 0)
                        post_data_db.rating = rating;
                    if (post_data.review_text)
                        post_data_db.html_text = post_data.review_text;
                    var get_data_db = { book_id: this.query.book_id, sigla: sigla };
                    if (this.query.id)
                        get_data_db.id = this.query.id;
                    this.db.collection('be_sync').insert({ timestamp: this.timestamp, flag_synced: 0, retry_count: 0, retry_date: this.timestamp, get_data: get_data_db, post_data: post_data_db, uri: 'api/add_review' }, { w: 1 }, function (err, result) {
                        s.response.writeHead(200);
                        s.response.end('ok');
                    });
                });
            }
            else {
                this.send404IfNotValue(false, 'No review post data to insert/edit');
            }
        }
        else if (this.query.del_review === 'true') {
            var sigla = Permissions.ipValid(this.remoteIP, this.query.sigla);
            if (!this.isRequestValid(sigla, false, false, false, true)) {
                return;
            }
            // zarazeni synchronizacni udalosti do fronty (kolekce be_sync)
            var get_data_db = { id: this.query.id, sigla: sigla };
            this.db.collection('be_sync').insert({ timestamp: this.timestamp, flag_synced: 0, retry_count: 0, retry_date: this.timestamp, get_data: get_data_db, uri: 'api/del_review' }, { w: 1 }, function (err, result) {
                s.response.writeHead(200);
                s.response.end('ok');
            });
        }
        else if (this.query.reviewupdate === 'true') {
            if (this.req.method == 'POST') {
                var body = '';
                this.req.on('data', function (chunk) {
                    body += chunk;
                });
                this.req.on('end', function () {
                    var book_id = parseInt(this.query.book_id);
                    if (book_id > 0) {
                        try {
                            var post_json = JSON.parse(body);
                        }
                        catch (err) {
                            this.send404IfNotValue(false, 'Check query syntax');
                            return;
                        }
                        if (post_json.review && this.query.review_count) {
                            var review_count = post_json.review.length;
                            if (review_count != parseInt(this.query.review_count)) {
                                this.send404IfNotValue(false, 'Review count missed match');
                                return;
                            }
                        }
                        this.db.collection(metaCollection).update({ book_id: this.query.book_id }, { $set: { rating_count: this.query.rating_count, rating_sum: this.query.rating_sum, rating_avg100: this.query.rating_avg100, rating_url: this.query.rating_url, rating_avg5: this.query.rating_avg5, reviews: post_json.review } }, { w: 1 }, function (err, result) {
                            if (err) {
                                console.dir(err);
                            }
                            s.response.writeHead(200);
                            s.response.end('ok');
                        });
                    }
                    else {
                        this.send404IfNotValue(false, 'No metadata id specified');
                    }
                });
            }
            else {
                this.send404IfNotValue(false, 'No review data to update');
            }
        }
        else if ((this.requrl.indexOf(uriAlive)) > 0) {
            this.response.writeHead(200);
            this.response.end('ALIVE');
        }
        else if (this.requrl.substr(0, 5) == '/view') {
            this.response.writeHead(301, { Location: 'http://' + urlMain + this.requrl });
            this.response.end();
        }
        else {
            console.log("wrong query");
            this.send404IfNotValue(false);
        }
    };
    // nacteni metadat podle identifikatoru
    // pyta sa backendu na to co frontend este nema v cache
    // fetcha = identifikatory ktore sa dotazoval katalog v URL, ale v cache niesu
    // json = pole objektov zaznamov, ktore sa uz nasli v cache
    // http://www.obalkyknih.cz/api/books?books=[{%22bibinfo%22%3A{%22nbn%22%3A%22cnb001315197%22}%2C%22permalink%22%3A%22a%22}]&amp;review=1&amp;toc_full_text=1
    Server.prototype.metadata = function (s, fetcha, json, coverApi, tocThumbApi, tocPdfApi) {
        var sigla = s.sigla; //zrusit ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        var req = s.req;
        var db = s.db;
        var response = s.response;
        var query = s.query;
        var now = s.now;
        testLog("46", "!!!![metadata] sigla: " + sigla + ", query:" + JSON.stringify(query) + ", now: " + now);
        if ((fetcha.length > 0) && (now > Statistics.dateTimeout)) {
            // odlozeni pozadavku bokem (pripoji se rovno k odpovedi)
            var bibinfoOrig = new Array();
            for (var k in fetcha) {
                if (fetcha[k].bibinfo) {
                    bibinfoOrig[k] = {};
                    bibinfoOrig[k] = fetcha[k].bibinfo.bibinfo;
                    delete fetcha[k].bibinfo.bibinfo;
                }
            }
            // poskladani URL dotazu na BE
            var fetch = metaCollection == 'okcz' ? JSON.stringify(fetcha) : fetcha.join(',');
            fetch = encodeURIComponent(fetch);
            var url = 'http://' + urlMain + urlPart + urlMetadata + urlParams + fetch + '&amp;review=1&amp;toc_full_text=1';
            // console.log('request: ' + url); //debug
            // pole objektu fetcha prevedeno na pole retezcu; bude se parovat na odpoved bibinfo z BE
            var fetchaStr = [];
            if (metaCollection == 'okcz') {
                for (var i = 0; i < fetcha.length; i++) {
                    if (fetcha[i]) {
                        fetchaStr[i] = Helpers.getSortedBibinfo(fetcha[i].bibinfo);
                    }
                }
            }
            Statistics.addMetaFetches(sigla);
            request({ url: url, timeout: timeout }, function (error, res, body) {
                if (!error) {
                    // console.log(body);
                    try {
                        if (metaCollection == 'okcz') {
                            var jsonf = JSON.parse(body.substring(16, body.length - 3));
                        }
                        else {
                            var jsonf = JSON.parse(body);
                        }
                    }
                    catch (err) {
                        s.send404IfNotValue(false, 'JSON syntax error');
                        return;
                    }
                    // console.log(jsonf);
                    // projdi ziskane vysledky z BE serveru + uloz do DB unikatni kolekce
                    var fetchedAllready = [];
                    for (var i = 0; i < jsonf.length; i++) {
                        item = jsonf[i];
                        var recId = (item.ean || '#') + '-' + (item.oclc || '#') + '-' + (item.nbn || '#');
                        delete item.permalink;
                        // Pridej do metadata kolekci pokud tam jeste neni.
                        // Kontroluje se protoze v jedinem back-end dotazu se muze vyskytnout stejny zaznam vice krat
                        // pokud se ptame napr. na parametr ISBN a podruhe na OCLC stejneho zaznamu.
                        if (!fetchedAllready[recId]) {
                            var id = new mongo.ObjectID();
                            id = id.toHexString();
                            fetchedAllready[recId] = id;
                            item._id = id;
                            db.collection(metaCollection).insert(item, { w: 1 }, function (err, result) {
                                if (err) {
                                    console.dir(err);
                                }
                            });
                        }
                        else {
                            item._id = fetchedAllready[recId];
                        }
                        if (!item.bibinfo || !fetchaStr.length) {
                            json.push(Helpers.replaceUrl(item));
                        }
                        else {
                            var pos = fetchaStr.indexOf(Helpers.getSortedBibinfo(item.bibinfo));
                            if (pos >= 0) {
                                json[pos] = Helpers.replaceUrl(item, bibinfoOrig[pos]);
                                delete fetchaStr[pos];
                            }
                            else
                                json.push(Helpers.replaceUrl(item));
                        }
                    }
                }
                else {
                    console.log(error);
                    if (error.code === 'ETIMEDOUT') {
                        date = now + timeOutDuration;
                        timeoutCount[sigla]++ || (timeoutCount[sigla] = 1);
                        if (sigla != 'admin')
                            timeoutCount.admin++ || (timeoutCount.admin = 1);
                        console.log('timeout : ' + dateTimeout);
                    }
                }
                if (coverApi) {
                    var item = json[0];
                    var coverUrl = Helpers.getUrlByType(item, query.type);
                    if (s.sendPlaceholderIfNotValue(coverUrl)) {
                        return;
                    }
                    s.cover(s, coverUrl, coverApi, tocThumbApi);
                }
                else if (tocThumbApi) {
                    var item = json[0];
                    var tocThumbnailUrl = Helpers.getUrlByType(item, 'toc_thumbnail');
                    if (s.sendPlaceholderIfNotValue(tocThumbnailUrl)) {
                        return;
                    }
                    //console.log(tocThumbnailUrl);
                    s.cover(s, coverUrl || tocThumbnailUrl, coverApi, tocThumbApi);
                }
                else if (tocPdfApi) {
                    var item = json[0];
                    var tocPdfUrl = item.toc_pdf_url;
                    if (s.sendPlaceholderIfNotValue(tocPdfUrl)) {
                        return;
                    }
                    s.toc(s, tocPdfUrl);
                }
                else {
                    var restmp = JSON.stringify(json, null, query.pretty ? ' ' : '');
                    response.end(restmp);
                }
            });
        }
        else {
            if (coverApi) {
                Statistics.addCoverNotfound(sigla);
                s.sendPlaceholderIfNotValue(false);
            }
            else if (tocThumbApi) {
                Statistics.addTocThumbnailNotfound(sigla);
                s.sendPlaceholderIfNotValue(false);
            }
            else if (tocPdfApi) {
                Statistics.addTocPdfNotfound(sigla);
                s.sendPlaceholderIfNotValue(false);
            }
            else {
                var restmp = JSON.stringify(json, null, query.pretty ? ' ' : '');
                response.end(restmp);
            }
        }
    };
    // Nacteni AUTH metadat podle identifikatoru
    // pyta sa backendu na to co frontend este nema v cache
    // fetcha = identifikatory ktore sa dotazoval katalog v URL, ale v cache niesu
    // json = pole objektov zaznamov, ktore sa uz nasli v cache
    // http://www.obalkyknih.cz/api/auth/meta?auth=[{%22authinfo%22%3A{%22id%22%3A%22jk01083016%22}}]
    Server.prototype.metadataAuth = function (s, fetcha, json, coverApi) {
        var sigla = s.sigla; //zrusit ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        var req = s.req;
        var db = s.db;
        var response = s.response;
        var query = s.query;
        var now = s.now;
        testLog("46", "!!!![metadataAuth] sigla: " + sigla + ", query:" + JSON.stringify(query) + ", now: " + now);
        if ((fetcha.length > 0) && (now > Statistics.dateTimeout)) {
            // poskladani URL dotazu na BE
            var fetch = JSON.stringify(fetcha);
            fetch = encodeURIComponent(fetch);
            var urlAuthMeta = "api/auth/meta";
            var url = 'http://' + urlMain + urlPart + urlAuthMetaBE + urlAuthParams + fetch;
            // console.log('request: ' + url); //debug
            // pole objektu fetcha prevedeno na pole retezcu; bude se parovat na odpoved bibinfo z BE
            var fetchaStr = [];
            var fetchaUri = [];
            if (metaAuthCollection == 'okcz_auth') {
                for (var i = 0; i < fetcha.length; i++) {
                    if (fetcha[i]) {
                        if (fetcha[i].authinfo.auth_id != '') {
                            fetchaStr[i] = JSON.stringify(fetcha[i]);
                            fetchaUri.push(fetcha[i]);
                        }
                    }
                }
            }
            Statistics.addMetaAuthFetches(sigla);
            request({ url: url, timeout: timeout }, function (error, res, body) {
                if (!error) {
                    // console.log(body);
                    try {
                        if (metaAuthCollection == 'okcz_auth') {
                            var jsonf = JSON.parse(body.substring(16, body.length - 3));
                        }
                        else {
                            var jsonf = JSON.parse(body);
                        }
                    }
                    catch (err) {
                        s.send404IfNotValue(false, 'JSON syntax error');
                        return;
                    }
                    // console.log(jsonf);
                    // projdi ziskane vysledky z BE serveru + uloz do DB unikatni kolekce
                    var fetchedAllready = [];
                    for (var i = 0; i < jsonf.length; i++) {
                        item = jsonf[i];
                        var recId = item.auth_id;
                        delete item.permalink;
                        // Pridej do metadata kolekci pokud tam jeste neni.
                        // Kontroluje se protoze v jedinem back-end dotazu se muze vyskytnout stejny zaznam vice krat
                        // pokud se ptame napr. na parametr ISBN a podruhe na OCLC stejneho zaznamu.
                        if (!fetchedAllready[recId]) {
                            var id = new mongo.ObjectID();
                            id = id.toHexString();
                            fetchedAllready[recId] = id;
                            item._id = id;
                            db.collection(metaAuthCollection).insert(item, { w: 1 }, function (err, result) {
                                if (err) {
                                    console.dir(err);
                                }
                            });
                        }
                        else {
                            item._id = fetchedAllready[recId];
                        }
                        if (!item.authinfo || !fetchaStr.length) {
                            json.push(Helpers.replaceUrl(item));
                        }
                        else {
                            var fetchaStrAuthinfo = '{"authinfo":' + JSON.stringify(item.authinfo) + '}';
                            var pos = fetchaStr.indexOf(fetchaStrAuthinfo);
                            if (pos >= 0) {
                                json[pos] = Helpers.replaceUrl(item);
                                delete fetchaStr[pos];
                            }
                            else
                                json.push(Helpers.replaceUrl(item));
                        }
                    }
                }
                else {
                    console.log(error);
                    if (error.code === 'ETIMEDOUT') {
                        date = now + timeOutDuration;
                        timeoutCount[sigla]++ || (timeoutCount[sigla] = 1);
                        if (sigla != 'admin')
                            timeoutCount.admin++ || (timeoutCount.admin = 1);
                        console.log('timeout : ' + dateTimeout);
                    }
                }
                if (coverApi) {
                    var item = json[0];
                    var coverUrl = Helpers.getUrlByType(item, query.type);
                    if (s.sendPlaceholderIfNotValue(coverUrl)) {
                        return;
                    }
                    s.cover(s, coverUrl, coverApi, false, false);
                }
                else {
                    var restmp = JSON.stringify(json, null, query.pretty ? ' ' : '');
                    response.end(restmp);
                }
            });
        }
        else {
            if (coverApi) {
                Statistics.addCoverNotfound(sigla);
                s.sendPlaceholderIfNotValue(false);
            }
            else {
                var restmp = JSON.stringify(json, null, query.pretty ? ' ' : '');
                response.end(restmp);
            }
        }
    };
    // ziskani / stazeni obalky podle url souborove cesty
    Server.prototype.cover = function (s, coverUrl, coverApi, tocThumbApi) {
        var sigla = s.sigla;
        var req = s.req;
        var db = s.db;
        var response = s.response;
        var query = s.query;
        var now = s.now;
        var remoteIP = s.remoteIP;
        var referer = s.referer;
        var timestamp = s.timestamp;
        var etag = s.etag;
        testLog("43", "!!!![metadata] sigla: " + sigla + ", query:" + JSON.stringify(query) + ", now: " + now + ", remoteIP:" + remoteIP + ", referer: " + referer + ", timestamp: " + timestamp + ", etag: " + etag);
        // var coverUrl=requrl.split('?')[0];
        if (query.keywords) {
            var keywords = query.keywords.trim().replace(/\s+|\t+/g, ' ').split(' ');
        }
        else {
            var keywords = [];
        }
        db.collection('cover').findOne({ url: coverUrl }, function (err, item) {
            // typ dokumentu, ktery nacitame (cover, nebo toc nahled)
            var coverType = 'cover';
            if (tocThumbApi || (coverUrl.indexOf(urlTocFile)) > 0)
                coverType = 'toc';
            if ((item !== null) && (!item.notfound)) {
                // nastav etag
                if (coverType == 'cover') {
                    response.setHeader('Etag', item._id);
                    etags[item._id] = null;
                }
                else if (coverType == 'toc') {
                    response.setHeader('Etag', 'toct-' + md5(coverUrl));
                    etags['toct-' + md5(coverUrl)] = null;
                }
                response.writeHead(200, { 'Content-Type': 'image/jpeg' });
                response.end(item.x.buffer);
                db.collection('logs').insert({ sigla: sigla, ip: remoteIP, referer: referer, op: coverUrl, state: 'local', keywords: keywords, timestamp: timestamp }, { w: 0 });
            }
            else if (item && (item.notfound > now)) {
                if (coverApi || tocThumbApi) {
                    s.sendPlaceholderIfNotValue(false);
                }
                else {
                    s.send404IfNotValue(false);
                }
            }
            else if (now > Statistics.dateTimeout) {
                var options = {
                    hostname: urlMain,
                    path: coverUrl
                };
                var request = http.request(options, function (res) {
                    if (!item) {
                        var id = new mongo.ObjectID();
                    }
                    else {
                        var id = item._id;
                    }
                    // zaznac do statistik zadost o stazeni obalkyl; bez ohledu na to, jestli se povede
                    if (coverType == 'cover') {
                        Statistics.addCoverFetches(sigla);
                        etag = id.toHexString();
                    }
                    else if (coverType == 'toc') {
                        Statistics.addTocThumbnailFetches(sigla);
                        etag = 'toct-' + md5(coverUrl);
                    }
                    etags[etag] = null;
                    //console.log('etag set: ' + etag);            
                    response.setHeader('Etag', etag);
                    if (res.statusCode !== 200) {
                        // obalka nebyla stazena; poznac do statistik
                        if (coverType == 'cover') {
                            Statistics.addCoverNotfound(sigla);
                        }
                        else if (coverType == 'toc') {
                            Statistics.addTocThumbnailNotfound(sigla);
                        }
                        // console.log('not found');
                        if (!item) {
                            db.collection('cover').insert({ notfound: now + timeNotfound, _id: id, url: coverUrl }, { w: 1 }, function (err, result) {
                                if (err) {
                                    console.dir(err);
                                }
                            });
                        }
                        else {
                            db.collection('cover').update({ _id: id }, { notfound: now + timeNotfound, url: coverUrl }, { w: 1 }, function (err, result) {
                                if (err) {
                                    console.dir(err);
                                }
                            });
                        }
                        if (coverApi || tocThumbApi) {
                            s.sendPlaceholderIfNotValue(false);
                        }
                        else {
                            s.send404IfNotValue(false);
                        }
                        return;
                    }
                    response.writeHead(200, { 'Content-Type': 'image/jpeg' });
                    //var cover='';
                    var data = [];
                    res.on('error', function (e) {
                        console.log(e);
                    });
                    res.on('data', function (chunk) {
                        // console.log('chunk');
                        // console.log(chunk);              
                        //cover=cover + chunk
                        data.push(chunk);
                        response.write(chunk);
                    }); //.pipe(response);
                    res.on('end', function () {
                        response.end();
                        // console.log('end');
                        var cover = new Buffer(data.reduce(function (prev, current) {
                            return prev.concat(Array.prototype.slice.call(current));
                        }, []));
                        // console.log(cover);
                        //response.end(cover);
                        // console.log(cover.length);
                        var binary = new mongo.Binary(cover);
                        // console.log(binary.length());
                        db.collection('cover').insert({ x: binary, _id: id, url: coverUrl }, { w: 1 }, function (err, result) {
                            if (err) {
                                console.dir(err);
                            }
                        });
                        db.collection('logs').insert({ sigla: sigla, ip: remoteIP, referer: referer, op: coverUrl, state: 'fetch', keywords: keywords, timestamp: timestamp }, { w: 0 });
                    });
                });
                request.setTimeout(timeout, function () {
                    Statistics.dateTimeout = new Date().getTime() + timeOutDuration;
                    Statistics.addTimeoutCount(sigla);
                    console.log('timeout : ' + Statistics.dateTimeout);
                    request.abort();
                    response.end();
                });
                request.on('error', function (err) {
                    if (err.code === "ECONNRESET") {
                        console.log("Timeout occurs");
                    }
                });
                request.end();
            }
            else {
                // console.log('cover404');
                if (coverApi || tocThumbApi) {
                    s.sendPlaceholderIfNotValue(false);
                }
                else {
                    s.send404IfNotValue(false);
                }
            }
        });
    };
    // poskytnuti souboru s TOC
    Server.prototype.toc = function (s, reqUrl) {
        var sigla = s.sigla;
        var req = s.req;
        var db = s.db;
        var response = s.response;
        var remoteIP = s.remoteIP;
        var referer = s.referer;
        var timestamp = s.timestamp;
        testLog("43", "!!!![metadata] sigla: " + sigla + ", req: " + req + ", db: " + db + ", response: " + response + ", remoteIP:" + remoteIP + ", referer: " + referer + ", timestamp: " + timestamp);
        reqUrl = reqUrl.replace('http://' + urlMain, '');
        var tocPdfUrlSegments = reqUrl.split('/');
        var tocFileName = tocPdfUrlSegments[tocPdfUrlSegments.length - 2];
        var tocExtension = tocPdfUrlSegments[tocPdfUrlSegments.length - 1];
        if (!tocFileName) {
            s.send404IfNotValue(false);
        }
        var mimeType = 'application/' + (tocExtension || 'pdf');
        var tocFileEncapDir = Math.ceil((parseInt(tocFileName) + 1) / 10000) * 10000;
        var tocFilePath = tocFileDir + tocFileEncapDir + '/' + tocFileName + '.' + (tocExtension || 'pdf');
        fileSystem.exists(tocFilePath, function (exists) {
            if (exists) {
                var tocFileStat = fileSystem.statSync(tocFilePath);
                console.log('toc ' + tocExtension + ': ' + tocFilePath);
                response.writeHead(200, {
                    'Content-Type': mimeType,
                    'Content-Length': tocFileStat.size,
                    'Etag': 'tocp-' + md5(tocFilePath)
                });
                etags['tocp-' + md5(tocFilePath)] = null;
                var readStream = fileSystem.createReadStream(tocFilePath);
                readStream.pipe(response);
                db.collection('logs').insert({ sigla: sigla, ip: remoteIP, referer: referer, op: urlTocFile + '/' + tocFileName + uriPartTocPdf, state: 'local', keywords: [], timestamp: timestamp }, { w: 0 });
            }
            else {
                Statistics.addTocPdfNotfound(sigla);
                s.send404IfNotValue(false);
            }
        });
    };
    /* VLASTNE -------------------------------------------------------------------------------------------------- */
    Server.prototype.isRequestValid = function (sigla, validate_sigla, validate_parameters, validate_query_book_id_AND_query_id, validate_query_id) {
        if (validate_parameters === void 0) { validate_parameters = false; }
        if (validate_query_book_id_AND_query_id === void 0) { validate_query_book_id_AND_query_id = false; }
        if (validate_query_id === void 0) { validate_query_id = false; }
        if (validate_sigla && !sigla) {
            this.send404IfNotValue(false, 'Unknown referer. You need to sign up at http://www.obalkyknih.cz and provide your catalog URL');
            return false;
        }
        if (validate_parameters && !this.query.isbn && !this.query.nbn && !this.query.oclc && !this.query.ean && !this.query.multi && !this.query.auth_id && !this.query.uuid) {
            console.log('Param missing');
            this.send404IfNotValue(false);
            return false;
        }
        if (validate_query_book_id_AND_query_id && (!sigla || !this.query.book_id || !this.query.id)) {
            console.log('add review denied ' + this.remoteIP);
            this.send404IfNotValue(false, 'Add review denied' + (!this.query.book_id ? ' (book_id missing)' : '') + (!this.query.id ? ' (ID param missing)' : ''));
            return false;
        }
        if (validate_query_id && (!sigla || !this.query.id)) {
            console.log('del review denied ' + this.remoteIP);
            this.send404IfNotValue(false, 'Del review denied' + (!this.query.id ? ' (id missing)' : ''));
            return false;
        }
        return true;
    };
    Server.prototype.getResult = function () {
        // use ean as isbn
        if (this.query.ean) {
            this.query.isbn = this.query.ean;
            delete this.query.ean;
        }
        // parse params
        if (this.query.isbn) {
            var isbn = this.query.isbn.split(' ')[0];
            var value = toEan(isbn);
            // console.log('toEan: ' + value);
            var sel = { ean: value };
            var bib = { isbn: value };
            return (!value) ? undefined : { bib: bib, sel: sel };
        }
        else if (this.query.nbn) {
            var value = this.query.nbn;
            var sel = bib = { nbn: value };
            return (!value) ? undefined : { bib: bib, sel: sel };
        }
        else if (this.query.oclc) {
            var value = this.query.oclc;
            var sel = bib = { oclc: value };
            return (!value) ? undefined : { bib: bib, sel: sel };
        }
        else if (this.query.multi) {
            var bib = {};
            var sel = { $or: [] };
            try {
                this.query.multi = decodeURIComponent(this.query.multi);
                var multis = JSON.parse(decodeURIComponent(this.query.multi));
            }
            catch (err) {
                this.response.writeHead(404);
                this.response.end('Check query syntax');
                return;
            }
            if (multis.isbn) {
                var isbn = multis.isbn.split(' ')[0];
                var value = toEan(isbn);
                sel.$or.push({ ean: value });
                bib.isbn = value;
            }
            if (multis.oclc) {
                sel.$or.push({ oclc: multis.oclc });
                bib.oclc = multis.oclc;
            }
            if (multis.nbn) {
                sel.$or.push({ nbn: multis.nbn });
                bib.nbn = multis.nbn;
            }
            // parsovani identifikatoru vicesvazkoveho dila a periodika (parse_note se pouziva pokud knihovni system nema data rok/rocnik/cislo/cislo casti/nazev casti oddelene)
            if (multis.part_note) {
                var parts = partParser.parse(multis.part_note);
                if (parts.year)
                    multis.part_year = parts.year;
                if (parts.volume)
                    multis.part_volume = parts.volume;
                if (parts.part)
                    multis.part_no = parts.part;
                if (parts.part && !parts.year && !parts.volume)
                    multis.part_name = parts.part;
            }
            if (Helpers.partValidation(multis)) {
                // normalizace
                if (multis.part_year)
                    multis.part_year = partParser.normalizeYear(multis.part_year);
                if (multis.part_volume)
                    multis.part_volume = partParser.normalizeVolume(multis.part_volume);
                if (multis.part_no)
                    multis.part_no = partParser.normalizePart(multis.part_no);
                if (multis.part_name)
                    multis.part_name = partParser.normalizePart(multis.part_name);
                // normalizace spatne zduplikovaneho roku, rocniku, nebo cisla v pozadavku
                if (multis.part_year && multis.part_volume && multis.part_year == multis.part_volume) {
                    if (multis.part_year.length == 4)
                        delete multis.part_volume;
                    else
                        delete multis.part_year;
                }
                if (multis.part_year && multis.part_no && multis.part_year == multis.no) {
                    if (multis.part_year.length == 4)
                        delete multis.part_no;
                }
                // dotaz na periodikum
                if (multis.part_year || multis.part_volume) {
                    if (multis.part_year) {
                        bib.part_year = multis.part_year;
                    }
                    if (multis.part_volume) {
                        bib.part_volume = multis.part_volume;
                    }
                    if (multis.part_no) {
                        bib.part_no = multis.part_no;
                    }
                }
                else if (multis.part_no && multis.part_name) {
                    bib.part_no = multis.part_no;
                    bib.part_name = multis.part_name;
                }
                else if (multis.part_no) {
                    bib.part_no = multis.part_no;
                }
                else if (multis.part_name) {
                    bib.part_name = multis.part_name;
                }
            }
            return (sel.$or.length <= 0) ? undefined : { bib: bib, sel: sel };
        }
        else {
            return undefined;
        }
    };
    //ak posle vrati true, ak neposle vrati false
    Server.prototype.sendPlaceholderIfNotValue = function (value) {
        if (!value) {
            console.log("identifier " + this.requrl);
            this.response.writeHead(200, { 'Content-Type': 'image/gif' });
            this.response.end(Server.placeholder);
            return true;
        }
        else {
            return false;
        }
    };
    //ak posle vrati true, ak neposle vrati false
    Server.prototype.send404IfNotValue = function (value, message) {
        if (message === void 0) { message = undefined; }
        if (!value) {
            this.response.writeHead(404);
            if (message)
                this.response.end(message);
            else
                this.response.end();
            return true;
        }
        else {
            return false;
        }
    };
    Server.prototype.getSortedItemsFromItemsRaw = function (items_raw) {
        /* Serazeni podle part_root */
        var items_root = [], items_common = [], items_root_bare = [], items_common_bare = [];
        for (var i = 0; i < items_raw.length; i++) {
            var tmp_part_root = items_raw[i].part_root || '0';
            var tmp_flag_bare_record = items_raw[i].flag_bare_record || '1';
            // prioritu maji uzitecne casti s part_root = 1
            if (tmp_part_root == '1' && tmp_flag_bare_record == '0')
                items_root.push(items_raw[i]);
            else if (tmp_part_root == '1')
                items_root_bare.push(items_raw[i]);
            else if (tmp_flag_bare_record == '1')
                items_common.push(items_raw[i]);
            else
                items_common_bare.push(items_raw[i]);
        }
        return items_root.concat(items_root_bare).concat(items_common).concat(items_common_bare);
    };
    Server.prototype.getItemInfoFromItem = function (item) {
        var itemInfo = {};
        itemInfo.item = item;
        itemInfo.ean = item.ean;
        itemInfo.nbn = item.nbn;
        itemInfo.oclc = item.oclc;
        itemInfo.uuid = item.uuid;
        itemInfo.part_year = item.part_year;
        itemInfo.part_volume = item.part_volume;
        itemInfo.part_no = item.part_no;
        itemInfo.part_name = item.part_name;
        itemInfo.part_root = item.part_root || '0';
        itemInfo.part_ean_standalone = item.part_ean_standalone || '0';
        itemInfo.part_nbn_standalone = item.part_nbn_standalone || '0';
        itemInfo.part_oclc_standalone = item.part_oclc_standalone || '0';
        return itemInfo;
    };
    Server.prototype.isGoodItemInfoForBibInfo = function (itemInfo, bibinfo) {
        return (
        // periodikum podle roku a cisla
        (itemInfo.part_year && itemInfo.part_no && bibinfo.part_year && bibinfo.part_no && itemInfo.part_year == bibinfo.part_year && itemInfo.part_no == bibinfo.part_no) ||
            // periodikum podle rocniku a cisla
            (itemInfo.part_volume && itemInfo.part_no && bibinfo.part_volume && bibinfo.part_no && itemInfo.part_volume == bibinfo.part_volume && itemInfo.part_no == bibinfo.part_no) ||
            // periodikum podle roku a rocniku
            ((itemInfo.part_year || itemInfo.part_volume) && !itemInfo.part_no && (bibinfo.part_year || bibinfo.part_volume) && ((itemInfo.part_year == bibinfo.part_year && itemInfo.part_year) || (itemInfo.part_volume == bibinfo.part_volume && itemInfo.part_volume))) ||
            // monografie podle cisla casti
            (itemInfo.part_no && bibinfo.part_no && !bibinfo.part_year && !bibinfo.part_volume && itemInfo.part_no == bibinfo.part_no) ||
            // monografie podle nazvu casti
            (itemInfo.part_name && bibinfo.part_name && !bibinfo.part_year && !bibinfo.part_volume && itemInfo.part_name == bibinfo.part_name) ||
            // souborny zaznam, nebo cast monografie bez dotazu na konkretni cast
            (!bibinfo.part_no && !bibinfo.part_name && !bibinfo.part_year && !bibinfo.part_volume) ||
            // souborny zaznam, s dotazem na cast monografie bez dotazu na konkretni cast
            (!bibinfo.part_year && !bibinfo.part_volume && !itemInfo.part_no && !itemInfo.part_name));
    };
    Server.prototype.itemFound = function (itemInfo, bibinfo, j) {
        if (j == 0 && bibinfo.isbn) {
            // ISBN
            var isbnBib = bibinfo.isbn.split(' ')[0];
            var isbnBib = toEan(isbnBib);
            if (!isbnBib || !itemInfo.ean)
                return false;
            if (isbnBib != itemInfo.ean)
                return false;
            if (itemInfo.part_root == '0' && itemInfo.part_ean_standalone == '0' && !(bibinfo.part_no || bibinfo.part_name || bibinfo.part_year || bibinfo.part_volume))
                return false;
            return true;
        }
        else if (j == 1 && bibinfo.nbn) {
            // NBN
            if (!bibinfo.nbn || !itemInfo.nbn)
                return false;
            if (bibinfo.nbn != itemInfo.nbn)
                return false;
            if (itemInfo.part_root == '0' && itemInfo.part_nbn_standalone == '0' && !(bibinfo.part_no || bibinfo.part_name || bibinfo.part_year || bibinfo.part_volume))
                return false;
            return true;
        }
        else if (j == 2 && bibinfo.oclc) {
            // OCLC
            if (!bibinfo.oclc || !itemInfo.oclc)
                return false;
            if (bibinfo.oclc != itemInfo.oclc)
                return false;
            if (itemInfo.part_root == '0' && itemInfo.part_oclc_standalone == '0' && !(bibinfo.part_no || bibinfo.part_name || bibinfo.part_year || bibinfo.part_volume))
                return false;
            return true;
        }
        else if (j == 3 && bibinfo.uuid) {
            // UUID
            if (!bibinfo.uuid.length || !itemInfo.uuid)
                return false;
            return (itemInfo.uuid.indexOf(bibinfo.uuid) > -1) ? true : false;
        }
    };
    Server.prototype.syncPushApi = function (collection, rec, ids) {
        if (!rec && !ids) {
            console.log("Empty record");
            return;
        }
        var records = [];
        var all_settings = PushSettings.getSettings();
        for (var s in all_settings) {
            var settings = all_settings[s];
            if (settings.full_container && rec) {
                records.push({ sigla: settings.sigla, rec: rec, retry_count: 0, retry_date: new Date().toISOString() });
            }
            if (!settings.full_container && ids) {
                records.push({ sigla: settings.sigla, rec: ids, retry_count: 0, retry_date: new Date().toISOString() });
            }
        }
        if (records.length > 0) {
            collection.insert(records, function (err, result) {
                if (err) {
                    console.dir(err);
                }
            });
        }
    };
    Server.placeholderData = [
        0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x21, 0xF9, 0x04, 0x01, 0x0A, 0x00, 0x01, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x02, 0x4C, 0x01, 0x00, 0x3B
    ];
    Server.placeholder = new Buffer(Server.placeholderData);
    return Server;
}());
module.exports = {
    server: server,
    getPerms: Permissions.getPerms,
    getPushSettings: PushSettings.getPushSettings
};
function testLog(color, message) {
    console.log('\x1b[' + color + 'm', message, '\x1b[0m');
}
