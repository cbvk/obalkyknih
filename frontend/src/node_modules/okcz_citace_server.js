// =========================================
// API CITACE OKCZ v1
// =========================================
// url na backend
var urlMain = "www.obalkyknih.cz";
//var urlMain: string = "10.89.56.102"
var urlPart = "/";
var urlApiCitace = "api/citace";
var uriAlive = "api/runtime/alive";
// timeout dotazu na backend (ms)
var timeout = 5 * 1000;
// max age of citation to be considered outdated
var maxDays = 7;
// citations are sent in blocks
var citationBlockSize = 5;
// =========================================
var net = require('net');
var request = require('request');
var URL_lib = require('url');
var fileSystem = require('fs');
var http = require('http');
var qs = require('querystring');
var md5 = require('MD5');
var mongodb = require('mongodb');
var partParser = require('book-part-parser');
var Entities = require('html-entities').AllHtmlEntities;
var entities = new Entities();
//var Buffer = require('buffer/').Buffer;
var regexpSigla = new RegExp(/^[A-Z0-9]{6}$/);
var etags = {}; // obsahuje vsechny platne etag pro cache prohlizec
var metaCollection = 'citace';
var backendCollection = 'be_sync_citace';
var libraries = {}; // key - sigla, value - IP
var z3950InitBuffer = new Buffer([0xb4, 0x4e, 0x83, 0x02, 0x00, 0xe0, 0x84, 0x04, 0x00, 0xe9, 0xa2, 0x40, 0x85, 0x03, 0x10, 0x00, 0x00, 0x86, 0x03, 0x10, 0x00, 0x00, 0x9f, 0x6e, 0x02, 0x38, 0x31, 0x9f, 0x6f, 0x03, 0x59, 0x41, 0x5a, 0x9f, 0x70, 0x14, 0x33, 0x2e, 0x30, 0x2e, 0x31, 0x38, 0x20, 0x57, 0x49, 0x4e, 0x33, 0x32, 0x20, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xbf, 0x81, 0x49, 0x14, 0x30, 0x12, 0xa4, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x13, 0x0f, 0x03, 0xa0, 0x05, 0xa1, 0x03, 0x83, 0x01, 0x00]);
var z3950ShowReqBuffer = new Buffer([0xb8, 0x14, 0x9f, 0x1f, 0x01, 0x31, 0x9e, 0x01, 0x01, 0x9d, 0x01, 0x01, 0x9f, 0x68, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x13, 0x05, 0x0a]);
var subtagDelimiter = new Buffer([0x1f]);
// =========================================
var server = function (req, response, db) {
    var a;
    a = new Server(req, response, db);
    a.go(a);
};
var Server = (function () {
    function Server(req, response, db) {
        this.requrl = req.url;
        testLog("92", "Request url:" + this.requrl);
        this.query = URL_lib.parse(this.requrl, true).query;
        this.date = new Date();
        this.timestamp = this.date.toISOString();
        this.now = this.date.getTime();
        this.etag = req.headers['if-none-match'] || req.headers['Etag'];
        this.referer = req.headers['referer'];
        this.remoteIP = req.connection.remoteAddress;
        this.req = req;
        this.response = response;
        this.response.setHeader("Access-Control-Allow-Origin", "*");
        this.sigla = Permissions.refererValid(this.referer, this.remoteIP, this.query.sigla || null);
        this.db = db;
    }
    Server.prototype.go = function (s) {
        /**
         * OD BACKENDU
         **/
        if (this.requrl === '/citace') {
            //doplnit application/json format!
            if (s.req.method == 'POST') {
                var body = '';
                s.req.on('data', function (data) {
                    body += data;
                });
                s.req.on('end', function () {
                    var json = JSON.parse(body);
                    var marc = new Marc(false);
                    marc.Fields = json.Fields;
                    marc.Type = json.Type;
                    marc.Sysno = json.Sysno;
                    marc.Sigla = json.Sigla;
                    s.sendCitationMarc(s, marc);
                });
            }
        }
        else if (etags[this.etag] !== undefined) {
            testLog("43", "[ETAG MATCH]");
            var sigla = Permissions.refererValid(this.referer, this.remoteIP, this.query.sigla || null);
            var etagPrefix = this.etag.substring(0, 4);
            Statistics.addEtagStatisticByEtagPrefix(etagPrefix, sigla);
            this.response.statusCode = 304;
            this.response.end();
        }
        else if (this.requrl === '/favicon.ico') {
            var sigla = Permissions.refererValid(this.referer, this.remoteIP, this.query.sigla || null);
            testLog("41", "[STATICKE SUBORY] Sigla:" + sigla);
            if (!this.isRequestValid(sigla, true)) {
                return;
            }
            Statistics.addFileRequests(sigla);
            testLog("41", "-> fileRequests[sigla]:" + Statistics.fileRequests[sigla]);
            if (this.requrl.substring(this.requrl.length - 4) === '.ico')
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl), 'Content-Type': 'image/x-icon' });
            if (this.requrl.substring(this.requrl.length - 2) === '.js')
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl), 'Content-Type': 'text/javascript' });
            else
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl) });
            etags['file-' + md5(this.requrl)] = null;
            var readStream = fileSystem.createReadStream('static' + this.requrl);
            readStream.pipe(this.response);
        }
        else if ((this.requrl.indexOf(urlApiCitace)) > 0) {
            var sigla = Permissions.refererValid(this.referer, this.remoteIP, this.query.sigla || null);
            testLog("41", "[API CITACE] Sigla:" + sigla);
            if (!this.isRequestValid(sigla, true)) {
                console.log('[API CITACE] Sigla not valid: ' + sigla);
                return;
            }
            libraries[sigla] = this.remoteIP;
            Statistics.addCitaceRequests(sigla);
            /*var rec = s.getOaiRecord(s, s.query.sysno);
            var out = s.renderCSNISO690(s, rec);

            s.response.writeHead(200);
            s.response.end(out);*/
            s.sendCitationSys(s);
        }
        else if (this.query.stats === 'true') {
            var sigla = Permissions.ipValid(this.remoteIP, this.query.sigla);
            if (!sigla && (this.remoteIP === '127.0.0.1' || this.remoteIP === '::1' || this.remoteIP === '::ffff:127.0.0.1'))
                sigla = 'admin';
            if (sigla) {
                Statistics.getStatisticsBySigla(this, sigla);
            }
            else {
                this.send404IfNotValue(false, 'Access denied ' + this.remoteIP);
            }
        }
        else if (this.query.permreload === 'true') {
            Permissions.reloadPerms(this);
        }
        else if (this.query.permcreate === 'true' && this.query.sigla) {
            Permissions.addPerm(this);
        }
        else if (this.query.settings_citace_create === 'true' && this.query.sigla) {
            CitaceSettings.addSettings(this.query, this.db.collection('settings_citace'));
        }
        else if (this.query.settings_citace_modify === 'true' && this.query.sigla) {
            CitaceSettings.modifySettings(this.query, this.db.collection('settings_citace'));
        }
        else if (this.query.settings_citace_remove === 'true' && this.query.sigla) {
            CitaceSettings.removeSettings(this.query.sigla, this.db.collection('settings_citace'));
        }
        else if ((this.requrl.indexOf(uriAlive)) > 0) {
            this.response.writeHead(200);
            this.response.end('ALIVE');
        }
        else {
            console.log("wrong query");
            this.send404IfNotValue(false);
        }
    };
    Server.prototype.getOaiRecord = function (s, sysno) {
        var now = s.now;
        testLog("43", "!!!![getOaiRecord] sysno: " + sysno + " now: " + now);
        var rec = {
            sysno: sysno,
            marc21: 'vysledok'
        };
        return rec;
    };
    Server.prototype.getMarcRecord = function (s, citace_Settings) {
        var sysno = s.query.sysno;
        var sigla = Permissions.refererValid(s.referer, s.remoteIP, this.query.sigla || null);
        if (!this.isRequestValid(sigla, true)) {
            return;
        }
        testLog("43", "#1 sigla:" + sigla); //todo
        var now = s.now;
        if (s.query.url) {
          var url = s.query.url.replace("##sysno##", sysno);
        } else {
          var url = citace_Settings.url.replace("##sysno##", sysno);
        }
        console.log(url);
        var timeout = 1000 * 15;
        testLog("43", "!!!![getMarcRecord] now: " + now + " response: ");
        request({ url: url, timeout: timeout, strictSSL: false }, function (error, res, body) {
            if (!error) {
                var isEmpty = !/<marc:record/.test(body);
                var marc = new Marc(isEmpty);
                if (!isEmpty) {
                    var typeRegExp = new RegExp('<marc:leader>.{6}(.{2})');
                    var typeMatch = typeRegExp.exec(body);
                    marc.Type = typeMatch[1];
                    var fieldMatch = null;
                    var fieldRegExp = new RegExp('<marc:datafield tag="(.*?)" ind1="(.*?)" ind2="(.*?)">([^]*?)<\/marc:datafield>', 'g');
                    while (fieldMatch = fieldRegExp.exec(body)) {
                        var tag = Number(fieldMatch[1]);
                        var ind1 = fieldMatch[2];
                        var ind2 = fieldMatch[3];
                        var subtag = fieldMatch[4];
                        var field = new Field();
                        field.Ind1 = ind1;
                        field.Ind2 = ind2;
                        var subtags = field.Subtags;
                        var subfieldMatch = null;
                        var subfieldRegExp = new RegExp('<marc:subfield code="(.*?)">(.*?)<\/marc:subfield>', 'g');
                        while (subfieldMatch = subfieldRegExp.exec(fieldMatch[4])) {
                            var code = subfieldMatch[1];
                            var value = subfieldMatch[2];
                            if (!subtags[code]) {
                                subtags[code] = [];
                            }
                            subtags[code].push(value);
                        }
                        if (!marc.Fields[tag]) {
                            marc.Fields[tag] = [];
                        }
                        marc.Fields[tag].push(field);
                    }
                }
                s.sendCitationMarc(s, marc);
            }
            else {
                console.dir(error);
            }
        });
    };
    Server.prototype.getZ3950MarcRecord = function (s, citace_Settings) {
        var sysno = s.query.sysno;
        var sigla = Permissions.refererValid(s.referer, s.remoteIP, this.query.sigla || null);
        if (!this.isRequestValid(sigla, true)) {
            return;
        }
        var db = citace_Settings.database, idx = citace_Settings.index_sysno, serverAddr = citace_Settings.url, serverPort = citace_Settings.port;
        var now = s.now;
        var timeout = 1000 * 15;
        testLog("43", "!!!![getZ3950MarcRecord] now: " + now + " response: ");
        // seskladani bajtu vyhledavaciho dotazu od konce na zacatek
        // vyhledavaci fraze
        var valBuff = Buffer.alloc(sysno.length + 1);
        valBuff[0] = sysno.length;
        valBuff.write(sysno, 1);
        // vyhledavaci index
        var idxDec = parseInt(idx);
        var idxLen = idxDec > 255 ? 2 : 1;
        var idxBuff = Buffer.alloc(idxLen + 3);
        idxBuff[0] = idxLen;
        idxBuff.writeUIntBE(idxDec, 1, idxLen);
        idxBuff.writeUIntBE(0x9f2d, idxLen + 1, 2);
        // zbytek vyhledavaciho dotazu az po zacatek
        var queryLen = idxBuff.length + valBuff.length + 27;
        var queryBuff = Buffer.alloc(28);
        queryBuff[0] = queryLen;
        queryBuff[1] = 0xa1;
        queryBuff[2] = queryLen - 2;
        queryBuff.writeUIntBE(0x06072a8648ce, 3, 6);
        queryBuff.writeUIntBE(0x130301a0, 9, 4);
        queryBuff[13] = idxBuff.length + valBuff.length + 14;
        queryBuff.writeUIntBE(0xbf66, 14, 2);
        queryBuff[16] = idxBuff.length + valBuff.length + 11;
        queryBuff.writeUIntBE(0xbf2c, 17, 2);
        queryBuff[19] = idxBuff.length + 6;
        queryBuff[20] = 0x30;
        queryBuff[21] = idxBuff.length + 4;
        queryBuff.writeUIntBE(0x9f7801019f79, 22, 6);
        var queryTotalLen = queryLen + db.length + 22;
        var dbBuff = Buffer.alloc(db.length + 23);
        dbBuff[0] = 0xb6;
        dbBuff[1] = queryTotalLen;
        dbBuff.writeUIntBE(0x8d01008e0101, 2, 6);
        dbBuff.writeUIntBE(0x8f0100900101, 8, 6);
        dbBuff.writeUIntBE(0x910131b2, 14, 4);
        dbBuff[18] = db.length + 3;
        dbBuff.writeUIntBE(0x9f69, 19, 2);
        dbBuff[21] = db.length;
        dbBuff.write(db, 22);
        dbBuff[db.length + 22] = 0xb5;
        var searchQuery = Buffer.concat([dbBuff, queryBuff, idxBuff, valBuff], queryTotalLen + 2);
        var z3950Client = new net.Socket();
        z3950Client.connect(serverPort, serverAddr, function (error) {
            //console.log('[ Z39.50 Connected ]');
            z3950Client.write(z3950InitBuffer); // Z39.50 INIT request
        });
        z3950Client.on('error', function (error) {
            console.log(error);
            s.send404IfNotValue(false);
        });
        z3950Client.setTimeout(timeout, function () {
            console.log('Z39.50 timeout');
            s.send404IfNotValue(false);
        });
        var responseCnt = 0; // pocitadlo interakci = odpovedi ze serveru
        z3950Client.on('data', function (data) {
            responseCnt++;
            //console.log("\n" + '<Received, ' + responseCnt + 'x>');
            //console.log(data.toString());
            //console.log(data.toString('hex'));
            switch (responseCnt) {
                case 1:
                    z3950Client.write(searchQuery);
                    break; // Z39.50 FIND request
                case 2:
                    z3950Client.write(z3950ShowReqBuffer);
                    break; // Z39.50 SHOW request
                case 3:
                    z3950Client.destroy(); // data dorazila, parsujeme
                    // nalezneme prvni dva identifikatory zacatku tagu
                    // * podle zacatku prvniho tagu zjistime kde zacinaju data
                    // * podle velikosti prvniho tagu (vyskyt druheho minus vyskyt prvniho) nalezneme kde se nachazi
                    //   prvni popis tagu. napr pokud ma T001 tag delku 8 hledame 001000800000 = 001 tag, 0008 delka, 00000 pozice
                    var posTag1 = data.indexOf(0x1e);
                    var posTag2 = data.indexOf(0x1e, posTag1 + 1);
                    var marcRec = data.slice(posTag1, data.length);
                    //console.log(marcRec.toString());
                    var fieldMapT001 = '001' + String('000' + (posTag2 - posTag1).toString()).slice(-4) + '00000';
                    var fieldMapStart = data.indexOf(fieldMapT001);
                    var marcFieldsDef = data.slice(fieldMapStart, posTag1);
                    var marcFieldsDefLen = marcFieldsDef.length;
                    // strunktura pro ulozeni marc zaznamu obsahuje typ zaznamu a biblio uroven (leader 6. a 7. znak)
                    var marc = new Marc(marcFieldsDefLen == 0);
                    var docTypePos = parseInt(data.slice(16, 17).toString('hex', 0, 8), 16) + 42;
                    marc.Type = data.slice(docTypePos, docTypePos + 2).toString();
                    // pro vsechny tagy
                    for (var i = 0; i <= marcFieldsDefLen; i = i + 12) {
                        var tagDef = marcFieldsDef.slice(i, i + 12);
                        var tagLength = parseInt(tagDef.slice(3, 7));
                        var tagStart = parseInt(tagDef.slice(7, 12));
                        var tag = marcRec.slice(tagStart + 1, tagStart + tagLength);
                        var tagStr = tag.toString();
                        var tagCode = tagDef.slice(0, 3);
                        var subtagPos = tag.indexOf(subtagDelimiter);
                        if (subtagPos !== -1) {
                            var field = new Field();
                            field.Ind1 = tagStr.substring(0, 1);
                            field.Ind2 = tagStr.substring(1, 2);
                            var subtags = field.Subtags;
                            // pro vsechny subtagy
                            while (subtagPos < tagLength) {
                                var nextSubtagPos = tag.indexOf(subtagDelimiter, subtagPos + 1);
                                if (nextSubtagPos === -1)
                                    nextSubtagPos = tagLength;
                                var subTag = tag.slice(subtagPos, nextSubtagPos).toString();
                                var subTagCode = subTag.substring(1, 2);
                                var subTagVal = subTag.substring(2, nextSubtagPos);
                                if (!subtags[subTagCode]) {
                                    subtags[subTagCode] = [];
                                }
                                subtags[subTagCode].push(subTagVal);
                                // posunout se dal
                                subtagPos = nextSubtagPos;
                            }
                            if (!marc.Fields[tagCode]) {
                                marc.Fields[tagCode] = [];
                            }
                            marc.Fields[tagCode].push(field);
                        }
                    }
                    s.sendCitationMarc(s, marc);
            }
        });
    };
    Server.prototype.sendCitationMarc = function (s, marc) {
        s.sendCitation(s, null, marc);
    };
    Server.prototype.sendCitationSys = function (s) {
        s.sendCitation(s, null, null);
    };
    Server.prototype.sendCitationBib = function (s, bibliography) {
        s.sendCitation(s, bibliography, null);
    };
    Server.prototype.sendCitation = function (s, bibliography, marc) {
        var sigla = s.sigla;
        var sysno = s.query.sysno;
        var collection = s.db.collection(metaCollection);
        var uniqueKey = { sigla: sigla, sysno: sysno };
        collection.find(uniqueKey).toArray(function (err, items) {
            var exists = !err && items.length > 0;
            var citation;
            exists = false; //debug
            if (!exists) {
                citation = createCitation(s, bibliography, marc);
                // citation must be retrieved and send from asynchronous call, handled in other function
                if (!citation) {
                    return;
                }
                if (citation.text != "") {
                    collection.insert(citation);
                    s.createBackendCitation(s, citation);
                }
            }
            else {
                if (items.length != 1) {
                    return console.dir("Multiple results found in mongo! ");
                }
                citation = items[0];
                var currentDate = new Date();
                //update if old
                if (currentDate.getTime() - citation.date.getTime() >= maxDays * 864000000) {
                    citation = createCitation(s, bibliography, marc);
                    if (!citation) {
                        return;
                    }
                    if (citation.text != "") {
                        collection.update(uniqueKey, citation);
                        s.createBackendCitation(s, citation);
                    }
                }
            }
            s.response.writeHead(200, 'OK', { 'Content-Type': 'text/plain; charset=utf-8' });
            s.response.write(citation.text);
            s.response.end();
        });
    };
    Server.prototype.retrieveCitation = function (bibliography) {
        var json = JSON.parse(bibliography);
        var title = json['title'];
        var datumPublikacie = json['date'];
        var mistoPublikacie = json['pub_place'];
        var identifikator = json['id'];
        var subname = json['title_sub'];
        var name = json['name'];
        var vydavatelstvo = json['label'];
        var vedlejsinazev;
        if (subname && title.slice(-1) == ':') {
            title = title.slice(0, -2);
        }
        else {
            subname = '';
        }
        var text = name + '. ' + title + (subname ? ': ' + subname : '') + '. ' + mistoPublikacie + ': ' + vydavatelstvo + ', ' + datumPublikacie + '. ' + identifikator;
        return text;
    };
    Server.prototype.createBackendCitation = function (s, citation) {
        var becollection = s.db.collection(backendCollection);
        var post_data_db = { citation: citation.text, sysno: s.query.sysno };
        becollection.insert({ timestamp: this.timestamp, flag_synced: 0, retry_count: 0, retry_date: this.timestamp, post_data: post_data_db, uri: 'api/add_citation' });
    };
    Server.prototype.renderCSNISO690 = function (s, rec) {
        var now = s.now;
        testLog("43", "!!!![renderCSNISO690] sysno: " + rec.sysno + " now: " + now);
        return rec.marc21;
    };
    Server.prototype.isRequestValid = function (sigla, validate_sigla, validate_parameters) {
        if (validate_parameters === void 0) { validate_parameters = false; }
        if (validate_sigla && !sigla) {
            this.send404IfNotValue(false, 'Unknown referer. You need to sign up at http://www.obalkyknih.cz and provide your catalog URL');
            return false;
        }
        if (validate_parameters && !this.query.sysno) {
            console.log('Param missing');
            this.send404IfNotValue(false);
            return false;
        }
        return true;
    };
    //ak posle vrati true, ak neposle vrati false
    Server.prototype.send404IfNotValue = function (value, message) {
        if (message === void 0) { message = undefined; }
        if (!value) {
            this.response.writeHead(404);
            if (message)
                this.response.end(message);
            else
                this.response.end();
            return true;
        }
        else {
            return false;
        }
    };
    Server.prototype.isRequestValid = function (sigla, validate_sigla) {
        if (validate_sigla && !sigla) {
            this.send404IfNotValue(false, 'Unknown referer. You need to sign up at http://www.obalkyknih.cz and provide your catalog URL');
            return false;
        }
        return true;
    };
    return Server;
}());
var Type;
(function (Type) {
    Type[Type["MARCXML"] = 0] = "MARCXML";
    Type[Type["Z3950"] = 1] = "Z3950";
})(Type || (Type = {}));
var Citace = (function () {
    function Citace(settings) {
        this.sigla = settings.sigla;
        this.url = settings.url;
        this.type = settings.type === 'z3950' ? Type.Z3950 : Type.MARCXML;
        if (this.type === Type.Z3950) {
            this.port = settings.port;
            this.database = settings.database;
            this.encoding = settings.encoding;
            this.name = settings.name;
            this.password = settings.password;
            this.index_sysno = settings.index_sysno;
        }
    }
    Citace.prototype.getDbString = function () {
        var _type = this.type === Type.MARCXML ? 'marcxml' : 'z3950';
        if (this.type === Type.Z3950) {
            return { name: this.name, port: this.port, sigla: this.sigla, password: this.password, database: this.database, index_sysno: this.index_sysno, url: this.url, type: _type, encoding: this.encoding };
        }
        else {
            return { sigla: this.sigla, url: this.url, type: _type };
        }
    };
    return Citace;
}());
/**
 * NASTAVENI CITACI
 **/
var CitaceSettings = (function () {
    function CitaceSettings() {
    }
    CitaceSettings.removeSettings = function (sigla, collection) {
        if (CitaceSettings.settings[sigla]) {
            delete CitaceSettings.settings[sigla];
            collection.remove({ sigla: sigla });
        }
    };
    CitaceSettings.modifySettings = function (settings, collection) {
        var s = CitaceSettings.settings[settings.sigla];
        if (settings.database) {
            s.database = settings.database;
        }
        if (settings.encoding) {
            s.encoding = settings.encoding;
        }
        if (settings.index_sysno) {
            s.index_sysno = settings.index_sysno;
        }
        if (settings.name) {
            s.name = settings.name;
        }
        if (settings.password) {
            s.password = settings.password;
        }
        if (settings.port) {
            s.port = settings.port;
        }
        if (settings.type) {
            s.type = settings.type === 'z3950' ? Type.Z3950 : Type.MARCXML;
        }
        if (settings.url) {
            s.url = settings.url;
        }
        collection.update({ sigla: s.sigla }, s.getDbString());
    };
    CitaceSettings.addSettings = function (settings, collection) {
        var s = new Citace(settings);
        CitaceSettings.settings[settings.sigla] = s;
        collection.insert(s.getDbString());
    };
    CitaceSettings.getCitaceSettings = function (clear, settings, db) {
        if (clear === void 0) { clear = false; }
        if (clear === true) {
            CitaceSettings.settings = [];
        }
        for (var s in settings) {
            CitaceSettings.settings[settings[s].sigla.toUpperCase()] = new Citace(settings[s]);
        }
        if (db) {
            db.collection('settings_citace').find().toArray(function (err, items) {
                if (!err) {
                    for (var i in items) {
                        CitaceSettings.settings[items[i].sigla.toUpperCase()] = new Citace(items[i]);
                    }
                }
            });
        }
    };
    CitaceSettings.getSettingsForSigla = function (sigla) {
        sigla = sigla.toUpperCase();
        return CitaceSettings.settings[sigla];
    };
    CitaceSettings.settings = [];
    return CitaceSettings;
}());
/**
 * PRAVA PRISTUPU
 **/
var Permissions = (function () {
    function Permissions() {
    }
    Permissions.addPerm = function (s) {
        s.response.end('ok');
    };
    Permissions.getPerms = function (clear, perms, db) {
        if (clear === void 0) { clear = false; }
        if (clear === true) {
            Permissions.perms = {};
            Permissions.referers = {};
        }
        Permissions.perms['127.0.0.1'] = 'sigla';
        Permissions.perms['::1'] = 'sigla';
        Permissions.perms['::ffff:127.0.0.1'] = 'sigla';
        db.collection('perms').find().toArray(function (err, items) {
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                if (item.ref) {
                    console.log('referer: ' + item.ref);
                    Permissions.referers[item.ref] = item.sigla;
                }
                if (item.ip) {
                    console.log('ip: ' + item.ip);
                    Permissions.setSiglaForIp('::ffff:' + item.ip, item.sigla);
                }
            }
        });
    };
    ;
    Permissions.reloadPerms = function (s) {
        Permissions.getPerms(false, null, null);
        s.response.writeHead(200);
        s.response.end('ok');
    };
    Permissions.getSiglaForIp = function (ip) {
        var sigla = Permissions.perms[ip];
        return sigla;
    };
    Permissions.setSiglaForIp = function (ip, sigla) {
        Permissions.perms[ip] = sigla;
    };
    Permissions.refererValid = function (referer, ip, sigla) {
        // console.log('revererValid:' + referer);
        if (Permissions.ipValid(ip, sigla))
            return Permissions.ipValid(ip, sigla);
        if (!referer)
            return false;
        var refererOrig = referer;
        referer = referer.split('?')[0];
        var index = referer.indexOf('/', 8);
        if (index > 0)
            referer = referer.slice(0, index);
        if (Permissions.referers[referer]) {
            return Permissions.referers[referer];
        }
        if (Permissions.referers[referer + '/']) {
            return Permissions.referers[referer + '/'];
        }
        var index2nd = refererOrig.indexOf('/', index + 1);
        if (index2nd > 0)
            referer = refererOrig.slice(0, index2nd);
        if (Permissions.referers[referer]) {
            return Permissions.referers[referer];
        }
        if (Permissions.referers[referer + '/']) {
            return Permissions.referers[referer + '/'];
        }
        console.log('referer ' + referer + ' is not valid (' + refererOrig + ')');
        return false;
    };
    Permissions.ipValid = function (ip, sigla) {
        // console.log('ipValid:' + ip);
        var tmp = Permissions.getSiglaForIp(ip);
        if (!tmp)
            return false;
        if (tmp === 'sigla') {
            return sigla;
        }
        else {
            return tmp;
        }
    };
    Permissions.referers = {}; // povolene referer hlavicky
    Permissions.perms = {}; // povolene ip adresy
    return Permissions;
}());
var Statistics = (function () {
    function Statistics() {
    }
    Statistics.addEtagFileMatch = function (sigla) {
        this.etagFileMatch[sigla]++ || (this.etagFileMatch[sigla] = 1);
        if (sigla != 'admin')
            this.etagFileMatch.admin++ || (this.etagFileMatch.admin = 1);
    };
    Statistics.addEtagCitaceMatch = function (sigla) {
        this.etagCitaceMatch[sigla]++ || (this.etagCitaceMatch[sigla] = 1);
        if (sigla != 'admin')
            this.etagCitaceMatch.admin++ || (this.etagCitaceMatch.admin = 1);
    };
    Statistics.addFileRequests = function (sigla) {
        this.fileRequests[sigla]++ || (this.fileRequests[sigla] = 1);
        if (sigla != 'admin')
            this.fileRequests.admin++ || (this.fileRequests.admin = 1);
    };
    Statistics.addCitaceRequests = function (sigla) {
        this.citaceRequests[sigla]++ || (this.citaceRequests[sigla] = 1);
        if (sigla != 'admin')
            this.citaceRequests.admin++ || (this.citaceRequests.admin = 1);
    };
    Statistics.addTimeoutCount = function (sigla) {
        this.timeoutCount[sigla]++ || (this.timeoutCount[sigla] = 1);
        if (sigla != 'admin')
            this.timeoutCount.admin++ || (this.timeoutCount.admin = 1);
    };
    Statistics.addRecordNotfound = function (sigla) {
        this.recordNotfound[sigla]++ || (this.recordNotfound[sigla] = 1);
        if (sigla != 'admin')
            this.recordNotfound.admin++ || (this.recordNotfound.admin = 1);
    };
    //specialne
    Statistics.addEtagStatisticByEtagPrefix = function (etagPrefix, sigla) {
        if (etagPrefix === 'file') {
            this.addEtagFileMatch(sigla);
        }
        else {
            this.addEtagCitaceMatch(sigla);
        }
    };
    Statistics.getStatisticsBySigla = function (s, sigla) {
        var stats = {};
        stats.uptime = this.uptime();
        stats.etag_citace_match = this.etagCitaceMatch[sigla] || 0;
        stats.etag_file_match = this.etagFileMatch[sigla] || 0;
        stats.file_requests = this.fileRequests[sigla] || 0;
        stats.citace_requests = this.citaceRequests[sigla] || 0;
        stats.timeout_count = this.timeoutCount || 0;
        stats.record_not_found = this.recordNotfound || 0;
        s.response.writeHead(200);
        s.response.end(JSON.stringify(stats, null, ' '));
    };
    Statistics.clearData = function () {
        this.etagCitaceMatch = {};
        this.etagFileMatch = {};
        this.fileRequests = {};
        this.citaceRequests = {};
        this.timeoutCount = {};
        this.recordNotfound = {};
    };
    Statistics.uptime = function () {
        var now = new Date();
        var uptime = Math.floor((now.getTime() - this.dateStartup.getTime()) / 1000);
        var sec = uptime % 60;
        uptime -= sec;
        uptime /= 60;
        var min = uptime % 60;
        uptime -= min;
        uptime /= 60;
        var hour = uptime % 24;
        uptime -= hour;
        uptime /= 24;
        now.setHours(hour, min, sec);
        var time = now.toString().split(' ')[4];
        return time + ' up ' + uptime + ' days, ' + this.dateStartup.toISOString();
    };
    Statistics.etagFileMatch = {}; // pocet dotazu na favicon, kesovanych prohlizecem od spusteni
    Statistics.etagCitaceMatch = {}; // pocet dotazu na favicon, kesovanych prohlizecem od spusteni
    Statistics.fileRequests = {}; // pocet dotazu na favicon, a jine
    Statistics.citaceRequests = {}; // pocet dotazu na generovani testu citace
    Statistics.timeoutCount = {}; // pocet timeout nedostupnosti dotazovanych externich serveru
    Statistics.recordNotfound = {}; // zaznam se na externim serveru nenasel
    Statistics.dateTimeout = 0; // cas do kdy je platny timeout
    Statistics.dateStartup = new Date(); // doba startu
    return Statistics;
}());
module.exports = {
    server: server,
    getPerms: Permissions.getPerms,
    getCitaceSettings: CitaceSettings.getCitaceSettings,
    testLog: testLog
};
function testLog(color, message) {
    console.log('\x1b[' + color + 'm', message, '\x1b[0m');
}
function createCitation(s, bibliography, marc) {
    var sysno = s.query.sysno;
    var sigla = Permissions.refererValid(s.referer, s.remoteIP, s.query.sigla || null);
    if (!s.isRequestValid(sigla, true)) {
        return;
    }
    testLog("43", "#2 sigla:" + sigla); //todo
    var text;
    if (bibliography) {
        text = s.retrieveCitation(bibliography);
    }
    else if (marc) {
        text = marc.GetCitation();
        if (text != "" && text[text.length - 1] == " ") {
            text = text.substr(0, text.length - 1);
        }
    }
    else {
        testLog("43", "#3 sigla:" + sigla); //todo
        var citace_Settings = CitaceSettings.getSettingsForSigla(sigla);
        if (s.send404IfNotValue(citace_Settings, 'Unknown citation source settings for "' + sigla + '". You need to sign up at http://www.obalkyknih.cz, provide your catalog URL and setup citation source settings')) {
            return null;
        }
        else {
            if (citace_Settings.type == Type.MARCXML)
                s.getMarcRecord(s, citace_Settings);
            else
                s.getZ3950MarcRecord(s, citace_Settings);
        }
        return null;
    }
    var currentDate = new Date();
    var citation = { sigla: sigla, sysno: sysno, text: text, date: currentDate };
    return citation;
}
var Field = (function () {
    function Field() {
        this.Subtags = {};
    }
    return Field;
}());
var Marc = (function () {
    function Marc(isEmpty) {
        this.Fields = {};
        this.IsEmpty = isEmpty;
    }
    Marc.prototype.GetCitation = function () {
        if (this.IsEmpty) {
            return "";
        }
        console.log("primarni_odpovednost: " + this.GetValue(100, 'a'));
        console.log("nazev: " + this.GetValue(245, 'a'));
        console.log("podnazev: " + this.GetValue(245, 'b'));
        console.log("sekundarni_odpovednost: " + (this.Fields[700] ? this.Fields[700].length : 0));
        if (this.Fields[700])
            for (var i = 0; i < this.Fields[700].length; i++) {
                if (this.Fields[700][i].Ind2 != '2' && this.Fields[700][i].Subtags['a'] && this.Fields[700][i].Subtags['4'])
                    console.log("-" + this.Fields[700][i].Subtags['a'] + "(" + this.Fields[700][i].Subtags['4'] + ")");
            }
        console.log("245h: " + this.GetValue(245, 'h'));
        console.log("vydani: " + this.GetValue(250, 'a'));
        console.log("misto_vydani: " + this.GetValue(260, 'a'));
        console.log("misto_vydani2: " + this.GetValue(264, 'a'));
        console.log("misto_vydani3 (kapitola): " + this.GetValue(773, 'd'));
        console.log("vydavatel: " + this.GetValue(260, 'b'));
        console.log("vydavatel2: " + this.GetValue(264, 'b'));
        console.log("rok_vydani: " + this.GetValue(260, 'c'));
        console.log("rok_vydani2: " + this.GetValue(264, 'c'));
        console.log("rozsah stran: " + this.GetValue(773, 'g'));
        console.log("pocet_stran: " + this.GetValue(300, 'a'));
        console.log("edice: " + this.GetValue(490, 'a'));
        console.log("cislo_edice: " + this.GetValue(490, 'v'));
        console.log("ISBN: " + this.GetValue(20, 'a'));
        console.log("ISBN2 (kapitola): " + this.GetValue(773, 'z'));
        console.log("dostupnost: " + this.GetValue(856, 'a'));
        console.log("poznamka: " + this.GetValue(500, 'a'));
        console.log("ISSN: " + this.GetValue(22, 'a'));
        console.log("ISSN2: " + this.GetValue(773, 'x'));
        console.log("URL: " + this.GetValue(910, 'w'));
        console.log("URL2: " + this.GetValue(856, 'u'));
        console.log("korporace: " + this.GetValue(110, 'a'));
        console.log("svazek/rocnik: " + this.GetValue(915, 'a'));
        console.log("rocnik_cislo: " + this.GetValue(915, 'b'));
        console.log("jine_id: " + this.GetValue(24, 'a'));
        console.log("jine_id_typ: " + this.GetValue(24, '2'));
        console.log("meritko: " + this.GetValue(255, 'a'));
        console.log("nosic: " + this.GetValue(340, 'a'));
        console.log("nazev_casopisu: " + this.GetValue(773, 't'));
        var primarni_odpovednost = this.GetPrimaryAuthority();
        var nazev = this.GetValue(245, 'a') ? this.GetValue(245, 'a') + "" : "";
        if ([" :", " /", " ;"].indexOf(nazev.substr(nazev.length - 2, 2)) != -1) {
            nazev = nazev.substr(0, nazev.length - 2);
        }
        if (nazev[nazev.length - 1] == '.') {
            nazev = nazev.substr(0, nazev.length - 1);
        }
        var podnazev = this.GetValue(245, 'b') ? this.GetValue(245, 'b') + "" : "";
        if (podnazev.substr(podnazev.length - 2, 2) == " /") {
            podnazev = podnazev.substr(0, podnazev.length - 2);
        }
        if (podnazev[podnazev.length - 1] == '.') {
            podnazev = podnazev.substr(0, podnazev.length - 1);
        }
        var sekundarni_odpovednost = this.GetIllustratorsString();
        //sekundarni_odpovednost = sekundarni_odpovednost + (this.GetEditorsString() != "" ? (sekundarni_odpovednost != "" ? ", " : "") + this.GetEditorsString() : "");
        sekundarni_odpovednost = sekundarni_odpovednost + (this.GetTranslatorsString() != "" ? (sekundarni_odpovednost != "" ? ", " : "") + this.GetTranslatorsString() : "");
        if (sekundarni_odpovednost != "")
            sekundarni_odpovednost = sekundarni_odpovednost[0].toUpperCase() + sekundarni_odpovednost.substring(1) + ". ";
        console.log("sekundarni_odpovednost: " + sekundarni_odpovednost);
        var vydani = this.GetValue(250, 'a') ? this.GetValue(250, 'a') + "" : "";
        if (vydani != "") {
            vydani = vydani + (vydani[vydani.length - 1] != '.' ? ". " : " ");
        }
        var misto_vydani = this.GetValue(260, 'a') ? this.GetValue(260, 'a') : "";
        if (misto_vydani=="") misto_vydani = this.GetValue(264, 'a') ? this.GetValue(264, 'a') : "";
        if (misto_vydani=="") misto_vydani = this.GetValue(773, 'd') ? this.GetValue(773, 'd') : "";
        if ([" :", " ;"].indexOf(misto_vydani.substr(misto_vydani.length - 2, 2)) != -1) {
            misto_vydani = misto_vydani.substr(0, misto_vydani.length - 2);
        }
        /*if (misto_vydani[0] == '[' && misto_vydani[misto_vydani.length - 1] == ']' && misto_vydani.indexOf(',') == -1) {
            misto_vydani = misto_vydani.substr(1, misto_vydani.length - 2);
        }*/
        if (misto_vydani.slice(-1) == ",") {
            misto_vydani = misto_vydani.substr(0, misto_vydani.length - 1);
        }
        var vydavatel = this.GetValue(260, 'b') ? this.GetValue(260, 'b') + "" : (this.GetValue(264, 'b') ? this.GetValue(264, 'b') + "" : "");
        if (vydavatel.substr(vydavatel.length - 1) == ',') {
            vydavatel = vydavatel.substr(0, vydavatel.length - 1);
        }
        if (vydavatel[0] == '[' && vydavatel[vydavatel.length - 1] == ']' && vydavatel.indexOf(',') == -1) {
            vydavatel = vydavatel.substr(1, vydavatel.length - 2);
        }
        if ([" :", " ;"].indexOf(vydavatel.substr(vydavatel.length - 2, 2)) != -1) {
            vydavatel = vydavatel.substr(0, vydavatel.length - 2);
        }
        var rok_vydani = this.GetValue(260, 'c') ? this.GetValue(260, 'c') : this.GetValue(264, 'c');
        var t773g = this.GetValue(773, 'g');
        var rok_vydani_netransformuj = false;
        if (!rok_vydani && t773g) {
            var t773gPagePos = t773g.indexOf(" s.");
            if (t773gPagePos === -1) t773g.indexOf(" str.");
            if (t773gPagePos === -1) t773g.indexOf(" strana");
            if (t773gPagePos > -1) {
                var t773gPage = t773g.substring(t773gPagePos, t773g.length);
                t773g = t773g.substring(0, t773gPagePos);
                if (t773gPage != "") {
                    var year = "", volume = "", part = "";
                    // ak sa vyskytne zapis celeho datumu, vyextrahuj iba rok
                    var fullDateMatch = /\d{1,2}\.\d{1,2}\.\d{4}/.exec(t773g);
                    if (fullDateMatch) {
                        var fullDate = fullDateMatch[0];
                        var fullDateYearMatch = /\d{4}/.exec(fullDate);
                        if (fullDateYearMatch) {
                            var fullDateYear = fullDateYearMatch[0];
                            t773g = t773g.replace(fullDate, fullDateYear);
                        }
                    }
                    // parsuj rok/rocnik/cislo
                    var parts = partParser.parse(t773g);
                    if (parts.year!="" && (parts.volume!="" || parts.part!="")) {
                        year = /\d{2,4}/.exec(parts.year);
                        volume = /\d{1,4}/.exec(parts.volume);
                        part = /\d{1,4}/.exec(parts.part);
                    }
                    year = year ? year[0] : "";
                    volume = volume ? volume[0] : "";
                    part = part ? part[0] : "";
                    if (year!="" && (volume!="" || part!="")) {
                        var volume_part = (part!="" && volume!="") ? volume + "(" + part + ")" : volume||part;
                        rok_vydani = year + ", " + volume_part + "," + t773gPage +". ";
                        rok_vydani_netransformuj = true;
                    }
                }
            }

            if (!rok_vydani) {
                var match = rok_vydani = /\(.+[^0-9]+(\d{4})[^0-9]*\)|\([^0-9[]*(\d{4})[^0-9\]]*\)/.exec(this.GetValue(773, 'g'));
                if (match) {
                    if (match[1]) {
                        rok_vydani = match[1];
                    }
                    else if (match[2]) {
                        rok_vydani = match[2];
                    }
                }
                if (rok_vydani != "") rok_vydani = (rok_vydani ? rok_vydani + ", " : "") + this.GetValue(773, 'g') + ". ";
            }

            rok_vydani = rok_vydani.substring(0,1).toLowerCase() + rok_vydani.substring(1);
        }
        if (!rok_vydani_netransformuj) {
            if (rok_vydani && ['.', '?'].indexOf(rok_vydani[rok_vydani.length - 1]) != -1)
                rok_vydani = rok_vydani.substr(0, rok_vydani.length - 1);
            if (rok_vydani && rok_vydani[0] == 'p')
                rok_vydani = rok_vydani.substr(1);
            var match = /cop\. (.*)/.exec(rok_vydani);
            if (match)
                rok_vydani = match[1];
            var match = /cca (.*)/.exec(rok_vydani);
            if (match)
                rok_vydani = match[1];
        }

        var pocet_stran = this.GetValue(300, 'a') ? this.GetValue(300, 'a') + "" : "";
        if (pocet_stran == "" && this.GetValue(773, 'g')) {
            var match = /s. ([0-9-]*)/.exec(this.GetValue(773, 'g'));
            if (match && match[1])
                pocet_stran = match[1];
        }
        else if (pocet_stran != "") {
            /*var p = /(\d+) s\.|(\d+) stran/.exec(pocet_stran);
            pocet_stran = p && p[1] ? p[1] + " s. " : (p && p[2] ? p[2] + " s. " : "");
            debug Bejlkova*/
            if (pocet_stran.substr(pocet_stran.length - 2, 2) == " :" || pocet_stran.substr(pocet_stran.length - 2, 2) == " ;" || pocet_stran.substr(pocet_stran.length - 2, 2) == " =" || pocet_stran.substr(pocet_stran.length - 2, 2) == " /") {
                pocet_stran = pocet_stran.substr(0, pocet_stran.length - 2);
            }
            if (pocet_stran.slice(-1) != '.') pocet_stran = pocet_stran + '. ';
            if (pocet_stran.slice(-1) != ' ') pocet_stran = pocet_stran + ' ';
        }
        var t245h = this.GetValue(245, 'h') || "";
        if (t245h != "") {
            if (t245h.substr(t245h.length - 2, 2) == " :" || t245h.substr(t245h.length - 2, 2) == " ;" || t245h.substr(t245h.length - 2, 2) == " =" || t245h.substr(t245h.length - 2, 2) == " /") {
                t245h = t245h.substr(0, t245h.length - 2);
            }
            t245h = " " + t245h + ". ";
        }
        // doplnenie typu dokumentu ak v zazname nie je uvedene
        if (t245h == "") {
            var doc_type = this.Type[0];
            switch (doc_type) {
                case "i":
                case "j": t245h = " [zvukový záznam]. "; break;
                case "e": t245h = " [kartografický dokument]. "; break;
                case "k": t245h = " [grafika]. "; break;
                case "g": t245h = " [videozáznam]. "; break;
                case "r": t245h = " [objekt]. "; break;
            }
        }
        var edice = this.GetValue(490, 'a') ? this.GetValue(490, 'a') + "" : "";
        if (edice.substr(edice.length - 2, 2) == " ;") {
            edice = edice.substr(0, edice.length - 2);
        }
        if (edice.substr(edice.length - 1, 1) == ",")
            edice = edice.substr(0, edice.length - 1);
        var cislo_edice = this.GetValue(490, 'v');
        if (cislo_edice && cislo_edice != "" && cislo_edice[0] == '[' && cislo_edice[cislo_edice.length - 1] == ']') {
            cislo_edice = cislo_edice.substr(1, cislo_edice.length - 2);
        }
        var ISBN = this.GetValue(20, 'a') ? this.GetValue(20, 'a') + "" : "";
        if (ISBN=="") ISBN = this.GetValue(773, 'z') ? this.GetValue(773, 'z') + "" : "";
        if (ISBN != "") {
            if (ISBN.indexOf(' ') != -1 && (ISBN.length > (ISBN.indexOf(' ') + 2))) {
                var match = /\d/.exec(ISBN[ISBN.indexOf(' ') + 1]);
                if (!match) {
                    ISBN = ISBN.substr(0, ISBN.indexOf(' '));
                }
            }
            var contains_digit = /\d/.exec(ISBN);
            if (ISBN.substr(ISBN.length - 2, 2) == " :" || ISBN.substr(ISBN.length - 2, 2) == " ;" || ISBN.substr(ISBN.length - 2, 2) == " =" || ISBN.substr(ISBN.length - 2, 2) == " /") {
                ISBN = ISBN.substr(0, ISBN.length - 2);
            }
            ISBN = contains_digit && ISBN ? "ISBN " + ISBN + ". " : "";
        }
        var poznamka = ""; //this.GetValue(500, 'a'); -- zatial bez poznamok
        var ISSN = this.GetValue(22, 'a') ? this.GetValue(22, 'a') : this.GetValue(773, 'x');
        ISSN = ISSN ? "ISSN " + ISSN + ". " : "";
        if (ISSN.substr(ISSN.length - 2, 2) == " :" || ISSN.substr(ISSN.length - 2, 2) == " ;" || ISSN.substr(ISSN.length - 2, 2) == " =" || ISSN.substr(ISSN.length - 2, 2) == " /") {
            ISSN = ISSN.substr(0, ISSN.length - 2);
        }
        var URL = this.GetValue(910, 'w') || '';
        if (URL.length < 5) URL = undefined;
        if (!URL) {
            if (fields) {
                var fields = fields.filter(function (f) { f.Subtags['u'] && f.Ind1 == '4' && f.Ind2 == '0'; });
                if (fields && fields.length > 0)
                    URL = fields[0].Subtags['u'];
            }
        }
        var korporace = this.GetValue(110, 'a');
        korporace = korporace ? korporace : "";
        if (korporace != "") {
            korporace = korporace + "";
            korporace = korporace + (korporace[korporace.length - 1] != '.' ? ". " : " ");
        }
        var svazek = this.GetValue(915, 'a') ? this.GetValue(915, 'a') : this.GetValue(773, 'g');
        var rocnik_cislo = this.GetValue(915, 'b');
        if (rocnik_cislo) {
            var _match = /.*[čČ]\. (\d+)|.*[vV]ol. (\d+)/.exec(rocnik_cislo);
            rocnik_cislo = _match && _match[1] ? _match[1] : (_match && _match[2] ? _match[2] : null);
        }
        if (svazek) {
            var match = /.*[rR]oč\. (\d+).*[čČ]\. (\d+)|.*[vV]ol. (\d+)|.*[rR]oč\. (\d+)/.exec(svazek);
            svazek = match && match[1] ? match[1] : (match && match[4] ? match[4] : "");
            if (!rocnik_cislo)
                rocnik_cislo = match && match[2] ? match[2] : (match && match[3] ? match[3] : null);
        }
        else
            svazek = "";
        var rocnik = svazek;
        var jine_id = this.GetValue(24, 'a');
        var jine_id_typ = this.GetValue(24, '2');
        var meritko = this.GetValue(255, 'a');
        if (meritko) {
            var match = /([\d+][\d ]*:[\d ]+)/.exec(meritko);
            if (match) {
                //meritko = " [" + match[1] + "]. "; //debug Bejlkova
                meritko = " " + match[1] + ". "; //debug Bejlkova
            }
            else
                meritko = "";
        }
        else
            meritko = "";
        var nosic = this.GetValue(340, 'a') ? " [" + this.GetValue(340, 'a') + "]" : "";
        var nazev_casopisu = this.GetArticleName();
        var rozsah_stran = pocet_stran;
        var tecka_za_nazvom = (t245h=="" ? ". " : ""); // neni ak sa bude pokracovat typom dokumentu
        var nazev_podnazev = (nazev ? nazev + (podnazev ? "" : tecka_za_nazvom) : "")
            + (podnazev ? ": " + podnazev + tecka_za_nazvom : "");
        var misto_nakladatelstvi_rok = (misto_vydani ? misto_vydani + (vydavatel ? ": " : "") : "")
            + (vydavatel ? vydavatel : "")
            + (rok_vydani ? (misto_vydani || vydavatel ? ", " : "") + rok_vydani : "");
        var edice_cislo_edice = (edice ? edice : "")
            + (cislo_edice ? (edice ? ", " + cislo_edice : cislo_edice) : "")
            + (edice || cislo_edice ? ". " : "");
        var rocnik_rocnik_cislo = (rocnik ? rocnik : "") + (rocnik_cislo ? "(" + rocnik_cislo + ")" : "");
        var DOI = jine_id ? "DOI: " + jine_id + ". " : "";
        var jine_id_typ_jine_id = jine_id_typ ? (jine_id ? jine_id_typ + ": " + jine_id + ". " : "") : "";

        console.log(this.Type);
        var text = "";
        switch (this.Type) {
            case "aa":
                if (rocnik_rocnik_cislo.indexOf(" s."))  rozsah_stran = "";
                text = primarni_odpovednost + nazev_podnazev + "In: <i>" + nazev_casopisu + "</i>" + t245h + vydani + misto_nakladatelstvi_rok +
                    DOI + ISBN + ISSN + (URL ? "Dostupné také z: " + URL + (poznamka ? ". " : "") : "") + (poznamka ? poznamka + "." : "");
                break;
            case "em":
                var _index = nazev_podnazev.length - 2;
                nazev_podnazev = "<i>" + nazev_podnazev + "</i>";
                text = primarni_odpovednost + korporace + (nazev_podnazev != "" ? nazev_podnazev : "") + t245h + meritko + sekundarni_odpovednost + vydani + misto_nakladatelstvi_rok + (pocet_stran != "" ? ". " + pocet_stran : (misto_nakladatelstvi_rok != "" ? ". " : "")) + edice_cislo_edice + ISBN + ISSN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL : "");
                break;
            case "mm":
                var _index = nazev_podnazev.length - 2;
                var datum_citace = new Date(Date.now()).toLocaleString([], { year: "numeric", month: "numeric", day: "numeric" });
                var cit = "[cit. " + datum_citace + "]. ";
                nosic = " [online]"; // mm je vzdy online nosic
                nazev_podnazev = "<i>" + nazev_podnazev + "</i>";
                text = primarni_odpovednost + korporace + (nosic ? (nazev_podnazev != "" ? nazev_podnazev.substr(0, _index) + nosic + nazev_podnazev.substr(_index) : nosic) : (nazev_podnazev != "" ? nazev_podnazev : "")) + t245h + svazek + sekundarni_odpovednost + vydani + misto_nakladatelstvi_rok + (pocet_stran != "" ? (misto_nakladatelstvi_rok != "" ? ". " : "") + pocet_stran + cit : (misto_nakladatelstvi_rok != "" ? " " : "") + cit) + edice_cislo_edice + ISBN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL + ". " : "") + (poznamka ? poznamka + ". " : "");
                break;
            case "cs":
                text = "<i>" + nazev_podnazev + "</i>" + t245h + vydani + misto_nakladatelstvi_rok + (rocnik_rocnik_cislo != "" ? (misto_nakladatelstvi_rok != "" ? ". " : "") + rocnik_rocnik_cislo : "") + (misto_nakladatelstvi_rok != "" || rocnik_rocnik_cislo != "" ? ". " : "") + ISBN + ISSN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL : "");
                break;
            case "fm":
                var _index = nazev_podnazev.length - 2;
                nazev_podnazev = "<i>" + nazev_podnazev + "</i>";
                text = primarni_odpovednost + korporace + (nazev_podnazev != "" ? nazev_podnazev : "") + t245h + meritko + sekundarni_odpovednost + vydani + misto_nakladatelstvi_rok + (pocet_stran != "" ? (misto_nakladatelstvi_rok != "" ? ". " : "") + pocet_stran : (misto_nakladatelstvi_rok != "" ? ". " : "")) + edice_cislo_edice + ISBN + ISSN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL : "");
                break;
            case "as":
            case "js":
            case "gs":
            case "ts":
            case "ms":
            case "ks":
                text = "<i>" + nazev_podnazev + "</i>" + t245h + vydani + misto_nakladatelstvi_rok + (rocnik_rocnik_cislo != "" ? (misto_nakladatelstvi_rok != "" ? ". " + rocnik_rocnik_cislo : rocnik_rocnik_cislo) : "") + (misto_nakladatelstvi_rok != "" || rocnik_rocnik_cislo != "" ? ". " : "") + ISSN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL : "");
                break;
            case "am":
            case "jm":
            case "cm":
            case "au":
            case "ii":
            case "kc":
            case "om":
            case "im":
            case "gm":
            case "ai":
            case "km":
            case "tm":
            case "rm":
                if (this.Type[1] == "i") pocet_stran = ""; // pre integracne zdroje bez 300a
                text = primarni_odpovednost + korporace + "<i>" + nazev_podnazev + "</i>" + t245h + svazek + sekundarni_odpovednost + vydani + misto_nakladatelstvi_rok + (pocet_stran != "" ? (misto_nakladatelstvi_rok != "" ? ". " + pocet_stran : pocet_stran) : (misto_nakladatelstvi_rok != "" ? ". " : "")) + edice_cislo_edice + ISBN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL : "");
                break;
            default:
                text = "";
        }

        return entities.decode(text);
    };
    Marc.prototype.GetOtherSecondaryAuthorities = function (primarni_odpovednost) {
        return this.GetSecondaryAuthors(null, primarni_odpovednost);
    };
    Marc.prototype.GetTranslatorsString = function () {
        if (this.GetPrimaryAuthorRole() != "trl")
            return this.GetStringForSecondaryAuthorities(Marc.Translator, "překlad");
        else
            return "";
    };
    Marc.prototype.GetEditorsString = function () {
        if (this.GetPrimaryAuthorRole() != "edt")
            return this.GetStringForSecondaryAuthorities(Marc.Editor, "ed.");
        else
            return "";
    };
    Marc.prototype.GetOtherAuthors = function () {
        return this.GetSecondaryAuthors(Marc.Author);
    };
    Marc.prototype.GetIllustratorsString = function () {
        if (this.GetPrimaryAuthorRole() != "ill")
            return this.GetStringForSecondaryAuthorities(Marc.Illustrator, "ilustrace");
        else
            return "";
    };
    Marc.prototype.GetStringForSecondaryAuthorities = function (authorTag, actionText) {
        var authors = this.GetSecondaryAuthors(authorTag);
        var text = "";
        var nameMatch;
        if (authors.length > 0) {
            nameMatch = /([^,]*), (.*[a-zA-Z].*)|(.*)/.exec(authors[0]);
            text = actionText + " " + (nameMatch[1] ? nameMatch[2] + " " + nameMatch[1].toUpperCase() : nameMatch[3]);
            if (authors.length > 1)
                for (var i = 1; i < authors.length; i++) {
                    nameMatch = /([^,]*), (.*[a-zA-Z].*)|(.*)/.exec(authors[i]);
                    text = text + ", " + actionText + " " + (nameMatch[1] ? nameMatch[2] + " " + nameMatch[1].toUpperCase() : nameMatch[3]);
                }
        }
        return text;
    };
    Marc.prototype.GetSecondaryAuthors = function (code, primarni_odpovednost) {
        if (primarni_odpovednost === void 0) { primarni_odpovednost = null; }
        var authorFields;
        var authors = [];
        var secondary_tags = ['ill', 'trl'];
        var primary_index = secondary_tags.indexOf(this.GetPrimaryAuthorRole());
        if (primary_index != -1) {
            secondary_tags.splice(primary_index, 1);
        }
        if (!this.Fields[700]) {
            return [];
        }
        if (code) {
            authorFields = this.Fields[700].filter(function (f) { return f.Ind2 != '2' && f.Subtags['a'] && f.Subtags['4'] && f.Subtags['4'].filter(function (f2) { return f2 == code; }).length > 0; });
        }
        else {
            //authorFields = this.Fields[700].filter(function (f) { return f.Subtags['a'] && (!f.Subtags['4'] || (f.Subtags['4'] && f.Subtags['4'].filter(function (f2) { return secondary_tags.indexOf(f2) == -1; }).length > 0)); });
            // ako dalsi autori iba editori
            authorFields = this.Fields[700].filter(function (f) { return f.Subtags['a'] && (!f.Subtags['4'] || (f.Subtags['4'] && f.Subtags['4'].filter(function (f2) { return f2=='edt'; }).length > 0)); });
        }
        var temp = []; //filtruje duplicity tag 700, subtag $a ind2 = 2
        authorFields = authorFields.filter(function (f) { return primarni_odpovednost != f.Subtags['a'][0] && temp.indexOf(f.Subtags['a'][0]) == -1 && temp.push(f.Subtags['a'][0]); });
        for (var i = 0; i < authorFields.length; i++) {
            var auths = authorFields[i].Subtags['a'];
            for (var j = auths.length - 1; j >= 0; j--) {
                var author = auths[j];
                if (author.substr(author.length - 1, 1) == ',') {
                    author = author.substr(0, author.length - 1);
                }
                var authorText = entities.decode(author);
                if (authorFields[i].Subtags['4'].indexOf('edt') > -1) authorText += ', ed.';
                authors.push(authorText);
            }
        }
        return authors;
    };
    Marc.prototype.GetValue = function (tag, subtag) {
        if (!this.Fields[tag]) {
            return null;
        }
        var matches = this.Fields[tag].filter(function (f) { return f.Subtags[subtag] && f.Subtags[subtag].length > 0; })[0];
        var value = matches ? matches.Subtags[subtag][0] : null;
        return entities.decode(value);
    };
    Marc.prototype.GetArticleName = function () {
        var casopisy = [];
        if (this.Fields[773]) {
            var values = this.Fields[773].filter(function (f) { return f.Subtags['t'] && f.Subtags['t'].length > 0; });
            if (values && values.length > 0) {
                for (var i = 0; i < values.length; i++) {
                    casopisy.push(values[i].Subtags['t'][0]);
                }
                return casopisy.join('. ') + ". ";
            }
        }
        return "";
    };
    Marc.prototype.GetPrimaryAuthority = function () {
        var primarni_odpovednost = entities.decode(this.GetValue(100, 'a'));
        var primarni_odpovednost_first = null;
        if (primarni_odpovednost) {
            if ([',', '.'].indexOf(primarni_odpovednost[primarni_odpovednost.length - 1]) != -1) {
                primarni_odpovednost = primarni_odpovednost.substr(0, primarni_odpovednost.length - 1);
            }
            var match = /(.*), (.*)|(.+)[,]?/.exec(primarni_odpovednost);
            primarni_odpovednost = (match && match[1] && match[2] ? match[1].toUpperCase() + ", " + match[2] : (match && match[3] && match[4] ? match[4].toUpperCase() + ", " + match[3] : null));
            if (!primarni_odpovednost && match && match[5])
                primarni_odpovednost = match[5].toUpperCase();
            primarni_odpovednost_first = primarni_odpovednost;
        }
        var otherAuthors = this.GetOtherSecondaryAuthorities(this.GetValue(100, 'a'));
        if (otherAuthors) {
            for (var i = 0; i < otherAuthors.length; i++) {
                var author = otherAuthors[i];
                // ak je vedlajsi autor editor, tak odtranit 'ed.', prejst regularnym vyrazom a pozdejsie opet vratit
                // riesene takto, pretoze som nenasiel lepsi regularny vyraz
                var isEdt = false;
                if (author.indexOf(', ed.')) {
                  isEdt = true;
                  author = author.replace(', ed.', '');
                }
                var match = /(.*), (.*)|(.+)[,]?/.exec(author);
                if (!match) {
                    primarni_odpovednost = null;
                }
                else {
                    if ((i == 0 && primarni_odpovednost) || i > 0) {
                        if ((primarni_odpovednost_first && i == 3) || (!primarni_odpovednost_first && i == 4)) {
                            primarni_odpovednost = primarni_odpovednost + ", et al";
                            break;
                        }
                        if (match[1]) {
                            // meno + PRIEZVISKO
                            //primarni_odpovednost = primarni_odpovednost + (i < (otherAuthors.length - 1) ? ", " : " a ") + match[2] + " " + match[1].toUpperCase();
                            // PRIEZVIKO + meno tak ako je v zazname, ale priezvisko velkym
                            primarni_odpovednost = primarni_odpovednost + (i < (otherAuthors.length - 1) ? ", " : " a ") + author.replace(match[1], match[1].toUpperCase());
                        }
                        else {
                            console.log('*3');
                            var splitMatch = /(.*) (.*)|(.*)/.exec(match[3]);
                            primarni_odpovednost = primarni_odpovednost + (i < (otherAuthors.length - 1) ? ", " : " a ") + (splitMatch && splitMatch[1] ? splitMatch[2] + " " + splitMatch[1].toUpperCase() : match[3].toUpperCase());
                        }
                    }
                    else {
                        if (match[1]) {
                            console.log('*4');
                            primarni_odpovednost = match[1].toUpperCase() + ", " + match[2];
                        }
                        else {
                            console.log('*5');
                            var splitMatch = /(.*) (.*)/.exec(match[3]);
                            primarni_odpovednost = splitMatch && splitMatch[1] ? splitMatch[2].toUpperCase() + ", " + splitMatch[1] : match[3].toUpperCase();
                        }
                    }
                }
                if (isEdt) primarni_odpovednost += ', ed.';
            }
        }
        if (primarni_odpovednost && primarni_odpovednost != '' && primarni_odpovednost.slice(-1) != '.') primarni_odpovednost += '. ';
        return primarni_odpovednost ? primarni_odpovednost + ' ' : '';
    };
    Marc.prototype.GetPrimaryAuthorRole = function () {
        return this.Fields[100] && this.Fields[100][0].Subtags['4'] ? this.Fields[100] && this.Fields[100][0].Subtags['4'][0] : "";
    };
    Marc.Illustrator = "ill";
    Marc.Editor = "edt";
    Marc.Translator = "trl";
    Marc.Author = "aut";
    return Marc;
}());
;
