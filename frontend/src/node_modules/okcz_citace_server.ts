// =========================================
// API CITACE OKCZ v1
// =========================================

// url na backend
var urlMain: string = "www.obalkyknih.cz"
var urlPart: string = "/"
var urlApiCitace: string = "api/citace"
var uriAlive: string = "api/runtime/alive"
// IP adresa backendu - udsud je mozne prijimat ridici prikazy
var ipBackend: string = "::ffff:195.113.145.2"
// timeout dotazu na backend (ms)
var timeout: number = 5 * 1000;
// max age of citation to be considered outdated
var maxDays = 7;
// citations are sent in blocks
var citationBlockSize = 5;
// =========================================

var request = require('request');
var URL_lib = require('url');
var fileSystem = require('fs');
var http = require('http');
var qs = require('querystring');
var md5 = require('md5');
var mongodb = require('mongodb');
//var Buffer = require('buffer/').Buffer;
var net = require('net');

var regexpSigla: any = new RegExp(/^[A-Z0-9]{6}$/);

var etags: any = {}; // obsahuje vsechny platne etag pro cache prohlizec

var metaCollection: string = 'citace';
var backendCollection: string = 'be_sync_citace';

var libraries: { [key: string]: string; } = {}; // key - sigla, value - IP

const z3950InitBuffer = new Buffer([0xb4, 0x4e, 0x83, 0x02, 0x00, 0xe0, 0x84, 0x04, 0x00, 0xe9, 0xa2, 0x40, 0x85, 0x03, 0x10, 0x00, 0x00, 0x86, 0x03, 0x10, 0x00, 0x00, 0x9f, 0x6e, 0x02, 0x38, 0x31, 0x9f, 0x6f, 0x03, 0x59, 0x41, 0x5a, 0x9f, 0x70, 0x14, 0x33, 0x2e, 0x30, 0x2e, 0x31, 0x38, 0x20, 0x57, 0x49, 0x4e, 0x33, 0x32, 0x20, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xbf, 0x81, 0x49, 0x14, 0x30, 0x12, 0xa4, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x13, 0x0f, 0x03, 0xa0, 0x05, 0xa1, 0x03, 0x83, 0x01, 0x00]);

const z3950ShowReqBuffer = new Buffer([0xb8, 0x14, 0x9f, 0x1f, 0x01, 0x31, 0x9e, 0x01, 0x01, 0x9d, 0x01, 0x01, 0x9f, 0x68, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x13, 0x05, 0x0a]);

const subtagDelimiter = new Buffer([0x1f]);

// =========================================
var server = function (req, response, db)
{
    var a: Server;

    a = new Server(req, response, db);
    a.go(a);
}

class Server {
    req: any;
    response: any;
    db: any;

    requrl: any;
    query: any;
    date: any;
    timestamp: any;
    now: any;
    etag: any;
    referer: any;
    remoteIP: any;

    sigla: any;

    constructor(req: any, response: any, db:any) {
        this.requrl = req.url;
        testLog("92", "Request url:" + this.requrl);
        this.query = URL_lib.parse(this.requrl, true).query;
        this.date = new Date();
        this.timestamp = this.date.toISOString();
        this.now = this.date.getTime();
        this.etag = req.headers['if-none-match'] || req.headers['Etag'];
        this.referer = req.headers['referer'];
        this.xreferer = req.headers['x-referer'] || req.headers['x-referal'];
        this.remoteIP = req.connection.remoteAddress;
        this.req = req;
        this.response = response;

        this.sigla = Permissions.ipValid(this.xreferer, this.remoteIP, this.query.sigla);

        this.db = db;
    }

    go(s: Server) {
        /**
         * OD BACKENDU
         **/
         if (this.requrl === '/citace') {
            //doplnit application/json format!
            if (s.req.method == 'POST') {
                var body = '';

                s.req.on('data', (data) => {
                    body += data;
                });

                s.req.on('end', () => {
                   var json = JSON.parse(body);
                   var marc: Marc = new Marc(false);
                   marc.Fields = json.Fields;
                   marc.Type = json.Type;
                   marc.Sysno = json.Sysno;
                   marc.Sigla = json.Sigla;
                   s.sendCitationMarc(s, marc);
                });
            }
         }
        /**
         * ETAG MATCH
         **/
        else if (etags[this.etag] !== undefined) {

            testLog("43", "[ETAG MATCH]");

            var sigla: any = Permissions.refererValid(this.referer, this.remoteIP);
            var etagPrefix: any = this.etag.substring(0, 4);

            Statistics.addEtagStatisticByEtagPrefix(etagPrefix, sigla);

            this.response.statusCode = 304;
            this.response.end();
        }

        /**
         * STATICKE SOUBORY
         **/
        // http://cache.obalkyknih.cz/favicon.ico
        else if (this.requrl === '/favicon.ico') {

            var sigla: any = Permissions.refererValid(this.referer, this.remoteIP);
            testLog("41", "[STATICKE SUBORY] Sigla:" + sigla);

            if (!this.isRequestValid(sigla, true)) {
                return;
            }


            Statistics.addFileRequests(sigla);
            testLog("41", "-> fileRequests[sigla]:" + Statistics.fileRequests[sigla]);

            if (this.requrl.substring(this.requrl.length - 4) === '.ico')
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl), 'Content-Type': 'image/x-icon' });
            if (this.requrl.substring(this.requrl.length - 2) === '.js')
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl), 'Content-Type': 'text/javascript' });
            else
                this.response.writeHead(200, { 'Etag': 'file-' + md5(this.requrl) });

            etags['file-' + md5(this.requrl)] = null;
            var readStream: any = fileSystem.createReadStream('static' + this.requrl);
            readStream.pipe(this.response);
        }

        /**
         * API CITACE
         **/
        // http://cache.obalkyknih.cz/api/citace
        // http://localhost:1339/api/citace
        else if ((this.requrl.indexOf(urlApiCitace)) > 0) {
            var sigla: any = Permissions.ipValid(this.xreferer, this.remoteIP, this.query.sigla)
            testLog("41", "[API CITACE] Sigla:" + sigla);

            if (!this.isRequestValid(sigla, true, true)) {
                return;
            }

            libraries[sigla] = this.remoteIP;

            Statistics.addCitaceRequests(sigla);

            /*var rec = s.getOaiRecord(s, s.query.sysno);
            var out = s.renderCSNISO690(s, rec);

            s.response.writeHead(200);
            s.response.end(out);*/

            s.sendCitationSys(s);
        }

        /**
         * STATISTIKY
         **/
        else if (this.query.stats === 'true') {
            var sigla: any = Permissions.ipValid(this.xreferer, this.remoteIP, this.query.sigla);
            if (!sigla && (this.remoteIP === '127.0.0.1' || this.remoteIP === '::1' || this.remoteIP === '::ffff:127.0.0.1')) sigla = 'admin';

            if (sigla) {
                Statistics.getStatisticsBySigla(this, sigla);
            } else {
                this.send404IfNotValue(false, 'Access denied ' + this.remoteIP);
            }
        }

        /**
         * RELOAD OPRAVNENI
         **/
        else if (this.query.permreload === 'true') {
            Permissions.reloadPerms(this);
        }

        /**
         * PRIDANI NOVEHO OPRAVNENI
         **/
        else if (this.query.permcreate === 'true' && this.query.sigla) {
            Permissions.addPerm(this);
        }

        /**
         * PRIDANI NOVEHO NASTAVENI CITACII
         **/
        else if (this.query.settings_citace_create === 'true' && this.query.sigla) {
            CitaceSettings.addSettings(this, this.query, this.db.collection('settings_citace'));
        }

        /**
         * MODIFIKACE NASTAVENI CITACII
         **/
         else if(this.query.settings_citace_modify === 'true' && this.query.sigla) {
             CitaceSettings.modifySettings(this, this.query, this.db.collection('settings_citace'));
         }

         /**
          * SMAZANI NASTAVENI CITACII
          **/
         else if(this.query.settings_citace_remove === 'true' && this.query.sigla) {
             CitaceSettings.removeSettings(this, this.query.sigla, this.db.collection('settings_citace'));
         }

        /**
         * ALIVE
         **/
        else if ((this.requrl.indexOf(uriAlive)) > 0) {
            this.response.writeHead(200);
            this.response.end('ALIVE');
        }

        else {
            console.log("wrong query");
            this.send404IfNotValue(false);
        }

    }

    getOaiRecord(s: Server, sysno: any):any {
        var now = s.now;
        testLog("43", "!!!![getOaiRecord] sysno: " + sysno + " now: " + now);

        var rec = {
            sysno: sysno,
            marc21: 'vysledok'
        };

	      return rec;
    }

    getMarcRecord(s: Server): any {
        var sigla = s.sigla;
        var sysno = s.query.sysno;
        var citaceSettings = CitaceSettings.getSettingsForSigla(sigla);

        if (!citaceSettings) {
            this.send404IfNotValue(false, 'No settings for sigla ' + sigla);
            return;
        }

        var now = s.now;
        var url: string = citaceSettings.url.replace("##sysno##", sysno);
        var timeout = 1000 * 15;
        testLog("43", "!!!![getMarcRecord] now: " + now + " response: ");

        request({ url: url, timeout : timeout, strictSSL : false }, function (error, res, body) {
            if (!error) {
                var isEmpty = !/<marc:record/.test(body);

                var marc: Marc = new Marc(isEmpty);

                if (!isEmpty) {
                    var typeRegExp = new RegExp('<marc:leader>.{6}(.{2})');
                    var typeMatch = typeRegExp.exec(body);
                    marc.Type = typeMatch[1];

                    var fieldMatch = null;
                    var fieldRegExp = new RegExp('<marc:datafield tag="(.*?)" ind1="(.*?)" ind2="(.*?)">([^]*?)<\/marc:datafield>', 'g');

                    while (fieldMatch = fieldRegExp.exec(body)) {
                        var tag = Number(fieldMatch[1]);
                        var ind1 = fieldMatch[2];
                        var ind2 = fieldMatch[3];
                        var subtag = fieldMatch[4];

                        var field: Field = new Field();
                        field.Ind1 = ind1;
                        field.Ind2 = ind2;
                        var subtags: any = field.Subtags;

                        var subfieldMatch = null;
                        var subfieldRegExp = new RegExp('<marc:subfield code="(.*?)">(.*?)<\/marc:subfield>', 'g');
                        while (subfieldMatch = subfieldRegExp.exec(fieldMatch[4])) {
                            var code = subfieldMatch[1];
                            var value = subfieldMatch[2];

                            if (!subtags[code]) {
                                subtags[code] = [];
                            }

                            subtags[code].push(value);
                        }

                        if (!marc.Fields[tag]) {
                            marc.Fields[tag] = [];
                        }

                        marc.Fields[tag].push(field);
                    }
                }

                s.sendCitationMarc(s, marc);
            } else {
                console.dir(error);
            }
        });
    }

    getZ3950MarcRecord(s: Server): any {
        var sigla = s.sigla;
        var sysno = s.query.sysno;
        sigla = "LIA001";
        const db = 'li_us_cat', idx = '12', serverAddr = 'ipac.kvkli.cz', serverPort = '8887'; // TODO
        var citaceSettings = CitaceSettings.getSettingsForSigla(sigla);

        if (!citaceSettings) {
            return;
        }

        var now = s.now;
        var timeout = 1000 * 15;
        testLog("43", "!!!![getZ3950MarcRecord] now: " + now + " response: ");

        // seskladani bajtu vyhledavaciho dotazu od konce na zacatek
        // vyhledavaci fraze
        var valBuff = Buffer.alloc(sysno.length + 1);
        valBuff[0] = sysno.length;
        valBuff.write(sysno, 1);
        // vyhledavaci index
        const idxDec = parseInt(idx);
        const idxLen = idxDec > 255 ? 2 : 1;
        var idxBuff = Buffer.alloc(idxLen + 3);
        idxBuff[0]=idxLen;
        idxBuff.writeUIntBE(idxDec, 1, idxLen);
        idxBuff.writeUIntBE(0x9f2d, idxLen+1, 2);
        // zbytek vyhledavaciho dotazu az po zacatek
        const queryLen = idxBuff.length + valBuff.length + 27;
        var queryBuff = Buffer.alloc(28);
        queryBuff[0] = queryLen;
        queryBuff[1] = 0xa1;
        queryBuff[2] = queryLen - 2;
        queryBuff.writeUIntBE(0x06072a8648ce, 3, 6);
        queryBuff.writeUIntBE(0x130301a0, 9, 4);
        queryBuff[13] = idxBuff.length + valBuff.length + 14;
        queryBuff.writeUIntBE(0xbf66, 14, 2);
        queryBuff[16] = idxBuff.length + valBuff.length + 11;
        queryBuff.writeUIntBE(0xbf2c, 17, 2);
        queryBuff[19] = idxBuff.length + 6;
        queryBuff[20] = 0x30;
        queryBuff[21] = idxBuff.length + 4;
        queryBuff.writeUIntBE(0x9f7801019f79, 22, 6);

        const queryTotalLen = queryLen + db.length + 22;
        var dbBuff = Buffer.alloc(db.length + 23);
        dbBuff[0] = 0xb6;
        dbBuff[1] = queryTotalLen;
        dbBuff.writeUIntBE(0x8d01008e0101, 2, 6);
        dbBuff.writeUIntBE(0x8f0100900101, 8, 6);
        dbBuff.writeUIntBE(0x910131b2, 14, 4);
        dbBuff[18] = db.length + 3;
        dbBuff.writeUIntBE(0x9f69, 19, 2);
        dbBuff[21] = db.length;
        dbBuff.write(db, 22);
        dbBuff[db.length + 22] = 0xb5;

        const searchQuery = Buffer.concat([dbBuff, queryBuff, idxBuff, valBuff], queryTotalLen + 2);

        var z3950Client = new net.Socket();
        z3950Client.connect(serverPort, serverAddr, function(error) {
            //console.log('[ Z39.50 Connected ]');
            z3950Client.write(z3950InitBuffer); // Z39.50 INIT request
        });

        z3950Client.on('error', function(error) {
            console.log(error);
            s.send404IfNotValue(false);
        });

        z3950Client.setTimeout(timeout, function() {
            console.log('Z39.50 timeout');
            s.send404IfNotValue(false);
        });

        var responseCnt = 0; // pocitadlo interakci = odpovedi ze serveru
        z3950Client.on('data', function(data) {
            responseCnt++;
            //console.log("\n" + '<Received, ' + responseCnt + 'x>');
            //console.log(data.toString());
            //console.log(data.toString('hex'));

            switch (responseCnt) {
                case 1: z3950Client.write(searchQuery); break // Z39.50 FIND request
                case 2: z3950Client.write(z3950ShowReqBuffer); break; // Z39.50 SHOW request
                case 3: z3950Client.destroy(); // data dorazila, parsujeme
                    // nalezneme prvni dva identifikatory zacatku tagu
                    // * podle zacatku prvniho tagu zjistime kde zacinaju data
                    // * podle velikosti prvniho tagu (vyskyt druheho minus vyskyt prvniho) nalezneme kde se nachazi
                    //   prvni popis tagu. napr pokud ma T001 tag delku 8 hledame 001000800000 = 001 tag, 0008 delka, 00000 pozice
                    const posTag1 = data.indexOf(0x1e);
                    const posTag2 = data.indexOf(0x1e, posTag1+1);
                    const marcRec = data.slice(posTag1, data.length);
                    //console.log(marcRec.toString());
                    const fieldMapT001 = '001' + String('000' + (posTag2-posTag1).toString()).slice(-4) + '00000'
                    const fieldMapStart = data.indexOf(fieldMapT001);
                    const marcFieldsDef = data.slice(fieldMapStart, posTag1);
                    const marcFieldsDefLen = marcFieldsDef.length;

                    // strunktura pro ulozeni marc zaznamu obsahuje typ zaznamu a biblio uroven (leader 6. a 7. znak)
                    let marc: Marc = new Marc(true);
                    const docTypePos = parseInt(data.slice(16,17).toString('hex', 0, 8), 16) + 42;
                    marc.Type = data.slice(docTypePos, docTypePos+2).toString();

                    // pro vsechny tagy
                    for (let i=0; i<=marcFieldsDefLen; i=i+12) {
                        let tagDef = marcFieldsDef.slice(i, i+12);
                        let tagLength = parseInt(tagDef.slice(3,7));
                        let tagStart = parseInt(tagDef.slice(7,12));
                        let tag = marcRec.slice(tagStart+1, tagStart+tagLength);
                        let tagStr = tag.toString();
                        let tagCode = tagDef.slice(0,3);
                        let subtagPos = tag.indexOf(subtagDelimiter);
                        if (subtagPos !== -1) {

                            var field: Field = new Field();
                            field.Ind1 = tagStr.substring(0,1);
                            field.Ind2 = tagStr.substring(1,2);
                            var subtags: any = field.Subtags;

                            // pro vsechny subtagy
                            while (subtagPos < tagLength) {
                                let nextSubtagPos = tag.indexOf(subtagDelimiter, subtagPos+1);
                                if (nextSubtagPos === -1) nextSubtagPos = tagLength;
                                let subTag = tag.slice(subtagPos, nextSubtagPos).toString();
                                let subTagCode = subTag.substring(1, 2);
                                let subTagVal = subTag.substring(2, nextSubtagPos);

                                if (!subtags[subTagCode]) {
                                    subtags[subTagCode] = [];
                                }

                                subtags[subTagCode].push(subTagVal);

                                // posunout se dal
                                subtagPos = nextSubtagPos;
                            }

                            if (!marc.Fields[tagCode]) {
                                marc.Fields[tagCode] = [];
                            }
                            marc.Fields[tagCode].push(field);
                        }
                    }

                    console.log(JSON.stringify(marc, null, 2));
            }
        });
    }

    sendCitationMarc(s: Server, marc: Marc) {
        s.sendCitation(s, marc);
    }

    sendCitationSys(s: Server) {
        s.sendCitation(s, null);
    }

    sendCitation(s: Server, marc: Marc): any {
        var sigla = (marc ? marc.Sigla : null) || s.sigla;
        var sysno = (marc ? marc.Sysno : null) || s.query.sysno;

        var collection = s.db.collection(metaCollection);
        var uniqueKey = { sigla:sigla, sysno:sysno };

console.log(sysno);
console.log(sigla);
console.log(JSON.stringify(marc,' ') + "\n\n");
        collection.find(uniqueKey).toArray(function(err, items) {
            var exists = !err && items.length > 0;
            var citation;

            if (!exists) {
                citation = createCitation(s, marc);

                // citation must be retrieved and send from asynchronous call, handled in other function
                if (!citation) {
                    return;
                }

                if (citation.text != "") {
                    collection.insert(citation);
                    s.createBackendCitation(s, citation);
                }
            } else {
                if (items.length != 1) {
                    return console.dir("Multiple results found in mongo! ");
                }

                citation = items[0];

                var currentDate = new Date();

                //update if old
                if (currentDate.getTime() - citation.date.getTime() >= maxDays * 864000000) {  //unix epoch
                    citation = createCitation(s, marc);

                    if (!citation) {
                        return;
                    }

                    if (citation.text != "") {
                        collection.update(uniqueKey, citation);
                        s.createBackendCitation(s, citation);
                    }
                }
            }

            s.response.writeHead(200, 'OK', {'Content-Type': 'text/plain; charset=utf-8'});
            s.response.write(citation.text);
            s.response.end();
        });
    }

    createBackendCitation(s: Server, citation: any): any{
        var becollection = s.db.collection(backendCollection);

        var post_data_db = { citation : citation.text, sysno : s.query.sysno };

        becollection.insert({ timestamp: this.timestamp, flag_synced: 0, retry_count: 0, retry_date: this.timestamp, post_data: post_data_db, uri: 'api/add_citation' });
    }

    renderCSNISO690(s: Server, rec: any):any {
        var now = s.now;
        testLog("43", "!!!![renderCSNISO690] sysno: " + rec.sysno + " now: " + now);

	        return rec.marc21;
    }


    isRequestValid(sigla: any, validate_sigla: boolean, validate_parameters: boolean = false): boolean {
        if (validate_sigla && !sigla) {
            this.send404IfNotValue(false, 'Unknown referer. You need to sign up at http://www.obalkyknih.cz and provide your catalog URL');
            return false;
        }

        if (validate_parameters && !this.query.sysno) {
            console.log('Param missing');
            this.send404IfNotValue(false);
            return false;
        }

        return true;
    }

    //ak posle vrati true, ak neposle vrati false
    send404IfNotValue(value: any, message: any = undefined) {
        if (!value) {
            this.response.writeHead(404);

            if (message)
                this.response.end(message);
            else
                this.response.end();

            return true;
        }
        else {
            return false;
        }
    }
}

enum Type {
    MARCXML,
    Z3950
}

class Citace {
    sigla: string;
    type: Type;
    url: string;
    port: number;
    database: string;
    encoding: string;
    name: string;
    password: string;
    index_sysno: string;

    public getDbString(): any {
        var _type = this.type === Type.MARCXML ? 'marcxml' : 'z3950';

        if (this.type === Type.Z3950) {
            return { name:this.name, port:this.port, sigla:this.sigla, password:this.password, database:this.database, index_sysno:this.index_sysno, url:this.url, type:_type, encoding:this.encoding };
        } else {
            return { sigla:this.sigla, url:this.url, type:_type };
        }
    }

    constructor(settings: any) {
        this.sigla = settings.sigla;
        this.url = settings.url;
        this.type = settings.type === 'z3950' ? Type.Z3950 : Type.MARCXML;

        if (this.type === Type.Z3950) {
            this.port = settings.port;
            this.database = settings.database;
            this.encoding = settings.encoding;
            this.name = settings.name;
            this.password = settings.password;
            this.index_sysno = settings.index_sysno;
        }
    }
}

/**
 * NASTAVENI CITACI
 **/

class CitaceSettings {
    static settings: Citace[] = [];

    static removeSettings(serv: Server, sigla: any, collection: any) {
        serv.response.writeHead(200);
        if (serv.remoteIP === ipBackend || serv.remoteIP === '127.0.0.1' || serv.remoteIP === '::1' || serv.remoteIP === '::ffff:127.0.0.1') {
            if (CitaceSettings.settings[sigla]) {
                delete CitaceSettings.settings[sigla];
                collection.remove({ sigla:sigla });
            }
        }
        ser.response.end('ok');
    }

    static modifySettings(serv: Server, settings: any, collection: any) {
        serv.response.writeHead(200);
        if (serv.remoteIP === ipBackend || serv.remoteIP === '127.0.0.1' || serv.remoteIP === '::1' || serv.remoteIP === '::ffff:127.0.0.1') {
            var s =  CitaceSettings.settings[settings.sigla];

            if (settings.database) {
                s.database = settings.database;
            }
            if (settings.encoding) {
                s.encoding = settings.encoding;
            }
            if (settings.index_sysno) {
                s.index_sysno = settings.index_sysno;
            }
            if (settings.name) {
                s.name = settings.name;
            }
            if (settings.password) {
                s.password = settings.password;
            }
            if (settings.port) {
                s.port = settings.port;
            }
            if (settings.type) {
                s.type = settings.type === 'z3950' ? Type.Z3950 : Type.MARCXML;
            }
            if (settings.url) {
                s.url = settings.url;
            }

            collection.update({ sigla:s.sigla}, s.getDbString());
        }
        serv.response.end('ok');
    }

    static addSettings(serv: Server, settings: any, collection: any) {
        serv.response.writeHead(200);
        if (serv.remoteIP === ipBackend || serv.remoteIP === '127.0.0.1' || serv.remoteIP === '::1' || serv.remoteIP === '::ffff:127.0.0.1') {
            var s: Citace = new Citace(settings);
            CitaceSettings.settings[settings.sigla] = s;
            collection.insert(s.getDbString());
        }
        serv.response.end('ok');
    }

    static getCitaceSettings(clear = false, settings: any, db: any) {
        if (clear === true) {
            CitaceSettings.settings = [];
        }

        for(var s in settings) {
            CitaceSettings.settings[settings[s].sigla] = new Citace(settings[s]);
        }

        if (db) {
             db.collection('settings_citace').find().toArray(function(err, items) {
               if (!err) {
                    for(var i in items) {
                        CitaceSettings.settings[items[i].sigla] = new Citace(items[i]);
                    }
               }
            });
        }
    }

    static getSettingsForSigla(sigla: string): Citace {
        return CitaceSettings.settings[sigla];
    }
}

/**
 * PRAVA PRISTUPU
 **/

class Permissions {

    static referers: any = {}; // povolene referer hlavicky
    static perms = {}; // povolene ip adresy

    static addPerm(s: Server) {
        s.response.writeHead(200);
        var newPerm: any = {};

        if (s.remoteIP === ipBackend || s.remoteIP === '127.0.0.1' || s.remoteIP === '::1' || s.remoteIP === '::ffff:127.0.0.1') {
            //testLog
            if (s.query.ref)
                newPerm = { ref: s.query.ref, sigla: s.query.sigla };
            else if (s.query.ip)
                newPerm = { ip: s.query.ip, sigla: s.query.sigla };
            // add permission if not exists
            s.db.collection('perms').find(newPerm).count(function(err, permCount) {
                if (permCount == 0) s.db.collection('perms').insert(newPerm, { w: 0 }, function(err, result) {
                    Permissions.getPerms(s.db);
                });
            });
            s.response.write(JSON.stringify(Permissions.perms, null, ' ') + '\n\n');
            s.response.write(JSON.stringify(Permissions.referers, null, ' ') + '\n\n');
        }
        s.response.end('ok');
    }

    static getPerms(db, clear = false) {
        if (clear === true) {
            Permissions.perms = {}; Permissions.referers = {};
        }
        Permissions.perms['127.0.0.1'] = 'admin';
        Permissions.perms['::1'] = 'admin';
        Permissions.perms['::ffff:127.0.0.1'] = 'admin';

        db.collection('perms').find().toArray(function(err, items) {
            for (var i: any = 0; i < items.length; i++) {
                var item: any = items[i];
                if (item.ref) {
                    console.log('referer: ' + item.ref);
                    Permissions.referers[item.ref.toLowerCase()] = item.sigla.trim();
                }
                if (item.ip) {
                    console.log('ip: ' + item.ip);
                    Permissions.setSiglaForIp('::ffff:' + item.ip.trim(), item.sigla.trim());
                }
            }
        });
    }

    static reloadPerms(s: Server) {
        Permissions.getPerms(s.db);
        s.response.writeHead(200);
        if (Permissions.perms[s.remoteIP] || s.remoteIP === '127.0.0.1' || s.remoteIP === '::1' || s.remoteIP === '::ffff:127.0.0.1') {
            if (s.query.vymaz === 'true') {
                // for tests and debug only, not public url parameter
                Permissions.perms = {};
                Permissions.referers = {};
                etags = {};
                Statistics.clearData();
                // getPerms(db);
            }
            s.response.write(JSON.stringify(Permissions.perms, null, ' ') + '\n\n');
            s.response.write(JSON.stringify(Permissions.referers, null, ' ') + '\n\n');
        }
        s.response.end('ok');
    }

    static getSiglaForIp(ip: any) {
        return Permissions.perms[ip];
    }

    static setSiglaForIp(ip: any, sigla: any) {
        Permissions.perms[ip] = sigla;
    }

    static refererValid(referer, ip, encsigla) {
        // console.log('revererValid:' + referer);

        if (encsigla) {
            console.log(encsigla);
            var sigla: any = Helpers.decrypt(encsigla);
            if (regexpSigla.test(sigla)) return sigla;
        }

        var sigla = Permissions.getSiglaForIp(ip);
        if (sigla) return sigla;

        if (!referer) return false;

        referer = referer.toLowerCase();
        var refererOrig: any = referer;
        referer = referer.split('?')[0];
        var index: any = referer.indexOf('/', 8);
        if (index > 0) referer = referer.slice(0, index);

        if (Permissions.referers[referer]) { // 1. segment URL
            return Permissions.referers[referer];
        }
        if (Permissions.referers[referer + '/']) {
            return Permissions.referers[referer + '/'];
        }

        var index2nd: any = refererOrig.indexOf('/', index + 1);
        if (index2nd > 0) referer = refererOrig.slice(0, index2nd);

        if (Permissions.referers[referer]) { // 1.+2. segment URL
            return Permissions.referers[referer];
        }
        if (Permissions.referers[referer + '/']) {
            return Permissions.referers[referer + '/'];
        }

        if (Permissions.referers[refererOrig]) { // presna shoda URL
            return Permissions.referers[refererOrig];
        }

        //shoda adresy reverzne (porovnani vsech registrovanych adres s aktualnim referer)
        for (var property in Permissions.referers) {
            if (Permissions.referers.hasOwnProperty(property)) {
                if (refererOrig.indexOf(property) !== -1) {
                    return Permissions.referers[property];
                }
            }
        }

        console.log('referer ' + referer + ' is not valid (' + refererOrig + ')');
        return false;
    }

    static ipValid(xreferer, ip, sigla) {
        //console.log('ipValid:' + ip);
        var tmp: any = Permissions.refererValid(xreferer, ip, null);

        if (!tmp) return false;
        if (tmp === 'sigla') {
            return sigla;
        } else {
            return tmp;
        }
    }

}



/**
 * STATISTIKY
 **/

interface Stats {
    uptime: any;
    etag_citace_match: any;
    etag_file_match: any;
    file_requests: any;
    timeout_count: any;
    citace_requests: any;
    record_not_found: any;

    timestamp: any;
    ip: any;
}

class Statistics {

    static etagFileMatch: any = {}; // pocet dotazu na favicon, kesovanych prohlizecem od spusteni
    static etagCitaceMatch: any = {}; // pocet dotazu na favicon, kesovanych prohlizecem od spusteni
    static fileRequests: any = {}; // pocet dotazu na favicon, a jine
    static citaceRequests: any = {}; // pocet dotazu na generovani testu citace
    static timeoutCount: any = {}; // pocet timeout nedostupnosti dotazovanych externich serveru
    static recordNotfound: any = {}; // zaznam se na externim serveru nenasel

    static dateTimeout: any = 0; // cas do kdy je platny timeout
    static dateStartup: any = new Date(); // doba startu

    static addEtagFileMatch(sigla: any) {
        this.etagFileMatch[sigla]++ || (this.etagFileMatch[sigla] = 1);
        if (sigla != 'admin') this.etagFileMatch.admin++ || (this.etagFileMatch.admin = 1);
    }

    static addEtagCitaceMatch(sigla: any) {
        this.etagCitaceMatch[sigla]++ || (this.etagCitaceMatch[sigla] = 1);
        if (sigla != 'admin') this.etagCitaceMatch.admin++ || (this.etagCitaceMatch.admin = 1);
    }

    static addFileRequests(sigla: any) {
        this.fileRequests[sigla]++ || (this.fileRequests[sigla] = 1);
        if (sigla != 'admin') this.fileRequests.admin++ || (this.fileRequests.admin = 1);
    }

    static addCitaceRequests(sigla: any) {
        this.citaceRequests[sigla]++ || (this.citaceRequests[sigla] = 1);
        if (sigla != 'admin') this.citaceRequests.admin++ || (this.citaceRequests.admin = 1);
    }

    static addTimeoutCount(sigla: any) {
        this.timeoutCount[sigla]++ || (this.timeoutCount[sigla] = 1);
        if (sigla != 'admin') this.timeoutCount.admin++ || (this.timeoutCount.admin = 1);
    }

    static addRecordNotfound(sigla: any) {
        this.recordNotfound[sigla]++ || (this.recordNotfound[sigla] = 1);
        if (sigla != 'admin') this.recordNotfound.admin++ || (this.recordNotfound.admin = 1);
    }

    //specialne
    static addEtagStatisticByEtagPrefix(etagPrefix: string, sigla: any) {
        if (etagPrefix === 'file') {
            this.addEtagFileMatch(sigla);
        } else {
            this.addEtagCitaceMatch(sigla);
        }
    }

    static getStatisticsBySigla(s: any, sigla: number) {
        var stats = <Stats>{};
        stats.uptime = this.uptime();
        stats.etag_citace_match = this.etagCitaceMatch[sigla] || 0;
        stats.etag_file_match = this.etagFileMatch[sigla] || 0;
        stats.file_requests = this.fileRequests[sigla] || 0;
        stats.citace_requests = this.citaceRequests[sigla] || 0;
        stats.timeout_count = this.timeoutCount || 0;
        stats.record_not_found = this.recordNotfound || 0;

        s.response.writeHead(200);
        s.response.end(JSON.stringify(stats, null, ' '));
    }

    static clearData() {
        this.etagCitaceMatch = {};
        this.etagFileMatch = {};
        this.fileRequests = {};
        this.citaceRequests = {};
        this.timeoutCount = {};
        this.recordNotfound = {};
    }

    private static uptime() {
        var now: any = new Date();
        var uptime: any = Math.floor((now.getTime() - this.dateStartup.getTime()) / 1000);

        var sec: any = uptime % 60;
        uptime -= sec;
        uptime /= 60;
        var min: any = uptime % 60;
        uptime -= min;
        uptime /= 60;
        var hour: any = uptime % 24;
        uptime -= hour;
        uptime /= 24;

        now.setHours(hour, min, sec);
        var time: any = now.toString().split(' ')[4];

        return time + ' up ' + uptime + ' days, ' + this.dateStartup.toISOString()
    }
}


module.exports = {
    server: server,
    getPerms: Permissions.getPerms,
    getCitaceSettings: CitaceSettings.getCitaceSettings,
    testLog: testLog
}

function testLog(color, message) {
    console.log('\x1b[' + color + 'm', message, '\x1b[0m');
}

function createCitation(s: Server, marc: Marc): any {
    var sigla = (marc ? marc.Sigla : null) || s.sigla;
    var sysno = (marc ? marc.Sysno : null) || s.query.sysno;

    var text;

    if (marc) {
        text = marc.GetCitation();

        if (text != "" && text[text.length - 1] == " ") {
            text = text.substr(0, text.length - 1);
        }
    } else {
        var citaceSettings = CitaceSettings.getSettingsForSigla(sigla);
        if (!citaceSettings) {
            this.send404IfNotValue(false, 'No settings for sigla ' + sigla);
            return;
        }
        var type = citaceSettings.type;
        if (type == 0) {
            s.getMarcRecord(s);
        } else {
            s.getZ3950MarcRecord(s);
        }
        return null;
    }

    var currentDate = new Date();
    var citation = { sigla:sigla, sysno:sysno, text:text, date:currentDate };

    return citation;
}

class Field {
    public Ind1: String;
    public Ind2: String;
    public Subtags: { [key: string]: string[]; };

    constructor() {
        this.Subtags = {};
    }
}

class Marc {
    public Type: string;
    public Fields: { [key: number]: Field[]; };
    public Sysno: string;
    public Sigla: string;
    private isEmpty: boolean;

    static Illustrator: string = "ill";
    static Editor: string = "edt";
    static Translator: string = "trl";
    static Author: string = "aut";
    static IntroAuthor: string = "aui";

    constructor(isEmpty: boolean) {
        this.Fields = {};
        this.isEmpty = isEmpty;
    }

    public IsEmpty(): boolean {
        return this.isEmpty;
    }

    public GetCitation(): string {
        if (this.isEmpty) {
            return "";
        }

        /*
        console.log("primarni_odpovednost: " + this.GetValue(100, 'a'));
        console.log("nazev: " + this.GetValue(245, 'a'));
        console.log("podnazev: " + this.GetValue(245, 'b'));
        console.log("sekundarni_odpovednost: " + (this.Fields[700] ? this.Fields[700].length : 0));
        */

        if (this.Fields[700]) for (var i = 0; i < this.Fields[700].length; i++) {
            if (this.Fields[700][i].Ind2 != '2' && this.Fields[700][i].Subtags['a'] && this.Fields[700][i].Subtags['4']) console.log("-" + this.Fields[700][i].Subtags['a'] + "(" + this.Fields[700][i].Subtags['4'] + ")");
        }

        /*
        console.log("vydani: " + this.GetValue(250, 'a'));
        console.log("misto_vydani: " + this.GetValue(260, 'a'));
        console.log("misto_vydani2: " + this.GetValue(264, 'a'));
        console.log("vydavatel: " + this.GetValue(260, 'b'));
        console.log("vydavatel2: " + this.GetValue(264, 'b'));
        console.log("rok_vydani: " + this.GetValue(260, 'c'));
        console.log("rok_vydani2: " + this.GetValue(264, 'c'));
        console.log("rok_vydani3: " + this.GetValue(773, 'g'));
        console.log("pocet_stran: " + this.GetValue(300, 'a'));
        console.log("edice: " + this.GetValue(490, 'a'));
        console.log("cislo_edice: " + this.GetValue(490, 'v'));
        console.log("ISBN: " + this.GetValue(20, 'a'));
        console.log("dostupnost: " + this.GetValue(856, 'a'));
        console.log("poznamka: " + this.GetValue(500, 'a'));
        console.log("ISSN: " + this.GetValue(22, 'a'));
        console.log("ISSN2: " + this.GetValue(773, 'x'));
        console.log("URL: " + this.GetValue(910, 'w'));
        console.log("URL2: " + this.GetValue(856, 'u'));
        console.log("korporace: " + this.GetValue(110, 'a'));
        console.log("svazek/rocnik: " + this.GetValue(915, 'a'));
        console.log("rocnik_cislo: " +  this.GetValue(915, 'b'));
        console.log("jine_id: " + this.GetValue(24, 'a'));
        console.log("jine_id_typ: " + this.GetValue(24, '2'));
        console.log("meritko: " + this.GetValue(255, 'a'));
        console.log("nosic: " + this.GetValue(340, 'a'));
        console.log("nazev_casopisu: " + this.GetValue(773, 't'));
        */

        var primarni_odpovednost = this.GetPrimaryAuthority();

        var nazev = this.GetValue(245, 'a') ? this.GetValue(245, 'a') + "" : "";
        if (nazev.substr(nazev.length - 2, 2) == " :" || nazev.substr(nazev.length - 2, 2) == " /") {
            nazev = nazev.substr(0, nazev.length - 2);
        }
        if (nazev[nazev.length - 1] == '.') {
            nazev = nazev.substr(0, nazev.length - 1);
        }

        var podnazev = this.GetValue(245, 'b') ? this.GetValue(245, 'b') + "" : "";
        if (podnazev.substr(podnazev.length - 2, 2) == " /") {
            podnazev = podnazev.substr(0, podnazev.length - 2);
        }
        if (podnazev[podnazev.length - 1] == '.') {
            podnazev = podnazev.substr(0, podnazev.length - 1);
        }

        var sekundarni_odpovednost = this.GetIllustratorsString();
        sekundarni_odpovednost = sekundarni_odpovednost + (this.GetEditorsString() != "" ? (sekundarni_odpovednost != "" ? ", " : "") + this.GetEditorsString() : "");
        sekundarni_odpovednost = sekundarni_odpovednost + (this.GetIntroAuthorsString() != "" ? (sekundarni_odpovednost != "" ? ", " : "") + this.GetIntroAuthorsString() : "");
        sekundarni_odpovednost = sekundarni_odpovednost + (this.GetTranslatorsString() != "" ? (sekundarni_odpovednost != "" ? ", " : "") + this.GetTranslatorsString() : "");
        if (sekundarni_odpovednost != "") sekundarni_odpovednost = sekundarni_odpovednost[0].toUpperCase() + sekundarni_odpovednost.substring(1) + ". ";

        var vydani = this.GetValue(250, 'a') ? this.GetValue(250, 'a') + "" : "";
        if (vydani != "") {
            vydani = vydani + (vydani[vydani.length - 1] != '.' ? ". " : " ");
        }

        var misto_vydani = this.GetValue(260, 'a') ? this.GetValue(260, 'a') + "" : (this.GetValue(264, 'a') ? this.GetValue(264, 'a') + "" : "");
        if (misto_vydani.substr(misto_vydani.length - 2, 2) == " :") {
            misto_vydani = misto_vydani.substr(0, misto_vydani.length - 2);
        }
        if (misto_vydani[0] == '[' && misto_vydani[misto_vydani.length - 1] == ']' && misto_vydani.indexOf(',') == -1) {
            misto_vydani = misto_vydani.substr(1, misto_vydani.length - 2);
        }

        var vydavatel = this.GetValue(260, 'b') ? this.GetValue(260, 'b') + "" : (this.GetValue(264, 'b') ? this.GetValue(264, 'b') + "" : "");
        if (vydavatel.substr(vydavatel.length - 1) == ',') {
            vydavatel = vydavatel.substr(0, vydavatel.length - 1);
        }
        if (vydavatel[0] == '[' && vydavatel[vydavatel.length - 1] == ']' && vydavatel.indexOf(',') == -1) {
            vydavatel = vydavatel.substr(1, vydavatel.length - 2);
        }
        if ([" :", " ;"].indexOf(vydavatel.substr(vydavatel.length - 2, 2)) != -1) {
            vydavatel = vydavatel.substr(0, vydavatel.length - 2);
        }

        var rok_vydani = this.GetValue(260, 'c') ? this.GetValue(260, 'c') : this.GetValue(264, 'c');
        if (rok_vydani && rok_vydani[0] == '[' && rok_vydani[rok_vydani.length - 1] == ']' && rok_vydani.indexOf(',') == -1) {
            rok_vydani = rok_vydani.substr(1, rok_vydani.length - 2);
        }
        if (!rok_vydani && this.GetValue(773, 'g')) {
            var match = rok_vydani = /\(.+[^0-9]+(\d{4})[^0-9]*\)|\([^0-9[]*(\d{4})[^0-9\]]*\)/.exec(this.GetValue(773, 'g'));

            if (match) {
                if (match[1]) {
                    rok_vydani = match[1];
                } else if (match[2]) {
                    rok_vydani = match[2];
                }
            }
        }
        if (rok_vydani && ['.', '?'].indexOf(rok_vydani[rok_vydani.length - 1]) != -1) rok_vydani = rok_vydani.substr(0, rok_vydani.length - 1);
        if (rok_vydani && rok_vydani[0] == 'p') rok_vydani = rok_vydani.substr(1);
        var match = /cop\. (.*)/.exec(rok_vydani); if (match) rok_vydani = match[1];
        var match = /cca (.*)/.exec(rok_vydani); if (match) rok_vydani = match[1];

        var pocet_stran = this.GetValue(300, 'a') ? this.GetValue(300, 'a') + "" : "";
        if (pocet_stran == "" && this.GetValue(773, 'g')) {
            var match = /s. ([0-9-]*)/.exec(this.GetValue(773, 'g'));
            if (match && match[1])
                pocet_stran = match[1];
        } else if (pocet_stran != "") {
            var p = /(\d+) s\.|(\d+) stran/.exec(pocet_stran);

            pocet_stran = p && p[1] ? p[1] + " s. " : (p && p[2] ? p[2] + " s. " : "");
        }


        var edice = this.GetValue(490, 'a') ? this.GetValue(490, 'a') + "" : "";
        if (edice.substr(edice.length - 2, 2) == " ;") {
            edice = edice.substr(0, edice.length - 2);
        }

        var cislo_edice = this.GetValue(490, 'v');

        var ISBN = this.GetValue(20, 'a') ? this.GetValue(20, 'a') + "" : "";
        if (ISBN != "") {
            if (ISBN.indexOf(' ') != -1) {
                ISBN = ISBN.substr(0, ISBN.indexOf(' '));
            }

            ISBN = ISBN ? "ISBN " + ISBN + ". " : "";
        }

        var dostupnost = this.GetValue(856, 'a');
        var poznamka = "";//this.GetValue(500, 'a'); -- zatial bez poznamok

        var ISSN = this.GetValue(22, 'a') ? this.GetValue(22, 'a') : this.GetValue(773, 'x');
        ISSN = ISSN ? "ISSN " + ISSN + ". " : "";

        var URL = this.GetValue(910, 'w');
        if (!URL) {
            var _fields = this.Fields[856];

            if (fields) {
                var fields = fields.filter(function(f) { f.Subtags['u'] && f.Ind1 == '4' && f.Ind2 == '0' });

                if (fields && fields.length > 0)
                    URL = fields[0].Subtags['u'];
            }
        }

        var korporace = this.GetValue(110, 'a');
        korporace = korporace ? korporace : "";
        if (korporace != "") {
            korporace = korporace + "";
            korporace = korporace + (korporace[korporace.length - 1] != '.' ? ". " : " ");
        }


        var svazek = this.GetValue(915, 'a') ? this.GetValue(915, 'a') + ". " : "";
        var rocnik_cislo = this.GetValue(915, 'b');
        if (svazek == "" && this.GetValue(773, 'g')) {
            var match = /.*[rR]oč\. (\d+).*[čČ]\. (\d+)|[vV]ol. (\d+)/.exec(this.GetValue(773, 'g'));

            svazek = match && match[1] ? match[1] : (match && match[3] ? match[3] : "");
            if (!rocnik_cislo && match && match[2]) rocnik_cislo = match[2];
        }
        var rocnik = svazek;

        var jine_id = this.GetValue(24, 'a');
        var jine_id_typ = this.GetValue(24, '2');
        var meritko = this.GetValue(255, 'a') ? "[" + this.GetValue(255, 'a') + "]" : "";
        var nosic = this.GetValue(340, 'a') ? "[" + this.GetValue(340, 'a') + "]" : "";
        var nazev_casopisu = this.GetArticleName();
        var rozsah_stran = pocet_stran;

        var nazev_podnazev = (nazev ? nazev + (podnazev ? "" : ". ") : "")
                            + (podnazev ? ": " + podnazev + ". " : "");

        var misto_nakladatelstvi_rok = (misto_vydani ? misto_vydani + (vydavatel ? ": " : "") : "")
                                    + (vydavatel ? vydavatel : "")
                                    + (rok_vydani ? (misto_vydani || vydavatel ? ", " : "") + rok_vydani : "")

        var edice_cislo_edice = (edice ? edice : "")
                            + (cislo_edice ? (edice ? ", " + cislo_edice : cislo_edice) : "")
                            + (edice || cislo_edice ? ". " : "");

        var rocnik_rocnik_cislo = (rocnik ? rocnik : "") + (rocnik_cislo ? "(" + rocnik_cislo + ")" : "");

        var DOI = jine_id ? "DOI: " + jine_id + ". " : "";

        var jine_id_typ_jine_id = jine_id_typ ? (jine_id ? jine_id_typ + ": " + jine_id + ". " : "") : "";

        switch(this.Type) {
            case "aa":
                return primarni_odpovednost + nazev_podnazev + nazev_casopisu + vydani + misto_nakladatelstvi_rok + (rocnik_rocnik_cislo != "" ? (misto_nakladatelstvi_rok != "" ? ", " : "") + rocnik_rocnik_cislo : "") + (rozsah_stran != "" ? (misto_nakladatelstvi_rok != "" || rocnik_rocnik_cislo != "" ? ", " + rozsah_stran : rozsah_stran) : (misto_nakladatelstvi_rok != "" || rocnik_rocnik_cislo != "" ? ". " : "")) + DOI + ISSN + (URL ? "Dostupné také z: " + URL + (poznamka ? ". " : "") : "") + (poznamka ? poznamka + "." : "");
            case "em":
                var _index = nazev_podnazev.length - 2;
                return primarni_odpovednost + korporace + (meritko ? (nazev_podnazev != "" ? nazev_podnazev.substr(0, _index) + meritko + nazev_podnazev.substr(_index) : meritko) : (nazev_podnazev != "" ? nazev_podnazev : "")) + vydani + sekundarni_odpovednost + misto_nakladatelstvi_rok + (pocet_stran != "" ? ", " + pocet_stran : (misto_nakladatelstvi_rok != "" ? ". " : "")) + edice_cislo_edice + ISBN + ISSN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL : "");
            case "mm":
                var _index = nazev_podnazev.length - 2;
                var datum_citace = new Date(Date.now()).toLocaleString([], { year : "numeric", month : "numeric", day : "numeric" });
                var cit = "[cit. " + datum_citace + "]. ";
                nosic = " [online]"; // mm je vzdy online nosic

                return primarni_odpovednost + korporace + (nosic ? (nazev_podnazev != "" ? nazev_podnazev.substr(0, _index) + nosic + nazev_podnazev.substr(_index) : nosic) : (nazev_podnazev != "" ? nazev_podnazev : "")) + svazek + vydani + sekundarni_odpovednost + misto_nakladatelstvi_rok + (pocet_stran != "" ? (misto_nakladatelstvi_rok != "" ? ", " : "") + pocet_stran + cit : (misto_nakladatelstvi_rok != "" ? " " : "") + cit) + edice_cislo_edice + ISBN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL + ". " : "") + (poznamka ? poznamka + ". " : "");
            case "cs":
                return nazev_podnazev + vydani + misto_nakladatelstvi_rok + (rocnik_rocnik_cislo != "" ? (misto_nakladatelstvi_rok != "" ? ", " : "") + rocnik_rocnik_cislo : "") + (pocet_stran != "" ? (misto_nakladatelstvi_rok != "" || rocnik_rocnik_cislo != "" ? ", " : "") + pocet_stran : ". ") + ISBN + ISSN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL : "");
            case "fm":
                var _index = nazev_podnazev.length - 2;
                return primarni_odpovednost + korporace + (meritko ? (nazev_podnazev != "" ? nazev_podnazev.substr(0, _index) + meritko + nazev_podnazev.substr(_index) : meritko) : (nazev_podnazev != "" ? nazev_podnazev : "")) + vydani + sekundarni_odpovednost + misto_nakladatelstvi_rok + (pocet_stran != "" ? (misto_nakladatelstvi_rok != "" ? ", " : "") + pocet_stran : (misto_nakladatelstvi_rok != "" ? ". " : "")) + edice_cislo_edice + ISBN + ISSN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL : "");
            case "as":
            case "js":
            case "gs":
            case "ts":
            case "ms":
            case "ks":
                return nazev_podnazev + vydani + misto_nakladatelstvi_rok + (rocnik_rocnik_cislo != "" ? (misto_nakladatelstvi_rok != "" ? ", " + rocnik_rocnik_cislo : rocnik_rocnik_cislo) : "") + (pocet_stran != "" ? (misto_nakladatelstvi_rok != "" || rocnik_rocnik_cislo != "" ? ", " : "") + pocet_stran : (misto_nakladatelstvi_rok != "" || rocnik_rocnik_cislo != "" ? ". " : "")) + ISSN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL : "");
            case "am":
            case "jm":
            case "cm":
            case "au":
            case "ii":
            case "kc":
            case "om":
            case "im":
            case "gm":
            case "ai":
            case "km":
            case "tm":
            case "rm":
                return primarni_odpovednost + korporace + nazev_podnazev + svazek + vydani + sekundarni_odpovednost + misto_nakladatelstvi_rok + (pocet_stran != "" ? (misto_nakladatelstvi_rok != "" ? ", " + pocet_stran : pocet_stran) : (misto_nakladatelstvi_rok != "" ? ". " : "")) + edice_cislo_edice + ISBN + jine_id_typ_jine_id + (URL ? "Dostupné také z URL: " + URL : "");
            default:
                return "";
        }
    }

    private GetOtherSecondaryAuthorities(): string[] {
        return this.GetSecondaryAuthors(null);
    }

    private GetIntroAuthorsString(): string {
        if (this.GetPrimaryAuthorRole() != "aui")
             return this.GetStringForSecondaryAuthorities(Marc.IntroAuthor, "autor úvodu");
        else
            return "";
    }

    private GetTranslatorsString(): string {
        if (this.GetPrimaryAuthorRole() != "trl")
            return this.GetStringForSecondaryAuthorities(Marc.Translator, "přeložil");
        else
            return "";
    }

    private GetEditorsString(): string {
        if (this.GetPrimaryAuthorRole() != "edt")
            return this.GetStringForSecondaryAuthorities(Marc.Editor, "editor");
        else
            return "";
    }

    private GetOtherAuthors(): string[] {
        return this.GetSecondaryAuthors(Marc.Author);
    }

    private GetIllustratorsString(): string {
        if (this.GetPrimaryAuthorRole() != "ill")
             return this.GetStringForSecondaryAuthorities(Marc.Illustrator, "ilustroval");
        else
            return "";
    }

    private GetStringForSecondaryAuthorities(authorTag: string, actionText: string): string {
        var authors = this.GetSecondaryAuthors(authorTag);
        var text = "";
        var nameMatch;

        if (authors.length > 0) {
            nameMatch = /([^,]*), (.*[a-zA-Z].*)|(.*)/.exec(authors[0]);
            text = actionText + " " + (nameMatch[1] ? nameMatch[2] + " " + nameMatch[1].toUpperCase() : nameMatch[3]);

            if (authors.length > 1)
            for (var i = 1; i < authors.length; i++) {
                nameMatch = /([^,]*), (.*[a-zA-Z].*)|(.*)/.exec(authors[i]);
                text = text + ", " + actionText + " " + (nameMatch[1] ? nameMatch[2] + " " + nameMatch[1].toUpperCase() : nameMatch[3]);
            }
        }

        return text;
    }

    private GetSecondaryAuthors(code: string): string[] {
         var authorFields;
         var authors = [];

         var secondary_tags = ['aui', 'ill', 'edt', 'trl'];
         var primary_index = secondary_tags.indexOf(this.GetPrimaryAuthorRole());
         if (primary_index != -1) {
             secondary_tags.splice(primary_index, 1);
         }

         if (!this.Fields[700]) {
             return [];
         }

         if (code) {
             authorFields = this.Fields[700].filter(function(f) { return f.Ind2 != '2' && f.Subtags['a'] && f.Subtags['4'] && f.Subtags['4'].filter(function(f2) { return f2 == code }).length > 0 });
         } else {
             authorFields  = this.Fields[700].filter(function(f) { return f.Subtags['a'] && (!f.Subtags['4'] || (f.Subtags['4'] && f.Subtags['4'].filter(function(f2) { return secondary_tags.indexOf(f2) == -1 }).length > 0 ))});
         }

         var temp = []; //filtruje duplicity tag 700, subtag $a ind2 = 2
         authorFields = authorFields.filter(function(f) { return temp.indexOf(f.Subtags['a'][0]) == -1 && temp.push(f.Subtags['a'][0]) });

         for (var i = 0; i < authorFields.length; i++) {
             var auths = authorFields[i].Subtags['a'];
             for (var j = auths.length - 1; j >= 0; j--) {
                 var author = auths[j];

                 if (author.substr(author.length - 1, 1) == ',') {
                     author = author.substr(0, author.length - 1);
                 }

                 authors.push(author);
             }
         }

         return authors;
    }

    private GetValue(tag: number, subtag: string): any {
        if (!this.Fields[tag]) {
            return null;
        }

        var matches = this.Fields[tag].filter(function(f) { return f.Subtags[subtag] && f.Subtags[subtag].length > 0 })[0];
        var value = matches ? matches.Subtags[subtag][0] : null;

        return value;
    }

    private GetArticleName(): string {
        var casopisy = [];

        if (this.Fields[773]) {
            var values = this.Fields[773].filter(function(f) { return f.Subtags['t'] && f.Subtags['t'].length > 0 });

            if (values && values.length > 0) {
                for (var i = 0; i < values.length; i++) {
                    casopisy.push(values[i].Subtags['t'][0]);
                }

                return casopisy.join('. ') + ". ";
            }
        }

        return "";
    }

    private GetPrimaryAuthority(): string {
        var primarni_odpovednost = this.GetValue(100, 'a');

        if (primarni_odpovednost) {
            if ([',','.'].indexOf(primarni_odpovednost[primarni_odpovednost.length - 1]) != -1) {
                primarni_odpovednost = primarni_odpovednost.substr(0, primarni_odpovednost.length - 1);
            }

            var match = /([^,]*), ([^,]*)|([^, ]*) ([^,]*)|(.+)/.exec(primarni_odpovednost);

            primarni_odpovednost = (match && match[1] && match[2] ? match[1].toUpperCase() + ", " + match[2] : (match && match[3] && match[4] ? match[4].toUpperCase() + ", " + match[3] : null));
            if (!primarni_odpovednost && match && match[5]) primarni_odpovednost = match[5].toUpperCase();
        }

        var otherAuthors = this.GetOtherSecondaryAuthorities(this.GetValue(100, 'a'));

        if (otherAuthors) {
            for (var i = 0; i < otherAuthors.length; i++) {
                var match = /(.*), (.*)|(.+)/.exec(otherAuthors[i]);

                if (!match) {
                    primarni_odpovednost = null;
                } else {
                    if ((i == 0 && primarni_odpovednost) || i > 0) {
                        if (match[1]) {
                            primarni_odpovednost = primarni_odpovednost + (i < (otherAuthors.length - 1) ? ", " : " a ") + match[2] + " " + match[1].toUpperCase();
                        } else {
                            primarni_odpovednost = primarni_odpovednost + (i < (otherAuthors.length - 1) ? ", " : " a ") + match[3].toUpperCase();
                        }
                    } else {
                        if (match[1]) {
                            primarni_odpovednost = match[1].toUpperCase() + ", " + match[2];
                        } else {
                            primarni_odpovednost = match[3].toUpperCase();
                        }
                    }
                }
            }
        }

        return primarni_odpovednost ? primarni_odpovednost + ". " : "";
    }

    private GetPrimaryAuthorRole(): string {
        return this.Fields[100] && this.Fields[100][0].Subtags['4'] ? this.Fields[100] && this.Fields[100][0].Subtags['4'][0] : "";
    }
};
